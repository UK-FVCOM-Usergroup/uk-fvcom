      MODULE ALLOCEUTRO
      REAL, ALLOCATABLE, DIMENSION(:,:) ::                      &
         SK1415    ,SK2614    ,SK150     ,SK2114    ,SK15P      &
        ,SK200     ,SK210     ,SK220     ,SK240     ,SK250      &
        ,SR260     ,SK2324    ,SK26OC    ,RPOP_DDA  ,LPOP_DDA   &
        ,RDOP_DDA  ,LDOP_DDA  ,PO4T_DDA  ,RPON_DDA  ,LPON_DDA   &
        ,RDON_DDA  ,LDON_DDA  ,NH4T_DDA  ,NO23_DDA  ,BSI_DDA    &
        ,SIT_DDA   ,RPOC_DDA  ,LPOC_DDA  ,RDOC_DDA  ,LDOC_DDA   &
        ,EXDOC_DDA ,REPOC_DDA ,REDOC_DDA ,O2EQ_DDA  ,DO_DDA     &
        ,ECMSAL_DDA,ECMTEM_DDA,DPO4_DDA  ,DNH4_DDA  ,DSI_DDA    &
        ,POP_DDA   ,DOP_DDA   ,TP_DDA    ,PON_DDA   ,DON_DDA    &
        ,TN_DDA    ,POC_DDA   ,DOC_DDA   ,TOC_DDA

      REAL, ALLOCATABLE, DIMENSION(:,:) ::                      &
         HYDSAL_DDA  ,HYDTEMP_DDA ,PHYT1_DMIN  ,PHYT1_DMAX      &
        ,PHYT2_DMIN  ,PHYT2_DMAX  ,PHYT3_DMIN  ,PHYT3_DMAX      &
        ,POP_DMIN    ,POP_DMAX    ,DOP_DMIN    ,DOP_DMAX        &
        ,DPO4_DMIN   ,DPO4_DMAX   ,TP_DMIN     ,TP_DMAX         &
        ,PON_DMIN    ,PON_DMAX    ,DON_DMIN    ,DON_DMAX        &
        ,DNH4_DMIN   ,DNH4_DMAX   ,NO23_DMIN   ,NO23_DMAX       &
        ,TN_DMIN     ,TN_DMAX     ,BSI_DMIN    ,BSI_DMAX        &
        ,DSI_DMIN    ,DSI_DMAX    ,POC_DMIN    ,POC_DMAX        &
        ,DOC_DMIN    ,DOC_DMAX    ,TOC_DMIN    ,TOC_DMAX        &
        ,O2EQ_DMIN   ,O2EQ_DMAX   ,DO_DMIN     ,DO_DMAX         &
        ,HYDSAL_DMIN ,HYDSAL_DMAX ,HYDTEMP_DMIN,HYDTEMP_DMAX    &
        ,CHLA1_DMIN  ,CCHL1_DMIN  ,CHLA2_DMIN  ,CCHL2_DMIN      &
        ,CHLA3_DMIN  ,CCHL3_DMIN  ,CHLA1_DMAX  ,CCHL1_DMAX      &
        ,CHLA2_DMAX  ,CCHL2_DMAX  ,CHLA3_DMAX  ,CCHL3_DMAX      

      REAL, ALLOCATABLE, DIMENSION(:,:) ::                      &
         SAL_GDA     ,PHYT1_GDA   ,PHYT2_GDA   ,PHYT3_GDA       &
        ,TPOP_GDA    ,TDOP_GDA    ,TPON_GDA    ,TDON_GDA        &
        ,NO23_GDA    ,TPSI_GDA    ,TPOC_GDA    ,TDOC_GDA        &
        ,DPO4_GDA    ,DNH4_GDA    ,DSI_GDA     ,O2EQ_GDA        &
        ,BOTBODHS_GDA,TGPP_GDA    ,TNPP_GDA    ,TRESP_GDA       &
        ,SKE_GDA     ,ECMTMP_GDA  ,ECMSAL_GDA

!     LABELED COMMON FOR EUTROPHICATION ALGAL GROWTH ROUTINES
      REAL, ALLOCATABLE, DIMENSION(:,:) ::                      &
         PCRB1  ,PCRB2  ,PCRB3  ,NCRB1  ,NCRB2  ,NCRB3  ,SCRB1  &
        ,SCRB2  ,SCRB3  ,STP20  ,GPP1   ,GPP2   ,GPP3   ,DPP1   &
        ,DPP2   ,DPP3   ,RESP   ,GRAZ   ,ALG1VS ,ALG2VS ,ALG3VS &
        ,RNUTR1 ,RNUTR2 ,RNUTR3 ,RLGHT1 ,RLGHT2 ,RLGHT3 ,ATTENL &
        ,SKE    ,CHLAVEG,CHLMING,CHLMAXG,CCHL1S ,CCHL2S ,CCHL3S &
        ,PNH41  ,PNH42  ,PNH43  ,PO4SS  ,SISS
      REAL,    ALLOCATABLE, DIMENSION(:) :: KEBASE
      INTEGER, ALLOCATABLE, DIMENSION(:,:) :: ISTP20
      REAL :: ISURF,KLWIND
      REAL,DIMENSION(450) :: K1RBT,K1GRZCT,K2RBT,K2GRZCT,K3RBT,K3GRZCT
      REAL, ALLOCATABLE :: DEPFLUX(:,:),CFLUXS(:,:)   !Tian

!Added for Zhao
      REAL, ALLOCATABLE, DIMENSION(:,:) :: ATTENL_TMP,ITOT_TMP,SKE_TMP,DZ_TMP
      REAL, ALLOCATABLE, DIMENSION(:)   :: HBAR_TMP
      REAL, ALLOCATABLE, DIMENSION(:,:) :: ITOT_L
!END add for Zhao
      END MODULE ALLOCEUTRO
      
!OPTION CROSSREF ON
!OPTION SYMTABLE ON
!PAGEWIDTH 132
!
!***********************************************************************
! 
! 
      SUBROUTINE TUNER(DOAVEG)
! 
! 
!***********************************************************************
! 
! 
!                                  Integrated Eutrophication Model - IEM
!                                  -------------------------------------
!                         Provides users with the choice of the standard
!                         HydroQual eutrophication algal growth modeling
!                         framework -or- the Laws-Chalup algal growth
!                         modeling framework
!
!                                                  Standard   Law-Chalup 
!              Variable Nutrient Stoichiometry         Y           Y
!                        Variable C:Chla Ratio         N           Y
!                      Respiration = f(growth)         N           Y
!
!                           Coupling to the Sediment Nutrient Flux Model
! 
!***********************************************************************
! 
! 
!     SYSTEMS                                                      UNITS
! 
!     -------                                                      -----
!        1 - SALINITY (SAL)                                          PPT
!
!     PHYTOPLANKTON
!        2 - WINTER DIATOMS (PHYT1)                               MG C/L
!        3 - SUMMER ASSEMBLAGE (PHYT2)                            MG C/L
!        4 - FALL ASSEMBLAGE (PHYT3)                              MG C/L
!
!     PHOSPHORUS
!        5 - REFRACTORY PARTICULATE ORGANIC (RPOP)                MG P/L
!        6 - LABILE PARTICULATE ORGANIC (LPOP)                    MG P/L
!        7 - REFRACTORY DISSOLVED ORGANIC (RDOP)                  MG P/L
!        8 - LABILE DISSOLVED ORGANIC (LDOP)                      MG P/L
!        9 - TOTAL DISSOLVED INORGANIC (PO4T)                     MG P/L
!
!     NITROGEN
!       10 - REFRACTORY PARTICULATE ORGANIC (RPON)                MG N/L
!       11 - LABILE PARTICULATE ORGANIC (LPON)                    MG N/L
!       12 - REFRACTORY DISSOLVED ORGANIC (RDON)                  MG N/L
!       13 - LABILE DISSOLVED ORGANIC (LDON)                      MG N/L
!       14 - TOTAL AMMONIA (NH4T)                                 MG N/L
!       15 - NITRITE + NITRATE (NO23)                             MG N/L
!
!     SILICA
!       16 - BIOGENIC - UNAVAILABLE (BSI)                        MG SI/L
!       17 - TOTAL INORGANIC (SIT)                               MG SI/L
!
!     CARBON
!       18 - REFRACTORY PARTICULATE ORGANIC (RPOC)                MG C/L
!       19 - LABILE PARTICULATE ORGANIC (LPOC)                    MG C/L
!       20 - REFRACTORY DISSOLVED ORGANIC (RDOC)                  MG C/L
!       21 - LABILE DISSOLVED ORGANIC (LDOC)                      MG C/L
!       22 - ALGAL EXUDATE - DISSOLVED ORGANIC (EXDOC)            MG C/L
!
!       23 - REACTIVE PARTICULATE ORGANIC - CSO/WWTP (REPOC)      MG C/L
!       24 - REACTIVE DISSOLVED ORGANIC - CSO/WWTP (REDOC)        MG C/L
!
!       25 - O2*  - AQUEOUS SOD (O2EQ)                           MG O2/L
!       26 - DISSOLVED OXYGEN (DO)                               MG O2/L
! 
!***********************************************************************
! 
!     CONSTANTS 
!     --------- 
!                  NAMES AND DESCRIPTIONS OF CONSTANTS
! 
!   NO   NAME      DESCRIPTION                                     UNITS
!    1   AGMOPT  ALGAL GROWTH MODEL OPTION
!                = 0 USE STANDARD OR TRADITIONAL ALGAL GROWTH KINETICS
!                = 1 USE LAWS-CHALUP FORMULATION
!    2   ACTALG  NUMBER OF ACTIVE ALGAL GROUPS TO SIMULATE
!                = 1 JUST ONE GROUP WILL BE SIMULATED USING SYSTEM 2
!                = 2 TWO GROUPS WILL BE SIMULATED USING SYSTEMS 2 AND 3
!                = 3 THREE GROUPS WILL BE SIMULATED (SYSTEMS 2 THRU 4)
!    3   KAOPT   REAERATION FORMULATION OPTION
!                = 0 USE SPATIALLY CONSTANT KL  (KA = KL/DEPTH)
!                = 1 USE SPATIALLY VARIABLE KL
!                = 2 USE VELOCITY SHEAR AND OXYGEN DIFFUSIVITY
!                = 3 USE WIND SHEAR FORMULATION
!    4   KEOPT   EXTINCTION COEFFICIENT OPTION                        /M
!                = 0 KE IS A CONSTANT (SPATIALLY AND TEMPORALLY
!                    INVARIANT
!                = 1 KE IS A SPATIALLY VARIABLE BUT CONSTANT IN TIME
!                    (USING 2-D PARAMETER ARRAY)
!                = 2 KE IS SPATIALLY INVARIANT BUT VARIES IN TIME
!                    (USING TIME-VARIABLE FUNCTION)
!                = 3 KE IS SPATIALLY VARIABLE AND CAN VARY IN TIME,
!                    (USING 2-D PARAMETER ARRAY AND ONE TIME-VARIABLE
!                     FUNCTION)
!                = 4 KE IS SPATIALLY AND TEMPORALLY VARIABLE
!                    (REQUIRES SEPARATE INPUT FILE)
! 
!   IF <AGMOPT> = 0  THEN THE USER HAS CHOSEN TO USE THE STANDARD OR
!       TRADITIONAL EUTROPHICATION MODEL AND THE FOLLOWING CONSTANTS
!       (9 Thru 104) ARE SET ASIDE TO SPECIFY THE ALGAL COEFFICIENTS
!   Algal Group 1
!    9   TOPT1   OPTIMAL GROWTH TEMPERATURE FOR DIATOMS            DEG C
!   10   K1BETA1 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
!                RATE BELOW TOPT1
!   11   K1BETA2 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
!                RATE ABOVE TOPT1
!   12   K1C     SATURATED PHYTOPLANKTON GROWTH RATE                /DAY
!                (AT TEMPERATURE = TOPT1)
!   13   K1T     TEMPERATURE COEFFICIENT 
!   14   IS1     SATURATING ALGAL LIGHT INTENSITY                 LY/DAY
!   15   KMN1    HALF SATURATION CONSTANT FOR NITROGEN            MG N/L
!   16   KMP1    HALF SATURATION CONSTANT FOR PHOSPHOROUS         MG P/L
!   17   KMS1    HALF SATURATION CONSTANT FOR SILICA             MG SI/L
!   18   K1RB    BASAL/RESTING RESPIRATION RATE -or-                /DAY
!                ENDOGENOUS RESPIRATION RATE AT 20 DEG C            /DAY
!   19   K1RT    TEMPERATURE COEFFICIENT 
!   20   K1RG    GROWTH-RATE-DEPENDENT RESPIRATION COEFFICIENT 
!   21   K1GRZC  DEATH RATE DUE TO GRAZING                          /DAY
!   22   K1GRZT  TEMPERATURE COEFFICIENT 
!   23   CCHL1   CARBON TO CHLOROPHYLL RATIO                MG C/MG CHLA
!   24   CRBP11  CARBON TO PHOSPHORUS RATIO - NON-P LIMITED    MG C/MG P
!   25   CRBP12  CARBON TO PHOSPHORUS RATIO - P LIMITED        MG C/MG P
!   26   CRBP13  COEFFICIENT DETERMINING RANGE OF P LIMITATION    L/MG P
!   27   CRBN11  CARBON TO NITROGEN RATIO - NON-N LIMITED      MG C/MG N
!   28   CRBN12  CARBON TO NITROGEN RATIO - N LIMITED          MG C/MG N
!   29   CRBN13  COEFFICIENT DETERMINING RANGE OF N LIMITATION    L/MG N
!   30   CRBS11  CARBON TO SILICA RATIO - NON-SI LIMITED      MG C/MG SI
!   31   CRBS12  CARBON TO SILICA RATIO - SI LIMITED          MG C/MG SI
!   32   CRBS13  COEFFICIENT DETERMINING RANGE OF SI LIMITATION  L/MG SI
!   33   XKC1    CHLOROPHYLL SELF-SHADING EXTINCTION          M2/MG CHLA
!                COEFFICIENT FOR ALGAL GROUP 1
!   34   VSBAS1  BASE ALGAL SETTLING RATE - GROUP 1                M/DAY
!   35   VSNTR1  NUTRIENT STRESSED ALGAL SETTLING RATE - GROUP 1   M/DAY
!
!   Algal Group 2
!   41   TOPT2   OPTIMAL GROWTH TEMPERATURE FOR DIATOMS            DEG C
!   42   K2BETA1 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
!                RATE BELOW TOPT2
!   43   K2BETA2 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
!                RATE ABOVE TOPT2
!   44   K2C     SATURATED PHYTOPLANKTON GROWTH RATE                /DAY
!                (AT TEMPERATURE = TOPT2)
!   45   K2T     TEMPERATURE COEFFICIENT 
!   46   IS2     SATURATING ALGAL LIGHT INTENSITY                 LY/DAY
!   47   KMN2    HALF SATURATION CONSTANT FOR NITROGEN            MG N/L
!   48   KMP2    HALF SATURATION CONSTANT FOR PHOSPHOROUS         MG P/L
!   49   KMS2    HALF SATURATION CONSTANT FOR SILICA             MG SI/L
!   50   K2RB    BASAL/RESTING RESPIRATION RATE -or-                /DAY
!                ENDOGENOUS RESPIRATION RATE AT 20 DEG C            /DAY
!   51   K2RT    TEMPERATURE COEFFICIENT 
!   52   K2RG    GROWTH-RATE-DEPENDENT RESPIRATION COEFFICIENT 
!   53   K2GRZC  DEATH RATE DUE TO GRAZING                          /DAY
!   54   K2GRZT  TEMPERATURE COEFFICIENT 
!   55   CCHL2   CARBON TO CHLOROPHYLL RATIO                MG C/MG CHLA
!   56   CRBP21  CARBON TO PHOSPHORUS RATIO - NON-P LIMITED    MG C/MG P
!   57   CRBP22  CARBON TO PHOSPHORUS RATIO - P LIMITED        MG C/MG P
!   58   CRBP23  COEFFICIENT DETERMINING RANGE OF P LIMITATION    L/MG P
!   59   CRBN21  CARBON TO NITROGEN RATIO - NON-N LIMITED      MG C/MG N
!   60   CRBN22  CARBON TO NITROGEN RATIO - N LIMITED          MG C/MG N
!   61   CRBN23  COEFFICIENT DETERMINING RANGE OF N LIMITATION    L/MG N
!   62   CRBS21  CARBON TO SILICA RATIO - NON-SI LIMITED      MG C/MG SI
!   63   CRBS22  CARBON TO SILICA RATIO - SI LIMITED          MG C/MG SI
!   64   CRBS23  COEFFICIENT DETERMINING RANGE OF SI LIMITATION  L/MG SI
!   65   XKC2    CHLOROPHYLL SELF-SHADING EXTINCTION          M2/MG CHLA
!                COEFFICIENT FOR ALGAL GROUP 2
!   66   VSBAS2  BASE ALGAL SETTLING RATE - GROUP 2                M/DAY
!   67   VSNTR2  NUTRIENT STRESSED ALGAL SETTLING RATE - GROUP 2   M/DAY
!
!   Algal Group 3
!   73   TOPT3   OPTIMAL GROWTH TEMPERATURE FOR DIATOMS            DEG C
!   74   K3BETA1 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
!                RATE BELOW TOPT3
!   75   K3BETA2 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
!                RATE ABOVE TOPT3
!   76   K3C     SATURATED PHYTOPLANKTON GROWTH RATE                /DAY
!                (AT TEMPERATURE = TOPT3)
!   77   K3T     TEMPERATURE COEFFICIENT 
!   78   IS3     SATURATING ALGAL LIGHT INTENSITY                 LY/DAY
!   79   KMN3    HALF SATURATION CONSTANT FOR NITROGEN            MG N/L
!   80   KMP3    HALF SATURATION CONSTANT FOR PHOSPHOROUS         MG P/L
!   81   KMS3    HALF SATURATION CONSTANT FOR SILICA             MG SI/L
!   82   K3RB    BASAL/RESTING RESPIRATION RATE -or-                /DAY
!                ENDOGENOUS RESPIRATION RATE AT 20 DEG C            /DAY
!   83   K3RT    TEMPERATURE COEFFICIENT 
!   84   K3RG    GROWTH-RATE-DEPENDENT RESPIRATION COEFFICIENT 
!   85   K3GRZC  DEATH RATE DUE TO GRAZING                          /DAY
!   86   K3GRZT  TEMPERATURE COEFFICIENT 
!   87   CCHL3   CARBON TO CHLOROPHYLL RATIO                MG C/MG CHLA
!   88   CRBP31  CARBON TO PHOSPHORUS RATIO - NON-P LIMITED    MG C/MG P
!   89   CRBP32  CARBON TO PHOSPHORUS RATIO - P LIMITED        MG C/MG P
!   90   CRBP33  COEFFICIENT DETERMINING RANGE OF P LIMITATION    L/MG P
!   91   CRBN31  CARBON TO NITROGEN RATIO - NON-N LIMITED      MG C/MG N
!   92   CRBN32  CARBON TO NITROGEN RATIO - N LIMITED          MG C/MG N
!   93   CRBN33  COEFFICIENT DETERMINING RANGE OF N LIMITATION    L/MG N
!   94   CRBS31  CARBON TO SILICA RATIO - NON-SI LIMITED      MG C/MG SI
!   95   CRBS32  CARBON TO SILICA RATIO - SI LIMITED          MG C/MG SI
!   96   CRBS33  COEFFICIENT DETERMINING RANGE OF SI LIMITATION  L/MG SI
!   97   XKC3    CHLOROPHYLL SELF-SHADING EXTINCTION          M2/MG CHLA
!                COEFFICIENT FOR ALGAL GROUP 3
!   98   VSBAS3  BASE ALGAL SETTLING RATE - GROUP 3                M/DAY
!   99   VSNTR3  NUTRIENT STRESSED ALGAL SETTLING RATE - GROUP 3   M/DAY
!
!  105   KMPHYT  HALF SATURATION CONSTANT FOR PHYTOPLANKTON       MG C/L
!
!   IF <AGMOPT> = 1  THEN THE USER HAS CHOSEN TO USE THE LAWS/CHALUP
!       VERSION OF EUTROPHICATION MODEL AND THE FOLLOWING CONSTANTS
!       (9 Thru 104) ARE SET ASIDE TO SPECIFY THE ALGAL COEFFICIENTS
!   Algal Group 1
!   IF <AGMOPT> = 1  THEN THE FOLLOWING CONSTANTS (6 Thru 45) ARE USED
!       BY THE EUTROPHICATION MODEL AND MUST BE SPECIFIED BY THE USER
!    9   TOPT1   OPTIMAL GROWTH TEMPERATURE FOR DIATOMS            DEG C
!   10   K1BETA1 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
!                RATE BELOW TOPT1
!   11   K1BETA2 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
!                RATE ABOVE TOPT1
!   12   GPRE1   GROSS PHOTOSYNTHETIC RATE PER UNIT CELL            /DAY
!                (ASSOCIATED WITH PHOTOSYNTHETIC DARK REACTIONS)
!   13   GPR01   GROSS PHOTOSYNTHETIC RATE PER UNIT CELL   M2/MOL QUANTA
!                PER UNIT LIGHT INTENSITY UNDER NUTRIENT-SATURATED 
!                CONDITIONS AND ZERO IRRADIANCE
!   14   IS1     SATURATING ALGAL LIGHT INTENSITY                 LY/DAY
!   15   KMN1    HALF SATURATION CONSTANT FOR NITROGEN            MG N/L
!   16   KMP1    HALF SATURATION CONSTANT FOR PHOSPHOROUS         MG P/L
!   17   KMS1    HALF SATURATION CONSTANT FOR SILICA             MG SI/L
!   18   K1RB    BASAL OR RESTING RESPIRATION RATE                  /DAY 
!   19   K1RT    TEMPERATURE COEFFICIENT FOR BASAL/ENDOGENOUS
!                RESPIRATION 
!   20   K1RG    GROWTH-RATE-DEPENDENT RESPIRATION COEFFICIENT 
!   21   K1GRZC  DEATH RATE DUE TO GRAZING                          /DAY
!   22   K1GRZT  TEMPERATURE COEFFICIENT 
!   23   FSC1    FRACTION OF C ALLOCATED TO STRUCTURAL PURPOSES
!   24   WCCHL1  CARBON TO CHLOROPHYLL RATIO                MG C/MG CHLA
!   25   WCP1    CARBON TO PHOSPHORUS RATIO - NON-P LIMITED    MG C/MG P
!   26   WCN1    CARBON TO NITROGEN RATIO - NON-N LIMITED      MG C/MG N
!   27   WCS1    CARBON TO SILICA RATIO - NON-SI LIMITED      MG C/MG SI
!   28   QF1     QUOTIENT OF NUTRIENT-LIMITED NUTRIENT:C RATIOS
!                AT RELATIVE GROWTH RATES OF 0 AND 1
!   29   XKC1    CHLOROPHYLL SELF-SHADING EXTINCTION          M2/MG CHLA
!                COEFFICIENT FOR ALGAL GROUP 1
!   30   VSBAS1  BASE ALGAL SETTLING RATE - GROUP 1                M/DAY
!   31   VSNTR1  NUTRIENT STRESSED ALGAL SETTLING RATE - GROUP 1   M/DAY
!
!   Algal Group 2
!   41   TOPT2   OPTIMAL GROWTH TEMPERATURE FOR SUMMER GROUP       DEG C
!   42   K2BETA1 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
!                RATE BELOW TOPT2
!   43   K2BETA2 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
!                RATE ABOVE TOPT2
!   44   GPRE2   GROSS PHOTOSYNTHETIC RATE PER UNIT CELL            /DAY
!                (ASSOCIATED WITH PHOTOSYNTHETIC DARK REACTIONS)
!   45   GPR02   GROSS PHOTOSYNTHETIC RATE PER UNIT CELL   M2/MOL QUANTA
!                PER UNIT LIGHT INTENSITY UNDER NUTRIENT-SATURATED 
!                CONDITIONS AND ZERO IRRADIANCE
!   46   IS2     SATURATING ALGAL LIGHT INTENSITY                 LY/DAY
!   47   KMN2    HALF SATURATION CONSTANT FOR NITROGEN            MG N/L
!   48   KMP2    HALF SATURATION CONSTANT FOR PHOSPHOROUS         MG P/L
!   49   KMS2    HALF SATURATION CONSTANT FOR SILICA             MG SI/L
!   50   K2RB    BASAL OR RESTING RESPIRATION RATE                  /DAY 
!   51   K2RT    TEMPERATURE COEFFICIENT FOR BASAL/ENDOGENOUS
!                RESPIRATION 
!   52   K2RG    GROWTH-RATE-DEPENDENT RESPIRATION COEFFICIENT 
!   53   K2GRZC  DEATH RATE DUE TO GRAZING                          /DAY
!   54   K2GRZT  TEMPERATURE COEFFICIENT 
!   55   FSC2    FRACTION OF C ALLOCATED TO STRUCTURAL PURPOSES
!   55   WCCHL2  CARBON TO CHLOROPHYLL RATIO                MG C/MG CHLA
!   57   WCP2    CARBON TO PHOSPHORUS RATIO - NON-P LIMITED    MG C/MG P
!   58   WCN2    CARBON TO NITROGEN RATIO - NON-N LIMITED      MG C/MG N
!   59   WCS2    CARBON TO SILICA RATIO - NON-SI LIMITED      MG C/MG SI
!   60   QF2     QUOTIENT OF NUTRIENT-LIMITED NUTRIENT:C RATIOS
!                AT RELATIVE GROWTH RATES OF 0 AND 1
!   61   XKC2    CHLOROPHYLL SELF-SHADING EXTINCTION          M2/MG CHLA
!                COEFFICIENT FOR ALGAL GROUP 2
!   62   VSBAS2  BASE ALGAL SETTLING RATE - GROUP 2                M/DAY
!   63   VSNTR2  NUTRIENT STRESSED ALGAL SETTLING RATE - GROUP 2   M/DAY
!
!   Algal Group 3
!   73   TOPT3   OPTIMAL GROWTH TEMPERATURE FOR DIATOMS            DEG C
!   74   K3BETA1 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
!                RATE BELOW TOPT3
!   75   K3BETA2 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
!                RATE ABOVE TOPT3
!   76   GPRE3   GROSS PHOTOSYNTHETIC RATE PER UNIT CELL            /DAY
!                (ASSOCIATED WITH PHOTOSYNTHETIC DARK REACTIONS)
!   77   GPR03   GROSS PHOTOSYNTHETIC RATE PER UNIT CELL   M2/MOL QUANTA
!                PER UNIT LIGHT INTENSITY UNDER NUTRIENT-SATURATED 
!                CONDITIONS AND ZERO IRRADIANCE
!   78   IS3     SATURATING ALGAL LIGHT INTENSITY                 LY/DAY
!   79   KMN3    HALF SATURATION CONSTANT FOR NITROGEN            MG N/L
!   80   KMP3    HALF SATURATION CONSTANT FOR PHOSPHOROUS         MG P/L
!   81   KMS3    HALF SATURATION CONSTANT FOR SILICA             MG SI/L
!   82   K3RB    BASAL OR RESTING RESPIRATION RATE                  /DAY 
!   83   K3RT    TEMPERATURE COEFFICIENT FOR BASAL/ENDOGENOUS
!                RESPIRATION 
!   84   K3RG    GROWTH-RATE-DEPENDENT RESPIRATION COEFFICIENT 
!   85   K3GRZC  DEATH RATE DUE TO GRAZING                          /DAY
!   86   K3GRZT  TEMPERATURE COEFFICIENT 
!   87   FSC3    FRACTION OF C ALLOCATED TO STRUCTURAL PURPOSES
!   88   WCCHL3  CARBON TO CHLOROPHYLL RATIO                MG C/MG CHLA
!   89   WCP3    CARBON TO PHOSPHORUS RATIO - NON-P LIMITED    MG C/MG P
!   90   WCN3    CARBON TO NITROGEN RATIO - NON-N LIMITED      MG C/MG N
!   91   WCS3    CARBON TO SILICA RATIO - NON-SI LIMITED      MG C/MG SI
!   92   QF3     QUOTIENT OF NUTRIENT-LIMITED NUTRIENT:C RATIOS
!                AT RELATIVE GROWTH RATES OF 0 AND 1
!   93   XKC3    CHLOROPHYLL SELF-SHADING EXTINCTION          M2/MG CHLA
!                COEFFICIENT FOR ALGAL GROUP 3
!   94   VSBAS3  BASE ALGAL SETTLING RATE - GROUP 3                M/DAY
!   95   VSNTR3  NUTRIENT STRESSED ALGAL SETTLING RATE - GROUP 3   M/DAY
!
!  105   KMPHYT  HALF SATURATION CONSTANT FOR PHYTOPLANKTON       MG C/L
!
!                   RECYCLE FRACTIONS
!  106   FRPOP   REFRACTORY PARTICULATE ORGANIC PHOSPHOROUS 
!  107   FLPOP   LABILE PARTICULATE ORGANIC PHOSPHOROUS 
!  108   FRDOP   REFRACTORY DISSOLVED ORGANIC PHOSPHOROUS 
!  109   FLDOP   LABILE DISSOLVED ORGANIC PHOSPHOROUS 
!  110   FPO4    DISSOLVED INORGANIC PHOSPHOROUS 
!  111   FRPON   REFRACTORY PARTICULATE ORGANIC NITROGEN
!  112   FLPON   LABILE PARTICULATE ORGANIC NITROGEN
!  113   FRDON   REFRACTORY DISSOLVED ORGANIC NITROGEN
!  114   FLDON   LABILE DISSOLVED ORGANIC NITROGEN
!  115   FNH4    AMMONIA 
!  116   FRPOC   REFRACTORY PARTICULATE ORGANIC CARBON
!  117   FLPOC   LABILE PARTICULATE ORGANIC CARBON
!  118   FRDOC   REFRACTORY DISSOLVED ORGANIC CARBON
!  119   FLDOC   LABILE DISSOLVED ORGANIC CARBON
! 
!            PHOSPHORUS HYDROLYSIS/MINERALIZATION RATES AT 20 DEG C 
!  120   K57C    HYDROLYSIS RATE OF RPOP TO RDOP                    /DAY
!  121   K57T    TEMPERATURE COEFFICIENT 
!  122   K68C    HYDROLYSIS RATE OF LPOP TO LDOP                    /DAY
!  123   K68T    TEMPERATURE COEFFICIENT 
!  124   K79C    MINERALIZATION RATE OF RDOP TO PO4                 /DAY
!  125   K79T    TEMPERATURE COEFFICIENT 
!  126   K89C    MINERALIZATION RATE OF LDOP TO PO4                 /DAY
!  127   K89T    TEMPERATURE COEFFICIENT 
!
!             NITROGEN HYDROLYSIS/MINERALIZATION RATES AT 20 DEG C 
!  128   K1012C  HYDROLYSIS RATE OF RPON TO RDON                    /DAY
!  129   K1012T  TEMPERATURE COEFFICIENT 
!  130   K1113C  HYDROLYSIS RATE OF LPON TO LDON                    /DAY
!  131   K1113T  TEMPERATURE COEFFICIENT 
!  132   K1214C  MINERALIZATION RATE of RDON TO NH4                 /DAY
!  133   K1214T  TEMPERATURE COEFFICIENT 
!  134   K1314C  MINERALIZATION RATE OF LDON TO NH4                 /DAY
!  135   K1314T  TEMPERATURE COEFFICIENT 
!                  NITRIFICATION/DENITIFICATION RATES
!  136   K1415C  NITRIFICATION RATE AT 20 DEG C                     /DAY
!  137   K1415T  TEMPERATURE COEFFICIENT 
!  138   KNIT    HALF SATURATION CONSTANT FOR NITRIF-            MG O2/L
!                ICATION OXYGEN LIMITATION 
!  139   K150C   DENITRIFICATION RATE AT 20 DEG C                   /DAY
!  140   K150T   TEMPERATURE COEFFICIENT 
!  141   KNO3    MICHAELIS CONSTANT FOR DENITRIFICATION          MG O2/L
!                OXYGEN LIMITATION 
! 
!                   SILICA MINERALIZATION RATES AT 20 DEG C 
!  142   K1617C  MINERALIZATION RATE OF BIOGENIC SI TO AVAIL SI     /DAY
!  143   K1617T  TEMPERATURE COEFFICIENT 
!
!                   CARBON HYDROLYSIS/OXIDATION RATES AT 20 DEG C 
!  144   K1820C  HYDROLYSIS RATE OF RPOC TO RDOC                    /DAY
!  145   K1820T  TEMPERATURE COEFFICIENT 
!  146   K1921C  HYDROLYSIS RATE OF LPOC TO LDOC                    /DAY
!  147   K1921T  TEMPERATURE COEFFICIENT 
!  148   K200C   OXIDATION RATE OF RDOC                             /DAY
!  149   K200T   TEMPERATURE COEFFICIENT 
!  150   K210C   OXIDATION RATE OF LDOC                             /DAY
!  151   K210T   TEMPERATURE COEFFICIENT 
!  152   KMLDOC  MICHAELIS CONSTANT FOR LDOC                      MG C/L
!  153   KDOC    HALF SATURATION CONSTANT FOR ORG CARBON         MG O2/L
!  154   K220C   ALGAL EXUDATE DOC OXIDATION RATE                   /DAY
!  155   K220T   TEMPERATURE COEFFICIENT
!  156   FLOCEX  FRACTION OF PRIMARY PRODUCTIVITY GOING TO
!                LABILE ORGANIC CARBON VIA EXUDATION
!
!                REPOC/REDOC ARE ASSOCIATED WITH SANITARY/CSO SOLIDS
!  157   K2324C  HYDROLYSIS RATE OF REPOC TO REDOC                  /DAY
!  158   K2324T  TEMPERATURE COEFFICIENT
!  159   K240C   REACTIVE DOC OXIDATION RATE                        /DAY
!  160   K240T   TEMPERATURE COEFFICIENT
!  161   CTOPCSO CARBON TO PHOSPHORUS RATIO OF CSO SOLIDS
!  162   CTONCSO CARBON TO NITROGEN RATIO OF CSO SOLIDS
!
!  163   K250C   OXIDATION RATE FOR AQUEOUS SOD                     /DAY
!  164   K250T   TEMPERATURE COEFFICIENT
!  165   KO2EQ   HALF SATURATION CONSTANT FOR O2*                MG O2/L
! 
!  166   KLMIN   IF <KAOPT> = 0, THEN KLMIN = KL                   M/DAY
!                IF <KAOPT> > 0, THEN KLMIN = MINIMUM VALUE FOR KL
!  167   DIFUS   DIFFUSIVITY OF OXYGEN ACROSS THE AIR-WATER      M^2/DAY
!                INTERFACE
!  168   KAT     TEMPERATURE CORRECTION COEFFICIENT FOR ATMOSPHERIC
!                  REAERATION
!
!  169   VSBAST  TEMPERATURE CORRECTION
!  170   VSPOM   PARTICULATE ORGANIC MATTER SETTLING RATE          M/DAY
!  171   VSPMT   TEMPERATURE CORRECTION
!  172   VSSEDT  TEMPERATURE CORRECTION FOR DEPOSITION TO SEDIMENT
!  173   BVCSO   POWER COEFF. FOR CSO SOLID SETTLING RATE (>=1) UNITLESS
!  174   CRCSO   CRITICAL REPOC CONC. FOR CSO SETTLING FUNCTION   MG C/L
!  175   VMINCSO MINIMUM SETTLING RATE FOR CSO SOLIDS              M/DAY
!                Vcso = VMINCSO+(VMAXCSO-VMINCSO)*(REPOC/CRCSO)**BVCSO)
!  176   VMAXCSO MAXIMUM SETTLING RATE FOR CSO SOLIDS              M/DAY
!  177   KADPO4  PARTITION COEFFICIENT FOR SORBED PHOSPHORUS     L/MG SS
!  178   KADSI   PARTITION COEFFICIENT FOR SORBED SILICA         L/MG SS
!  179   VSPIM   SETTLING RATE FOR PHOSPHOURS/SILICA SORBED TO     M/DAY
!                SUSPENDED SOLIDS
!  180   KECONST BASE (CHL-A CORRECTED) EXTINCTION COEFFICIENT        /M
!                (USED WHEN KEOPT=0,2)
! 
!***********************************************************************
! 
!     2-D PARAMETERS
!     --------------
!                       NAMES AND DESCRIPTIONS OF PARAMETERS
! 
!       NO  NAME           DESCRIPTION                             UNITS
! 
!        1 KL      TRANSFER COEFFICIENT FOR REAERATION             M/DAY
!        2 VSNET1  SETTLING EFFICIENCY FROM WATER COLUMN                  
!                  TO THE BED FOR ALGAL GROUP NO. 1
!        3 VSNET2  SETTLING EFFICIENCY FROM WATER COLUMN                  
!                  TO THE BED FOR ALGAL GROUP NO. 2
!        4 VSNET3  SETTLING EFFICIENCY FROM WATER COLUMN                  
!                  TO THE BED FOR ALGAL GROUP NO. 3
!        5 VSNET4  SETTLING EFFICIENCY FROM WATER COLUMN                  
!                  TO THE BED FOR NON-LIVING POM
!        6 KEBS    BASE (CHL-A CORRECTED) EXTINCTION COEFFICIENT      /M
!                  (USED WHEN KEOPT=1,3)
! 
! 
!***********************************************************************
! 
!     3-D PARAMETERS
!     --------------
!                       NAMES AND DESCRIPTIONS OF PARAMETERS
!  
!       NO  NAME           DESCRIPTION                             UNITS
! 
!        1 SSLDS   CONCENTRATION OF SUSPENDED SOLIDS             MG SS/L
!
!
!***********************************************************************
! 
!     TIME-VARIABLE FUNCTIONS 
!     ----------------------- 
!        1  ITOTSF  TOTAL DAILY SOLAR RADIATION                   LY/DAY
!        2  F       FRACTION OF DAYLIGHT                             DAY
!        3  WIND    WIND SPEED                                     M/SEC
!        4  KETVF   EXTINCTION COEFFICIENT (USED FOR KEOPT=2,3)       /M
! 
!***********************************************************************
!  
!     THE SEDIMENT SUBROUTINE RETURNS FLUXES BACK....
!      SODS                               [GM O2*/M2-DAY]
!      JHS                                [GM O2*/M2-DAY]
!      JCH4AQ                             [GM O2*/M2-DAY]
!      JCH4G                              [GM O2*/M2-DAY]
!      JNH4                               [MG N/M2-DAY]
!      JPO4                               [MG P/M2-DAY]
!      JNO3                               [MG N/M2-DAY]
!      JSI                                [MG SI/M2-DAY]
!
! 
!***********************************************************************
      USE ALLOCEUTRO
      USE ALL_VARS
      USE MOD_RCA
!      USE FLUXES   !Tian
#  if defined (MULTIPROCESSOR)
      USE MOD_PAR,ONLY : NMAP,PWRITE,NHN,NGID,HN_LST,GATHER   !,PAR    !,MSR
#  endif      
      IMPLICIT NONE
      SAVE

!      INCLUDE 'RCACM'

      INTEGER,PARAMETER :: NGDMP=28
      CHARACTER(LEN=8)  :: GDNAMES(NGDMP),DDNAMES(5,NOSYS)

!        STATE-VARIABLES
      REAL, ALLOCATABLE, DIMENSION(:,:) ::       &
         SAL     ,PHYT1   ,PHYT2   ,PHYT3    
!JQI     .   SAL     ,PHYT1   ,PHYT2   ,PHYT3   ,RPOP 
!JQI     .  ,LPOP    ,RDOP    ,LDOP    ,PO4T   
!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) ::
!JQI     .   CDSAL   ,CDPHYT1 ,CDPHYT2 ,CDPHYT3 ,CDRPOP  
!JQI     .  ,CDLPOP  ,CDRDOP  ,CDLDOP  ,CDPO4T

      REAL, ALLOCATABLE, DIMENSION(:,:) ::      &
          NO23
!JQI     .   RPON   ,LPON   ,RDON   ,LDON   
!JQI     .  ,NH4T   ,NO23   ,BSI    ,SIT
!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) ::
!JQI     .   CDRPON ,CDLPON ,CDRDON ,CDLDON
!JQI     .  ,CDNH4T ,CDNO23 ,CDBSI  ,CDSIT

      REAL, ALLOCATABLE, DIMENSION(:,:) ::      &
          O2EQ   
!JQI     .   RPOC   ,LPOC   ,RDOC   ,LDOC   ,EXDOC  
!JQI     .  ,REPOC  ,REDOC  ,O2EQ   ,DO   
!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) ::
!JQI     .   CDRPOC ,CDLPOC ,CDRDOC ,CDLDOC ,CDEXDOC
!JQI     .  ,CDREPOC,CDREDOC,CDO2EQ ,CDDO

      REAL :: KLVEL,KAOPT


!JQI      REAL ::
!JQI     .     XKC,KMPHYT,K57C,K57T,K68C,K68T,K710C,K710T,K89C,K89T
!JQI     .    ,K1012C,K1012T,K1113C,K1113T,K1214C,K1214T,K1314C,K1314T
!JQI     .    ,K1415C,K1415T,KNIT,K150C,K150T,KNO3,K1617C,K1617T
!JQI     .    ,K1820C,K1820T,K1921C,K1921T,K200C,K200T,K210C,K210T
!JQI     .    ,KMLDOC,KDOC,K220C,K220T,K2324C,K2324T,K240C,K240T,K250C,K250T
!JQI     .    ,KO2EQ,KAT,KLMIN,K2CX,K2CNL,K2CNNL,KK2C
!JQI     .    ,KEOPT,KECONST,KETVF,KADPO4,KADSI
      REAL :: EXPVALS(2000)
!JQI      REAL, ALLOCATABLE, DIMENSION(:) ::
!JQI     .    KEBS,KL,VSNET1,VSNET2,VSNET3,VSNET4
      REAL, DIMENSION(MT) :: KA20,CS
!JQI      REAL, DIMENSION(3) :: 
!JQI     .    CRBP1,CRBN1,CRBS1,CRBP2,CRBN2,CRBS2,CRBP3,CRBN3,CRBS3
      REAL, DIMENSION(0:MT,NZ) ::                            &  
          DOAVEG,DOMING,DOMAXG,BOTBOD,BOTBODHS,XEMPRC
      REAL, ALLOCATABLE, DIMENSION(:,:) ::                 &
          TPOP,TDOP,TPON,TDON,TPOC,TDOC,TPSI,TRESP,TGPP,TNPP
!JQI     .   SSLDS,TPOP,TDOP,TPON,TDON,TPOC,TDOC,TPSI,TRESP,TGPP,TNPP
      REAL, DIMENSION(450) ::                                        &
          K57CT   ,K68CT   ,K710CT  ,K89CT   ,K1012CT ,K1113CT       &
         ,K1214CT ,K1314CT ,K1415CT ,K150CT  ,K1617CT ,K1820CT       &
         ,K1921CT ,K200CT  ,K210CT  ,K220CT  ,K2324CT ,K240CT        &
         ,K250CT  ,KACT    ,VSPMTS

      INTEGER(2) :: SYSGDP(40)

!        LINKAGE FOR MASS BALANCE COMPUTATIONS -AND-
!                EUTROPHICATION ALGAL GROWTH ROUTINES
      REAL, ALLOCATABLE, DIMENSION(:,:) :: DPO4,DNH4,DSI
!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) :: DPO4,DNH4,DSI

!        REAL AND LABELED COMMON FOR LINKING WATER COLUMN AND
!             SEDIMENT SUBMODELS
!JQI      REAL, ALLOCATABLE, DIMENSION(:) :: 
!JQI     .   SODS,JHS,JNH4,JPO4,JNO3,JSI,JCH4AQ,JCH4G
     
!JQI      REAL DEPFLUX,CFLUXS
!JQI      COMMON /FLUXES/
!JQI     .    DEPFLUX(NXY,13),CFLUXS(NXY,8)

!        LABELED COMMON FOR SEGMENT KES
      INTEGER IKE,NKE
      REAL TKE(366)
      COMMON /WCKE/ IKE,NKE,TKE

!JQI      REAL :: 
!JQI     .   AGMOPT,ACTALG,OPTION5,OPTION6
!JQI     .  ,FRPOP,FLPOP,FRDOP,FLDOP,FPO4,FRPON,FLPON,FRDON,FLDON,FNH4
!JQI     .  ,FRPOC,FLPOC,FRDOC,FLDOC,FLOCEX
!JQI     .  ,CTOPCSO,CTONCSO,DIFUS,VSBAST
!JQI     .  ,VSPOM,VSPMT,VSSEDT,BVCSO,CRCSO,VMINCSO,VMAXCSO
!JQI     .  ,VSPIM,CRBP11,CRBP12,CRBP13,CRBN11,CRBN12,CRBN13
!JQI     .  ,CRBS11,CRBS12,CRBS13,CRBP21,CRBP22,CRBP23,CRBN21,CRBN22,CRBN23
!JQI     .  ,CRBS21,CRBS22,CRBS23,CRBP31,CRBP32,CRBP33,CRBN31,CRBN32,CRBN33
!JQI     .  ,CRBS31,CRBS32,CRBS33


!JQI      REAL, ALLOCATABLE :: VARRAY(:,:,:)
!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) ::
!JQI     .   SAL_DDA   ,SAL_DMIN  ,SAL_DMAX
!JQI     .  ,PHYT1_DDA ,PHYT2_DDA ,PHYT3_DDA
!JQI     .  ,CCHL1_DDA ,CCHL2_DDA ,CCHL3_DDA
!JQI     .  ,CHLA1_DDA ,CHLA2_DDA ,CHLA3_DDA
!JQI      REAL, DIMENSION(MT,NZ) ::
!JQI     .   RNUTR1_DDA ,GPDP1_DDA
!JQI     .  ,RNUTR2_DDA ,GPDP2_DDA
!JQI     .  ,RNUTR3_DDA ,GPDP3_DDA

      INTEGER ISTAT,I,ITEMP,IDMP
      INTEGER NPHYT,IAVGPPCNTR
      REAL SUMP,SUMN,SUMC,OCRB,QXAVE,QYAVE,QVECT1,QVECT2,TEMP        &
          ,TLDOC,POP,DOP,PON,DON,POC,DOC,TP,TN,SARD,TERM             &
          ,SK57,SK68,SK710,SK89,SK8P,SK1012,SK1113,SK1214,SK1314     &
          ,SK13P,SK1617,SK17P,SK1820,SK1921,SK26P,SR13P,SR22P        &
          ,SR26PA,SR26PB,TSI,TPP,TDP,TDN,TPN,TON,TOC,DIN,EZPRNT      &
          ,VAL1,VAL2,TTPOC,TTDOC,DUMMY,DEPTH,ALG1FLX,ALG2FLX         &
          ,ALG3FLX,ALGPFLX,ALGNFLX,ALGSFLX,FLUX,PFLUX,SFLUX          &
          ,TCORR,VSSED,SA,APPGR

      REAL,ALLOCATABLE :: KEBASE_TMP(:),FSM_TMP(:)
      REAL,ALLOCATABLE :: TEMP1(:,:),TEMP2(:,:),CARAY_TMP(:,:,:)

!JQI      ALLOCATE(SAL(MT,NZ))       ;ALLOCATE(CDSAL(MT,NZ))
!JQI      ALLOCATE(PHYT1(MT,NZ))     ;ALLOCATE(CDPHYT1(MT,NZ))
!JQI      ALLOCATE(PHYT2(MT,NZ))     ;ALLOCATE(CDPHYT2(MT,NZ))
!JQI      ALLOCATE(PHYT3(MT,NZ))     ;ALLOCATE(CDPHYT3(MT,NZ))
!JQI      ALLOCATE(RPOP(MT,NZ))      ;ALLOCATE(CDRPOP(MT,NZ))
!JQI      ALLOCATE(LPOP(MT,NZ))      ;ALLOCATE(CDLPOP(MT,NZ))
!JQI      ALLOCATE(RDOP(MT,NZ))      ;ALLOCATE(CDRDOP(MT,NZ))
!JQI      ALLOCATE(LDOP(MT,NZ))      ;ALLOCATE(CDLDOP(MT,NZ))
!JQI      ALLOCATE(PO4T(MT,NZ))      ;ALLOCATE(CDPO4T(MT,NZ))
      
!JQI      ALLOCATE(RPON(NXY,NZ))     ;ALLOCATE(CDRPON(NXY,NZ))
!JQI      ALLOCATE(LPON(NXY,NZ))     ;ALLOCATE(CDLPON(NXY,NZ))
!JQI      ALLOCATE(RDON(NXY,NZ))     ;ALLOCATE(CDRDON(NXY,NZ))
!JQI      ALLOCATE(LDON(NXY,NZ))     ;ALLOCATE(CDLDON(NXY,NZ))
!JQI      ALLOCATE(NH4T(NXY,NZ))     ;ALLOCATE(CDNH4T(NXY,NZ))
!JQI      ALLOCATE(NO23(NXY,NZ))     ;ALLOCATE(CDNO23(NXY,NZ))
!JQI      ALLOCATE(BSI(NXY,NZ))      ;ALLOCATE(CDBSI(NXY,NZ))
!JQI      ALLOCATE(SIT(NXY,NZ))      ;ALLOCATE(CDSIT(NXY,NZ))

!JQI      ALLOCATE(RPOC(NXY,NZ))     ;ALLOCATE(CDRPOC(NXY,NZ))
!JQI      ALLOCATE(LPOC(NXY,NZ))     ;ALLOCATE(CDLPOC(NXY,NZ))
!JQI      ALLOCATE(RDOC(NXY,NZ))     ;ALLOCATE(CDRDOC(NXY,NZ))
!JQI      ALLOCATE(LDOC(NXY,NZ))     ;ALLOCATE(CDLDOC(NXY,NZ))
!JQI      ALLOCATE(EXDOC(NXY,NZ))    ;ALLOCATE( CDEXDOC(NXY,NZ))
!JQI      ALLOCATE(REPOC(NXY,NZ))    ;ALLOCATE( CDREPOC(NXY,NZ))
!JQI      ALLOCATE(REDOC(NXY,NZ))    ;ALLOCATE( CDREDOC(NXY,NZ))
!JQI      ALLOCATE(O2EQ(NXY,NZ))     ;ALLOCATE( CDO2EQ(NXY,NZ))
!JQI      ALLOCATE(DO(NXY,NZ))       ;ALLOCATE(CDDO(NXY,NZ))

!JQI      CDSAL(:,:)   = CDARAY(:,:,1)
!JQI      PHYT1(:,:) = CARAY(:,:,2)  ;CDPHYT1(:,:) = CDARAY(:,:,2)
!JQI      PHYT2(:,:) = CARAY(:,:,3)  ;CDPHYT2(:,:) = CDARAY(:,:,3)
!JQI      PHYT3(:,:) = CARAY(:,:,4)  ;CDPHYT3(:,:) = CDARAY(:,:,4)
!JQI      RPOP(:,:)  = CARAY(:,:,5)  ;CDRPOP(:,:)  = CDARAY(:,:,5)
!JQI      LPOP(:,:)  = CARAY(:,:,6)  ;CDLPOP(:,:)  = CDARAY(:,:,6)
!JQI      RDOP(:,:)  = CARAY(:,:,7)  ;CDRDOP(:,:)  = CDARAY(:,:,7)
!JQI      LDOP(:,:)  = CARAY(:,:,8)  ;CDLDOP(:,:)  = CDARAY(:,:,8)
!JQI      PO4T(:,:)  = CARAY(:,:,9)  ;CDPO4T(:,:)  = CDARAY(:,:,9)
     
!JQI      RPON(:,:) = CARAY(:,:,10)  ;CDRPON(:,:) = CDARAY(:,:,10) 
!JQI      LPON(:,:) = CARAY(:,:,11)  ;CDLPON(:,:) = CDARAY(:,:,11)
!JQI      RDON(:,:) = CARAY(:,:,12)  ;CDRDON(:,:) = CDARAY(:,:,12)
!JQI      LDON(:,:) = CARAY(:,:,13)  ;CDLDON(:,:) = CDARAY(:,:,13)
!JQI      NH4T(:,:) = CARAY(:,:,14)  ;CDNH4T(:,:) = CDARAY(:,:,14)
!JQI      NO23(:,:) = CARAY(:,:,15)  ;CDNO23(:,:) = CDARAY(:,:,15)
!JQI      BSI(:,:)  = CARAY(:,:,16)  ;CDBSI(:,:)  = CDARAY(:,:,16) 
!JQI      SIT(:,:)  = CARAY(:,:,17)  ;CDSIT(:,:)  = CDARAY(:,:,17)

!JQI      RPOC(:,:)  = CARAY(:,:,18)  ;CDRPOC(:,:)  = CDARAY(:,:,18)
!JQI      LPOC(:,:)  = CARAY(:,:,19)  ;CDLPOC(:,:)  = CDARAY(:,:,19)
!JQI      RDOC(:,:)  = CARAY(:,:,20)  ;CDRDOC(:,:)  = CDARAY(:,:,20)
!JQI      LDOC(:,:)  = CARAY(:,:,21)  ;CDLDOC(:,:)  = CDARAY(:,:,21)
!JQI      EXDOC(:,:) = CARAY(:,:,22)  ;CDEXDOC(:,:) = CDARAY(:,:,22)
!JQI      REPOC(:,:) = CARAY(:,:,23)  ;CDREPOC(:,:) = CDARAY(:,:,23)
!JQI      REDOC(:,:) = CARAY(:,:,24)  ;CDREDOC(:,:) = CDARAY(:,:,24)
!JQI      O2EQ(:,:)  = CARAY(:,:,25)  ;CDO2EQ(:,:)  = CDARAY(:,:,25) 
!JQI      DO(:,:)    = CARAY(:,:,26)  ;CDDO(:,:)    = CDARAY(:,:,26)   

!JQI      ALLOCATE(KEBS(MT))      ;ALLOCATE(KL(MT))
!JQI      ALLOCATE(VSNET1(MT))    ;ALLOCATE(VSNET2(MT))
!JQI      ALLOCATE(VSNET3(MT))    ;ALLOCATE(VSNET4(MT))
!JQI      KL(:)     = PARAM2D(:,1) ;VSNET1(:) = PARAM2D(:,2)
!JQI      VSNET2(:) = PARAM2D(:,3) ;VSNET3(:) = PARAM2D(:,4)
!JQI      VSNET4(:) = PARAM2D(:,5) ;KEBS(:)   = PARAM2D(:,6)

!JQI      ALLOCATE(VARRAY(MT,NZ,25))
!JQI      VARRAY = SCRATCH_KIN


!JQI      ALLOCATE(SSLDS(MT,NZ))
!JQI      ALLOCATE(TPOP(MT,NZ))
!JQI      ALLOCATE(TDOP(MT,NZ))
!JQI      ALLOCATE(TPON(MT,NZ))
!JQI      ALLOCATE(TDON(MT,NZ))
!JQI      ALLOCATE(TPOC(MT,NZ))
!JQI      ALLOCATE(TDOC(MT,NZ))
!JQI      ALLOCATE(TPSI(MT,NZ))
!JQI      ALLOCATE(TRESP(MT,NZ))
!JQI      ALLOCATE(TGPP(MT,NZ))
!JQI      ALLOCATE(TNPP(MT,NZ))
!JQI      SSLDS(:,:) = PARAM3D(:,:,1)
!JQI      TPOP(:,:) = VARRAY(:,:,1)   ;TDOP(:,:)  = VARRAY(:,:,1)
!JQI      TPON(:,:) = VARRAY(:,:,1)   ;TDON(:,:)  = VARRAY(:,:,1)
!JQI      TPOC(:,:) = VARRAY(:,:,1)   ;TDOC(:,:)  = VARRAY(:,:,1)
 !JQI     TPSI(:,:) = VARRAY(:,:,1)   ;TRESP(:,:) = VARRAY(:,:,1)
!JQI      TGPP(:,:) = VARRAY(:,:,1)   ;TNPP(:,:)  = VARRAY(:,:,1)

!JQI      ALLOCATE(DPO4(MT,NZ))
!JQI      ALLOCATE(DNH4(MT,NZ))
!JQI      ALLOCATE(DSI(MT,NZ))
!JQI      DPO4(:,:) = CKINARRAY(:,:,1)
!JQI      DNH4(:,:) = CKINARRAY(:,:,2)
!JQI      DSI(:,:)  = CKINARRAY(:,:,3)

!JQI      ALLOCATE(SODS(MT))   ; ALLOCATE(JHS(MT))
!JQI      ALLOCATE(JCH4AQ(MT)) ; ALLOCATE(JCH4G(MT))
!JQI      ALLOCATE(JNH4(MT))   ; ALLOCATE(JNO3(MT))
!JQI      ALLOCATE(JPO4(MT))   ; ALLOCATE(JSI(MT))
!JQI      SODS(:)   = CFLUXS(:,1)   ;JHS(:)   = CFLUXS(:,2)
!JQI      JCH4AQ(:) = CFLUXS(:,3)   ;JCH4G(:) = CFLUXS(:,4)
!JQI      JNH4(:)   = CFLUXS(:,5)   ;JNO3(:)  = CFLUXS(:,6)
!JQI      JPO4(:)   = CFLUXS(:,7)   ;JSI(:)   = CFLUXS(:,8)

!JQI      AGMOPT = CONST(1)  ;ACTALG  = CONST(2)  ;KAOPT   = CONST(3) 
!JQI      KEOPT  = CONST(4)  ;OPTION5 = CONST(5)  ;OPTION6 = CONST(6)

!JQI      KMPHYT = CONST(105) 
!JQI      FRPOP  = CONST(106) ;FLPOP = CONST(107) ;FRDOP = CONST(108)
!JQI      FLDOP  = CONST(109) ;FPO4  = CONST(110) ;
!JQI      FRPON  = CONST(111) ;FLPON = CONST(112) ;FRDON = CONST(113)
!JQI      FLDON  = CONST(114) ;FNH4  = CONST(115) ;
!JQI      FRPOC  = CONST(116) ;FLPOC = CONST(117) ;FRDOC = CONST(118)
!JQI      FLDOC  = CONST(119) ;K57C  = CONST(120) ;K57T  = CONST(121)
!JQI      K68C   = CONST(122) ;K68T  = CONST(123) ;K710C = CONST(124) 
!JQI      K710T  = CONST(125) ;K89C  = CONST(126) ;K89T  = CONST(127)

!JQI      K1012C = CONST(128) ;K1012T = CONST(129) ;K1113C = CONST(130)
!JQI      K1113T = CONST(131) ;K1214C = CONST(132) ;K1214T = CONST(133)
!JQI      K1314C = CONST(134) ;K1314T = CONST(135) ;K1415C = CONST(136)
!JQI      K1415T = CONST(137) ;KNIT   = CONST(138) ;K150C  = CONST(139)
!JQI      K150T  = CONST(140) ;KNO3   = CONST(141) ;K1617C = CONST(142)
!JQI      K1617T = CONST(143) ;K1820C = CONST(144) ;K1820T = CONST(145)
!JQI      K1921C = CONST(146) ;K1921T = CONST(147) ;K200C  = CONST(148)
!JQI      K200T  = CONST(149) ;K210C  = CONST(150) ;K210T  = CONST(151)

!JQI      KMLDOC  = CONST(152);KDOC    = CONST(153);K220C   = CONST(154)
!JQI      K220T   = CONST(155);FLOCEX  = CONST(156);K2324C  = CONST(157)
!JQI      K2324T  = CONST(158);K240C   = CONST(159);K240T   = CONST(160)
!JQI      CTOPCSO = CONST(161);CTONCSO = CONST(162);K250C   = CONST(163)
!JQI      K250T   = CONST(164);KO2EQ   = CONST(165);KLMIN   = CONST(166)
!JQI      DIFUS   = CONST(167);KAT     = CONST(168);VSBAST  = CONST(169)
!JQI      VSPOM   = CONST(170);VSPMT   = CONST(171);VSSEDT  = CONST(172)
!JQI      BVCSO   = CONST(173);CRCSO   = CONST(174);VMINCSO = CONST(175)
!JQI      VMAXCSO = CONST(176);KADPO4  = CONST(177);KADSI   = CONST(178)
!JQI      VSPIM   = CONST(179);KECONST = CONST(180)

!JQI      CRBP11 = CRBP1(1) ;CRBP12 = CRBP1(2) ;CRBP13 = CRBP1(3)
!JQI      CRBN11 = CRBN1(1) ;CRBN12 = CRBN1(2) ;CRBN13 = CRBN1(3)
!JQI      CRBS11 = CRBS1(1) ;CRBS12 = CRBS1(2) ;CRBS13 = CRBS1(3)
!JQI      CRBP21 = CRBP2(1) ;CRBP22 = CRBP2(2) ;CRBP23 = CRBP2(3)
!JQI      CRBN21 = CRBN2(1) ;CRBN22 = CRBN2(2) ;CRBN23 = CRBN2(3)
!JQI      CRBS21 = CRBS2(1) ;CRBS22 = CRBS2(2) ;CRBS23 = CRBS2(3)
!JQI      CRBP31 = CRBP3(1) ;CRBP32 = CRBP3(2) ;CRBP33 = CRBP3(3)
!JQI      CRBN31 = CRBN3(1) ;CRBN32 = CRBN3(2) ;CRBN33 = CRBN3(3)
!JQI      CRBS31 = CRBS3(1) ;CRBS32 = CRBS3(2) ;CRBS33 = CRBS3(3)

!JQI      ALLOCATE(SAL_DDA(MT,NZ))
!JQI      ALLOCATE(PHYT1_DDA(MT,NZ))
!JQI      ALLOCATE(PHYT2_DDA(MT,NZ))
!JQI      ALLOCATE(PHYT3_DDA(MT,NZ))
!JQI      ALLOCATE(CHLA1_DDA(MT,NZ))
!JQI      ALLOCATE(CHLA2_DDA(MT,NZ))
!JQI      ALLOCATE(CHLA3_DDA(MT,NZ))
!JQI      ALLOCATE(CCHL1_DDA(MT,NZ))
!JQI      ALLOCATE(CCHL2_DDA(MT,NZ))
!JQI      ALLOCATE(CCHL3_DDA(MT,NZ))
!JQI      ALLOCATE(SAL_DMIN(MT,NZ))
!JQI      ALLOCATE(SAL_DMAX(MT,NZ))

!JQI      SAL_DDA(:,:)   = VARRAY(:,:,2)
!JQI      PHYT1_DDA(:,:) = VARRAY(:,:,3)
!JQI      PHYT2_DDA(:,:) = VARRAY(:,:,4)
!JQI      PHYT3_DDA(:,:) = VARRAY(:,:,5)
!JQI      CHLA1_DDA(:,:) = VARRAY(:,:,6)
!JQI      CHLA2_DDA(:,:) = VARRAY(:,:,7)
!JQI      CHLA3_DDA(:,:) = VARRAY(:,:,8)
!JQI      CCHL1_DDA(:,:) = VARRAY(:,:,9)
!JQI      CCHL2_DDA(:,:) = VARRAY(:,:,10)
!JQI      CCHL3_DDA(:,:) = VARRAY(:,:,11)
!JQI      SAL_DMIN(:,:)  = VARRAY(:,:,12)
!JQI      SAL_DMAX(:,:)  = VARRAY(:,:,13)

!=======================================================================



!     PROVIDE INITIALIZATION, IF FIRST TIME THROUGH -FABLE-
      IF(INITB >= 1) GO TO 50 
      NOKINSYS=3
!JQI      NPHYT = ACTALG+0.5
      NPHYT = CONST(2)+0.5

!     CHECK THAT RECYCLE FRACTIONS ADD UP TO "1"
!JQI      SUMP = FRPOP+FLPOP+FRDOP+FLDOP+FPO4
      SUMP = CONST(106)+CONST(107)+CONST(108)+CONST(109)+CONST(110)
!JQI      SUMN = FRPON+FLPON+FRDON+FLDON+FNH4
      SUMN = CONST(111)+CONST(112)+CONST(113)+CONST(114)+CONST(115)
!JQI      SUMC = FRPOC+FLPOC+FRDOC+FLDOC
      SUMC = CONST(116)+CONST(117)+CONST(118)+CONST(119)
!JQI      IF((SUMP-1.0) >= 0.001 .AND. MSR)
!JQI     .  WRITE(OUT,4000) SUMP,FRPOP,FLPOP,FRDOP,FLDOP,FPO4
      IF(MSR)THEN
       IF((SUMP-1.0) >= 0.001)                       &
        WRITE(OUT,4000) SUMP,CONST(106),CONST(107),CONST(108),CONST(109),CONST(110)
 4000 FORMAT(                                                           &
        10X,'INPUT ERROR IN "CONSTANTS" INPUT FILE'/                    &
        10X,'SUM OF PHOSPHORUS RECYCLE FRACTIONS DOES NOT EQUAL 1.0'/   &
        10X,'SUM = FRPOP + FLPOP + FRDOP + FLDOP + FPO4'/               &
        5X,6F8.3/10X,'RCA TERMINATED')                 
!JQI      IF((SUMN-1.0) >= 0.001 .AND. MSR)
!JQI     .  WRITE(OUT,4010) SUMN,FRPON,FLPON,FRDON,FLDON,FNH4
       IF((SUMN-1.0) >= 0.001)                            &
       WRITE(OUT,4010) SUMN,CONST(111),CONST(112),CONST(113),CONST(114),CONST(115)
 4010 FORMAT(                                                           &
        10X,'INPUT ERROR IN "CONSTANTS" INPUT FILE'/                    &
        10X,'SUM OF PHOSPHORUS RECYCLE FRACTIONS DOES NOT EQUAL 1.0'/   &
        10X,'SUM = FRPON + FLPON + FRDON + FLDON + FNH4'/               &
         5X,6F8.3/10X,'RCA TERMINATED')
!JQI      IF((SUMC-1.0) >= 0.001 .AND. MSR)
!JQI     .  WRITE(OUT,4020) SUMC,FRPOC,FLPOC,FRDOC,FLDOC
       IF((SUMC-1.0) >= 0.001)                                 &
        WRITE(OUT,4020) SUMC,CONST(116),CONST(117),CONST(118),CONST(119)
 4020 FORMAT(                                                           &
        10X,'INPUT ERROR IN "CONSTANTS" INPUT FILE'/                    &
        10X,'SUM OF PHOSPHORUS RECYCLE FRACTIONS DOES NOT EQUAL 1.0'/   &
        10X,'SUM = FRPOC + FLPOC + FRDOC + FLDOC'/                      &
         5X,5F8.3/10X,'RCA TERMINATED')
      END IF	 
!      IF((SUMP-1.0) >= 0.001)  CALL EXIT
!      IF((SUMN-1.0) >= 0.001)  CALL EXIT
!      IF((SUMC-1.0) >= 0.001)  CALL EXIT

      IF((SUMP-1.0) >= 0.001)  THEN 
      CALL PSTOP('eutro874  ')
      END IF
      IF((SUMN-1.0) >= 0.001)  THEN 
      CALL PSTOP('eutro877  ')
      END IF
      IF((SUMC-1.0) >= 0.001)  THEN 
      CALL PSTOP('eutro880  ')
      END IF

!        ALLOCATE TEMPORARY STORAGE ARRAY
      ALLOCATE(SK1415(MT,NZ),STAT=ISTAT)
      ALLOCATE(SK2614(MT,NZ),STAT=ISTAT)
      ALLOCATE(SK150(MT,NZ),STAT=ISTAT)
      ALLOCATE(SK2114(MT,NZ),STAT=ISTAT)
      ALLOCATE(SK15P(MT,NZ),STAT=ISTAT)
      ALLOCATE(SK200(MT,NZ),STAT=ISTAT)
      ALLOCATE(SK210(MT,NZ),STAT=ISTAT)
      ALLOCATE(SK220(MT,NZ),STAT=ISTAT)
      ALLOCATE(SK240(MT,NZ),STAT=ISTAT)
      ALLOCATE(SK250(MT,NZ),STAT=ISTAT)
      ALLOCATE(SR260(MT,NZ),STAT=ISTAT)
      ALLOCATE(SK2324(MT,NZ),STAT=ISTAT)
      ALLOCATE(SK26OC(MT,NZ),STAT=ISTAT)

!        CHECK FOR MULTI-YEAR RUN...IF SO GET "OLD" INITIAL CONDITIONS,
!        I.E., FINAL CONCENTRATIONS FROM PREVIOUS RUN, FROM RCAFIC FILE
!
!     IF(CYCLE.EQ.1)  THEN
!        READ(15)   CARAY
!        REWIND 15
!     ENDIF

!        SET-UP AND WRITE INFORMATION NEEDED BY GDP
      DO ISYS=1,40
        IF(ISYS <= NGDMP) THEN
         SYSGDP(ISYS)=0
        ELSE
         SYSGDP(ISYS)=1
        ENDIF
      ENDDO
!        FIRST ... NAMES OF THE GLOBAL DUMP VARIABLES
      GDNAMES( 1) = 'Salinity'       ;GDNAMES( 2) = 'Phyt1'
      GDNAMES( 3) = 'Phyt2'          ;GDNAMES( 4) = 'Phyt3'
      GDNAMES( 5) = 'TPOP'           ;GDNAMES( 6) = 'TDOP'
      GDNAMES( 7) = 'DPO4'           ;GDNAMES( 8) = 'TPON'
      GDNAMES( 9) = 'TDON'           ;GDNAMES(10) = 'DNH4'
      GDNAMES(11) = 'NO23'           ;GDNAMES(12) = 'TPSi'
      GDNAMES(13) = 'DSi'            ;GDNAMES(14) = 'TPOC'
      GDNAMES(15) = 'TDOC'           ;GDNAMES(16) = 'O2EQ'
      GDNAMES(17) = 'DOAVE'          ;GDNAMES(18) = 'DOMIN'
      GDNAMES(19) = 'DOMAX'          ;GDNAMES(20) = 'ECOMSal'
      GDNAMES(21) = 'Chlave'         ;GDNAMES(22) = 'Chlmin'
      GDNAMES(23) = 'Chlmax'         ;GDNAMES(24) = 'Gross PP'
      GDNAMES(25) = 'Net PP'         ;GDNAMES(26) = 'TResp'
      GDNAMES(27) = 'ECOMTemp'       ;GDNAMES(28) = 'SKE'
!               REWRITE RCAF10 FILE
      REWIND(10)
      IF(MSR)THEN
       WRITE(10)   NXY,NZ,NOSYS,NGDMP
       WRITE(10)   GDNAMES
       WRITE(10)   SYSGDP
!JQI       WRITE(10)   FSM
      END IF 
      IF(SERIAL)WRITE(10) FSM
#  if defined (MULTIPROCESSOR)
      IF(PAR)THEN
       ALLOCATE(FSM_TMP(NXY))     ;FSM_TMP = 0.0
       CALL GATHER(LBOUND(FSM,1),UBOUND(FSM,1),M,NXY,1,     &
                   MYID,NPROCS,NMAP,FSM,FSM_TMP)
       IF(MSR) WRITE(10) FSM_TMP
       DEALLOCATE(FSM_TMP)		  
      END IF 
#  endif

!        WRITE DDNAMES TO RCAF12
!      IF(MSR) WRITE(12)  DDNAMES

!       ALLOCATE(SAL_GDA(0:MT,NZ),PHYT1_GDA(0:MT,NZ))        !Tian to 968
!       ALLOCATE(PHYT2_GDA(0:MT,NZ),PHYT3_GDA(0:MT,NZ))
!       ALLOCATE(TPOP_GDA(0:MT,NZ),TDOP_GDA(0:MT,NZ))
!       ALLOCATE(TPON_GDA(0:MT,NZ),TDON_GDA(0:MT,NZ)) 
!       ALLOCATE(NO23_GDA(0:MT,NZ),TPSI_GDA(0:MT,NZ))
!       ALLOCATE(TPOC_GDA(0:MT,NZ),TDOC_GDA(0:MT,NZ))
!       ALLOCATE(DPO4_GDA(0:MT,NZ),DNH4_GDA(0:MT,NZ))
!       ALLOCATE(DSI_GDA(0:MT,NZ),O2EQ_GDA(0:MT,NZ))
!       ALLOCATE(BOTBODHS_GDA(0:MT,NZ),TGPP_GDA(0:MT,NZ))
!       ALLOCATE(TNPP_GDA(0:MT,NZ),TRESP_GDA(0:MT,NZ))
!       ALLOCATE(SKE_GDA(0:MT,NZ),ECMTMP_GDA(0:MT,NZ))
!       ALLOCATE(ECMSAL_GDA(0:MT,NZ))

!       SAL_GDA      = 0.0 ;PHYT1_GDA  = 0.0
!       PHYT2_GDA    = 0.0 ;PHYT3_GDA  = 0.0
!       TPOP_GDA     = 0.0 ;TDOP_GDA   = 0.0
!       TPON_GDA     = 0.0 ;TDON_GDA   = 0.0 
!       NO23_GDA     = 0.0 ;TPSI_GDA   = 0.0
!       TPOC_GDA     = 0.0 ;TDOC_GDA   = 0.0
!       DPO4_GDA     = 0.0 ;DNH4_GDA   = 0.0
!       DSI_GDA      = 0.0 ;O2EQ_GDA   = 0.0
!       BOTBODHS_GDA = 0.0 ;TGPP_GDA   = 0.0
!       TNPP_GDA     = 0.0 ;TRESP_GDA  = 0.0
!       SKE_GDA      = 0.0 ;ECMTMP_GDA = 0.0
!       ECMSAL_GDA   = 0.0 ;                             !Tian to 944

       ALLOCATE(PCRB1(0:MT,NZ)  ,PCRB2(0:MT,NZ))
       ALLOCATE(PCRB3(0:MT,NZ)  ,NCRB1(0:MT,NZ)) 
       ALLOCATE(NCRB2(0:MT,NZ)  ,NCRB3(0:MT,NZ))
       ALLOCATE(SCRB1(0:MT,NZ)  ,SCRB2(0:MT,NZ))
       ALLOCATE(SCRB3(0:MT,NZ)  ,STP20(0:MT,NZ))
       ALLOCATE(GPP1(0:MT,NZ)   ,GPP2(0:MT,NZ))
       ALLOCATE(GPP3(0:MT,NZ)   ,DPP1(0:MT,NZ))
       ALLOCATE(DPP2(0:MT,NZ)   ,DPP3(0:MT,NZ)) 
       ALLOCATE(RESP(0:MT,NZ)   ,GRAZ(0:MT,NZ)) 
       ALLOCATE(ALG1VS(0:MT,NZ) ,ALG2VS(0:MT,NZ)) 
       ALLOCATE(ALG3VS(0:MT,NZ) ,RNUTR1(0:MT,NZ))
       ALLOCATE(RNUTR2(0:MT,NZ) ,RNUTR3(0:MT,NZ))
       ALLOCATE(RLGHT1(0:MT,NZ) ,RLGHT2(0:MT,NZ))
       ALLOCATE(RLGHT3(0:MT,NZ) ,ATTENL(0:MT,NZ))
       ALLOCATE(SKE(0:MT,NZ)    ,CHLAVEG(0:MT,NZ))
       ALLOCATE(CHLMING(0:MT,NZ),CHLMAXG(0:MT,NZ))
       ALLOCATE(CCHL1S(0:MT,NZ) ,CCHL2S(0:MT,NZ)) 
       ALLOCATE(CCHL3S(0:MT,NZ) ,PNH41(0:MT,NZ))
       ALLOCATE(PNH42(0:MT,NZ)  ,PNH43(0:MT,NZ)) 
       ALLOCATE(PO4SS(0:MT,NZ)  ,SISS(0:MT,NZ))

       PCRB1   = 0.0 ;PCRB2   = 0.0
       PCRB3   = 0.0 ;NCRB1   = 0.0 
       NCRB2   = 0.0 ;NCRB3   = 0.0
       SCRB1   = 0.0 ;SCRB2   = 0.0
       SCRB3   = 0.0 ;STP20   = 0.0
       GPP1    = 0.0 ;GPP2    = 0.0
       GPP3    = 0.0 ;DPP1    = 0.0
       DPP2    = 0.0 ;DPP3    = 0.0 
       RESP    = 0.0 ;GRAZ    = 0.0 
       ALG1VS  = 0.0 ;ALG2VS  = 0.0 
       ALG3VS  = 0.0 ;RNUTR1  = 0.0
       RNUTR2  = 0.0 ;RNUTR3  = 0.0
       RLGHT1  = 0.0 ;RLGHT2  = 0.0
       RLGHT3  = 0.0 ;ATTENL  = 0.0
       SKE     = 0.0 ;CHLAVEG = 0.0
       CHLMING = 0.0 ;CHLMAXG = 0.0
       CCHL1S  = 0.0 ;CCHL2S  = 0.0 
       CCHL3S  = 0.0 ;PNH41   = 0.0
       PNH42   = 0.0 ;PNH43   = 0.0
       PO4SS   = 0.0 ;SISS    = 0.0

       IF(.NOT. ALLOCATED(ISTP20))ALLOCATE(ISTP20(MT,NZ))
       ISTP20 = 0
       ALLOCATE(KEBASE(MT))     ;KEBASE = 0.0

       ALLOCATE(DEPFLUX(MT,13)) ;DEPFLUX = 0.0
       ALLOCATE(CFLUXS(MT,8))   ;CFLUXS  = 0.0

!        ZERO NON-ACTIVE PHYTOPLANKTON TERMS
      IF(NPHYT == 1) THEN
!JQI       PHYT2    = 0.   ;GPP2     = 0.   ;DPP2     = 0.
       CARAY(:,:,3) = 0.   ;GPP2     = 0.   ;DPP2     = 0.
!JQI       PNH42    = 0.   ;SYSBY(3) = 1    ;PHYT3    = 0.
       PNH42    = 0.   ;SYSBY(3) = 1    ;CARAY(:,:,4) = 0.
       GPP3     = 0.   ;DPP3     = 0.   ;PNH43    = 0.
       SYSBY(4) = 1
      ELSEIF(NPHYT == 2) THEN
!JQI       PHYT3    = 0.   ;GPP3     = 0.   ;DPP3     = 0.
       CARAY(:,:,4) = 0.   ;GPP3     = 0.   ;DPP3     = 0.
       PNH43    = 0.   ;SYSBY(4) = 1
      ENDIF

!        COMPUTE TERMS FOR VARIABLE NUTRIENT STOICHIOMETRY
!        CHECK FOR STANDARD EUTRO KINETICS OR LAWS-CHALUP EUTRO KINETICS
!JQI      IF(AGMOPT == 0) THEN
 !lz     if(msr)print*,"const(1) = ",const(1)
      IF(CONST(1) == 0) THEN
       CALL INIT_STD_EUTRO(1)
!JQI      ELSE IF(AGMOPT == 1) THEN
      ELSE IF(CONST(1) == 1) THEN
       CALL INIT_LC_EUTRO       
      ELSE
!JQI       IF(MSR) WRITE(OUT,9000)  AGMOPT
       IF(MSR) WRITE(OUT,9000)  CONST(1)
 9000  FORMAT(///5X,'INPUT ERROR ... INVALID OPTION FOR <AGMOPT>'/     &
                 5X,'A VALUE OF ',I4,' WAS ASSIGNED'//)
!       CALL EXIT
       CALL PSTOP('eutro1054 ')
      ENDIF

!        COMPUTE VALUES OF EXP(-X) FOR  X = 0 TO 10 IN 0.005 INCREMENTS
      DO  I=1,2000
       EXPVALS(I) = EXP(-(FLOAT(I-1)/200.+0.0025))
      ENDDO

!        OXYGEN TO CARBON RATIO (2*16/12)
      OCRB = 2.6667

!JQI      IF(KEOPT == 0.) THEN
      IF(CONST(4) == 0.) THEN
       DO IXY=1,M
        IF(FSM(IXY) == 1.) THEN
!JQI         KEBASE(IXY) = KECONST
         KEBASE(IXY) = CONST(180)
        ELSE
         KEBASE(IXY) = 0.
        ENDIF
       ENDDO
!JQI      ELSEIF(KEOPT == 1.) THEN
      ELSEIF(CONST(4) == 1.) THEN
       DO IXY=1,M
        IF(FSM(IXY) == 1.) THEN
!JQI         KEBASE(IXY) = KEBS(IXY)
         KEBASE(IXY) = PARAM2D(IXY,6)
        ELSE
         KEBASE(IXY) = 0.
        ENDIF
       ENDDO
!JQI      ELSEIF(KEOPT == 4.) THEN
      ELSEIF(CONST(4) == 4.) THEN
!        READ TIME-VARIABLE EXTINCTION COEFFICIENTS
       OPEN(28,FILE=KINFILNA(2),FORM='FORMATTED')
!        READ TIME INTERVALS TO UPDATE EXTINCTION COEFFICIENTS (DAYS)
       READ(28,1200)  NKE,(TKE(I),I=1,NKE)
 1200  FORMAT(I5/(8F10.0)) 
       ALLOCATE(KEBASE_TMP(NXY))
       READ(28,'(8F10.0)',ERR=910)  (KEBASE_TMP(IXY),IXY=1,NXY)
 
       IF(SERIAL)THEN
        DO IXY = 1,NXY
	 KEBASE(IXY) = KEBASE_TMP(IXY)
	END DO
       END IF
          	 
# if defined (MULTIPROCESSOR) 
       IF(PAR)THEN
        DO IXY=1,M
         KEBASE(IXY) = KEBASE_TMP(NGID(IXY)) 
	END DO
	DO IXY=1,NHN
	 KEBASE(IXY+M) = KEBASE_TMP(HN_LST(IXY))
        END DO
       END IF	
# endif
             	
       IF(MSR) WRITE(OUT,1155) TKE(IKE)
 1155  FORMAT(//30X,'SEGMENT KEs (/METER) AT TIME = ',F5.0/     &
           6X,'X-->',25X,2(24X,'1'),24X,'2'/4X,'Y',5X,2(24X,'5',24X,'0')/)
       IF(MSR) WRITE(OUT,1156)  (KEBASE_TMP(IXY),IXY=1,NXY)
 1156  FORMAT(I5,5X,20F5.1/(6X,20F5.1))

       DEALLOCATE(KEBASE_TMP) 

       IKE=2
      ENDIF

!        COMPUTE REAERATION AT 20 DEG C
      DO IXY=1,MT
        IF(FSM(IXY) == 1.) THEN
!JQI         IF(KAOPT == 0.) THEN
         IF(CONST(3) == 0.) THEN
!JQI          KA20(IXY) = KLMIN/(HBAR(IXY)*DZ(IXY,1))
          KA20(IXY) = CONST(166)/(HBAR(IXY)*DZ(IXY,1))
!JQI         ELSEIF(KAOPT == 1.) THEN
         ELSEIF(CONST(3) == 1.) THEN
!JQI          KA20(IXY) = KL(IXY)/(HBAR(IXY)*DZ(IXY,1))
          KA20(IXY) = PARAM2D(IXY,1)/(HBAR(IXY)*DZ(IXY,1))
!JQI         ELSEIF(KAOPT == 2.) THEN
         ELSEIF(CONST(3) == 2.) THEN
          QXAVE = 0.0
	  QYAVE = 0.0
	  DO I=1,NTVE(IXY)
	   QXAVE = QXAVE + UU(NBVE(IXY,I),1)
	   QYAVE = QYAVE + VV(NBVE(IXY,I),1)
	  END DO
	  QXAVE = QXAVE/NTVE(IXY)
	  QYAVE = QYAVE/NTVE(IXY)  
          QVECT1 = SQRT(QXAVE*QXAVE + QYAVE*QYAVE)

	  QXAVE = 0.0
	  QYAVE = 0.0
	  DO I=1,NTVE(IXY)
	   QXAVE = QXAVE + UU(NBVE(IXY,I),2)
	   QYAVE = QYAVE + VV(NBVE(IXY,I),2)
	  END DO
	  QXAVE = QXAVE/NTVE(IXY)
	  QYAVE = QYAVE/NTVE(IXY)  
          QVECT2 = SQRT(QXAVE*QXAVE + QYAVE*QYAVE)
!JQI          KLVEL = SQRT(DIFUS*ABS(QVECT1-QVECT2)/
!JQI     .                (HBAR(IXY)*(DZ(IXY,1)+DZ(IXY,2))/2.))
          KLVEL = SQRT(CONST(167)*ABS(QVECT1-QVECT2)/            &
                      (HBAR(IXY)*(DZ(IXY,1)+DZ(IXY,2))/2.))
!JQI          KA20(IXY) = MAX(KLMIN,KLVEL)/(HBAR(IXY)*DZ(IXY,1))
          KA20(IXY) = MAX(CONST(166),KLVEL)/(HBAR(IXY)*DZ(IXY,1))
!JQI         ELSEIF(KAOPT == 3.) THEN
         ELSEIF(CONST(3) == 3.) THEN
!JQI          KA20(IXY) = MAX(KLMIN,KLWIND)/(HBAR(IXY)*DZ(IXY,1))
          KA20(IXY) = MAX(CONST(166),KLWIND)/(HBAR(IXY)*DZ(IXY,1))

         ELSE
!JQI          IF(MSR) WRITE(OUT,8900)   IFIX(KAOPT)
          IF(MSR) THEN
	    KAOPT = CONST(3)
	    WRITE(OUT,8900)   IFIX(KAOPT)
	  END IF  
 8900     FORMAT(///5X,'INVALID OPTION FOR KAOPT (VALUE =',I3,')'/    &
                    5X,'RCA TERMINATED')
         ENDIF
        ENDIF
       END DO	

!        SET REAERATION TERM FOR OXYGEN TO ZERO
      SR260 = 0.0

!        SETUP TEMPERATURE-CORRECTED REACTION RATES IN TABLE-LOOKUP FORM
      DO ITEMP=1,450
       TEMP = (FLOAT(ITEMP-1)/10.+0.05) - 20.
!JQI       K57CT(ITEMP) = K57C*K57T**TEMP
       K57CT(ITEMP) = CONST(120)*CONST(121)**TEMP
!JQI       K68CT(ITEMP) = K68C*K68T**TEMP
       K68CT(ITEMP) = CONST(122)*CONST(123)**TEMP
!JQI       K710CT(ITEMP) = K710C*K710T**TEMP
       K710CT(ITEMP) = CONST(124)*CONST(125)**TEMP
!JQI       K89CT(ITEMP) = K89C*K89T**TEMP
       K89CT(ITEMP) = CONST(126)*CONST(127)**TEMP
!JQI       K1012CT(ITEMP) = K1012C*K1012T**TEMP
       K1012CT(ITEMP) = CONST(128)*CONST(129)**TEMP
!JQI       K1113CT(ITEMP) = K1113C*K1113T**TEMP
       K1113CT(ITEMP) = CONST(130)*CONST(131)**TEMP
!JQI       K1214CT(ITEMP) = K1214C*K1214T**TEMP
       K1214CT(ITEMP) = CONST(132)*CONST(133)**TEMP
!JQI       K1314CT(ITEMP) = K1314C*K1314T**TEMP
       K1314CT(ITEMP) = CONST(134)*CONST(135)**TEMP
!JQI       K1415CT(ITEMP) = K1415C*K1415T**TEMP
       K1415CT(ITEMP) = CONST(136)*CONST(137)**TEMP
!jrw Add temperature limitation to nitrification
       IF(ITEMP <= 100.) K1415CT(ITEMP)=0.
       IF(ITEMP > 100. .AND. ITEMP < 140.)                     &
         K1415CT(ITEMP)= (FLOAT(ITEMP-100)/40.)*K1415CT(ITEMP)
!JQI       K150CT(ITEMP) = K150C*K150T**TEMP
       K150CT(ITEMP) = CONST(139)*CONST(140)**TEMP
!JQI       K1617CT(ITEMP) = K1617C*K1617T**TEMP
       K1617CT(ITEMP) = CONST(142)*CONST(143)**TEMP
!JQI       K1820CT(ITEMP) = K1820C*K1820T**TEMP
       K1820CT(ITEMP) = CONST(144)*CONST(145)**TEMP
!JQI       K1921CT(ITEMP) = K1921C*K1921T**TEMP
       K1921CT(ITEMP) = CONST(146)*CONST(147)**TEMP
!JQI       K200CT(ITEMP) = K200C*K200T**TEMP
       K200CT(ITEMP) = CONST(148)*CONST(149)**TEMP
!JQI       K210CT(ITEMP) = K210C*K210T**TEMP
       K210CT(ITEMP) = CONST(150)*CONST(151)**TEMP
!JQI       K220CT(ITEMP) = K220C*K220T**TEMP
       K220CT(ITEMP) = CONST(154)*CONST(155)**TEMP
!JQI       K2324CT(ITEMP) = K2324C*K2324T**TEMP
       K2324CT(ITEMP) = CONST(157)*CONST(158)**TEMP
!JQI       K240CT(ITEMP) = K240C*K240T**TEMP
       K240CT(ITEMP) = CONST(159)*CONST(160)**TEMP
!JQI       K250CT(ITEMP) = K250C*K250T**TEMP
       K250CT(ITEMP) = CONST(163)*CONST(164)**TEMP
!JQI       KACT(ITEMP) = KAT**TEMP
       KACT(ITEMP) = CONST(168)**TEMP
!JQI       VSPMTS(ITEMP) = VSPMT**TEMP
       VSPMTS(ITEMP) = CONST(171)**TEMP
      ENDDO

!        SET AVE,MIN,MAX CONCENTRATIONS FOR GLOBAL DUMP ARRAYS
!$doacross local(iz,iy,ix) , share(chlaveg,chlmaxg,chlming),
!$& share(doaveg,doming,domaxg)
      CHLAVEG = 0.
      DOAVEG  = 0.
      CHLMING = 1000000.
      DOMING  = 1000.
      CHLMAXG = -1000.
      DOMAXG  = -1000.

      IAVGGDCNTR = 0
      IAVGPPCNTR = 0

!        ALLOCATE AND INITIALIZE ARRAYS FOR GLOBAL DUMP AVERAGING, IF REQUIRED
      IF(IGDOPT == 1) THEN
       ALLOCATE(SAL_GDA(0:MT,NZ),PHYT1_GDA(0:MT,NZ))
       ALLOCATE(PHYT2_GDA(0:MT,NZ),PHYT3_GDA(0:MT,NZ))
       ALLOCATE(TPOP_GDA(0:MT,NZ),TDOP_GDA(0:MT,NZ))
       ALLOCATE(TPON_GDA(0:MT,NZ),TDON_GDA(0:MT,NZ))
       ALLOCATE(TPOC_GDA(0:MT,NZ),TDOC_GDA(0:MT,NZ))
       ALLOCATE(DPO4_GDA(0:MT,NZ),DNH4_GDA(0:MT,NZ))
       ALLOCATE(NO23_GDA(0:MT,NZ),DSI_GDA(0:MT,NZ))
       ALLOCATE(O2EQ_GDA(0:MT,NZ),BOTBODHS_GDA(0:MT,NZ))
       ALLOCATE(TGPP_GDA(0:MT,NZ),TNPP_GDA(0:MT,NZ))
       ALLOCATE(TRESP_GDA(0:MT,NZ),SKE_GDA(0:MT,NZ))
       ALLOCATE(ECMTMP_GDA(0:MT,NZ),ECMSAL_GDA(0:MT,NZ))
       ALLOCATE(TPSI_GDA(0:MT,NZ))
       
!$doacross local(iz,ixy) , share(sal_gda,ecmsal_gda),
!$& share(phyt1_gda,phyt2_gda,phyt3_gda),
!$& share(tpop_gda,tdop_gda,dpo4_gda),
!$& share(tpon_gda,tdon_gda,dnh4_gda,no23_gda),
!$& share(tpoc_gda,tdoc_gda,tpsi_gda,dsi_gda),
!$& share(o2eq_gda,rcatmp_gda,ecmtmp_gda,ske_gda),
!$& share(tgpdp_gda,tresp_gda,botbodhs_gda)
       SAL_GDA      = 0.   ;ECMSAL_GDA   = 0.
       PHYT1_GDA    = 0.   ;PHYT2_GDA    = 0.
       PHYT3_GDA    = 0.   ;TPOP_GDA     = 0.
       TDOP_GDA     = 0.   ;DPO4_GDA     = 0.
       TPON_GDA     = 0.   ;TDON_GDA     = 0.
!JQI       DNH4         = 0.   ;NO23_GDA     = 0.
       DNH4_GDA     = 0.   ;NO23_GDA     = 0. 
       CKINARRAY    = 0.   ;NO23_GDA     = 0.
       TPSI_GDA     = 0.   ;DSI_GDA      = 0.
       TPOC_GDA     = 0.   ;TDOC_GDA     = 0.
       O2EQ_GDA     = 0.   ;ECMTMP_GDA   = 0.
       SKE_GDA      = 0.   ;TGPP_GDA     = 0.
       TNPP_GDA     = 0.   ;TRESP_GDA    = 0.
       BOTBODHS_GDA = 0.
      ENDIF

!        ALLOCATE AND INITIALIZE ARRAY FOR DETAILED DUMP AVERAGING, IF REQUIRED
      IF(IDDOPT == 1) THEN
       ALLOCATE(ECMSAL_DDA(0:MT,NZ),RPOP_DDA(0:MT,NZ))
       ALLOCATE(LPOP_DDA(0:MT,NZ),RDOP_DDA(0:MT,NZ))
       ALLOCATE(LDOP_DDA(0:MT,NZ),DPO4_DDA(0:MT,NZ))
       ALLOCATE(RPON_DDA(0:MT,NZ),LPON_DDA(0:MT,NZ))
       ALLOCATE(PON_DDA(0:MT,NZ),DON_DDA(0:MT,NZ))
       ALLOCATE(TN_DDA(0:MT,NZ))
       ALLOCATE(RDON_DDA(0:MT,NZ),LDON_DDA(0:MT,NZ))
       ALLOCATE(DNH4_DDA(0:MT,NZ),NO23_DDA(0:MT,NZ))
       ALLOCATE(BSI_DDA(0:MT,NZ),DSI_DDA(0:MT,NZ))
       ALLOCATE(RPOC_DDA(0:MT,NZ),LPOC_DDA(0:MT,NZ))
       ALLOCATE(RDOC_DDA(0:MT,NZ),LDOC_DDA(0:MT,NZ))
       ALLOCATE(REPOC_DDA(0:MT,NZ),REDOC_DDA(0:MT,NZ))
       ALLOCATE(POC_DDA(0:MT,NZ),DOC_DDA(0:MT,NZ))
       ALLOCATE(TOC_DDA(0:MT,NZ))
       ALLOCATE(EXDOC_DDA(0:MT,NZ),O2EQ_DDA(0:MT,NZ))
       ALLOCATE(DO_DDA(0:MT,NZ),ECMTEM_DDA(0:MT,NZ))
       ALLOCATE(PO4T_DDA(0:MT,NZ),NH4T_DDA(0:MT,NZ))
       ALLOCATE(SIT_DDA(0:MT,NZ),DO_DMIN(0:MT,NZ))
       ALLOCATE(DOP_DDA(0:MT,NZ),POP_DDA(0:MT,NZ))
       ALLOCATE(TP_DDA(0:MT,NZ),DO_DMAX(0:MT,NZ))
!$doacross local(iz,ixy),share(sal_dda,ecmsal_dda),
!$& share(phyt1_dda,phyt2_dda,phyt3_dda),
!$& share(rpop_dda,lpop_dda,rdop_dda,ldop_dda,dpo4_dda),
!$& share(rpon_dda,lpon_dda,rdon_dda,ldon_dda,dnh4_dda,no23_dda),
!$& share(bsi_dda,dsi_dda,poc_dda,doc_dda,toc_dda,don_dda,pon_dda),
!$& share(tn_dda,pop_dda,dop_dda,tp_dda),
!$& share(rpoc_dda,lpoc_dda,rdoc_dda,ldoc_dda,redoc_dda,exdoc_dda),
!$& share(o2eq_dda,do_dda,ecmtem_dda,do_dmin,do_dmax)
!JQI       SAL_DDA    = 0. ;ECMSAL_DDA = 0. ;PHYT1_DDA  = 0.
       SCRATCH_KIN(:,:,2) = 0. ;ECMSAL_DDA = 0. ;SCRATCH_KIN(:,:,3) = 0.
!JQI       PHYT2_DDA  = 0. ;PHYT3_DDA  = 0. ;RPOP_DDA   = 0.
       SCRATCH_KIN(:,:,4) = 0. ;SCRATCH_KIN(:,:,5) = 0. ;RPOP_DDA   = 0.
       LPOP_DDA   = 0. ;POP_DDA    = 0. ;RDOP_DDA   = 0.
       LDOP_DDA   = 0. ;DOP_DDA    = 0. ;DPO4_DDA   = 0.
       TP_DDA     = 0. ;RPON_DDA   = 0. ;LPON_DDA   = 0.
       PON_DDA    = 0. ;RDON_DDA   = 0. ;LDON_DDA   = 0.
       DON_DDA    = 0. ;DNH4_DDA   = 0. ;NO23_DDA   = 0.
       TN_DDA     = 0. ;BSI_DDA    = 0. ;DSI_DDA    = 0.
       RPOC_DDA   = 0. ;LPOC_DDA   = 0. ;RDOC_DDA   = 0.
       LDOC_DDA   = 0. ;REDOC_DDA  = 0. ;REPOC_DDA  = 0.
       EXDOC_DDA  = 0. ;POC_DDA    = 0. ;DOC_DDA    = 0.
       TOC_DDA    = 0. ;O2EQ_DDA   = 0. ;DO_DDA     = 0.
       ECMTEM_DDA = 0. ;PO4T_DDA   = 0. ;NH4T_DDA   = 0.
       SIT_DDA    = 0.
       DO_DMIN    = 1000.
       DO_DMAX    = -1000.

       ALLOCATE(PHYT1_DMIN(MT,NZ),PHYT2_DMIN(MT,NZ))
       ALLOCATE(PHYT3_DMIN(MT,NZ),POP_DMIN(MT,NZ))
       ALLOCATE(DOP_DMIN(MT,NZ),DPO4_DMIN(MT,NZ))
       ALLOCATE(PON_DMIN(MT,NZ),DON_DMIN(MT,NZ))
       ALLOCATE(DNH4_DMIN(MT,NZ),NO23_DMIN(MT,NZ))
       ALLOCATE(TP_DMIN(MT,NZ),TN_DMIN(MT,NZ))
       ALLOCATE(BSI_DMIN(MT,NZ),DSI_DMIN(MT,NZ))
       ALLOCATE(POC_DMIN(MT,NZ),DOC_DMIN(MT,NZ))
       ALLOCATE(TOC_DMIN(MT,NZ),O2EQ_DMIN(MT,NZ))
       ALLOCATE(HYDSAL_DMIN(MT,NZ))
       ALLOCATE(HYDTEMP_DMIN(MT,NZ))
       ALLOCATE(CHLA1_DMIN(MT,NZ),CCHL1_DMIN(MT,NZ))
       ALLOCATE(CHLA2_DMIN(MT,NZ),CCHL2_DMIN(MT,NZ))
       ALLOCATE(CHLA3_DMIN(MT,NZ),CCHL3_DMIN(MT,NZ))
!$doacross local(iz,ixy) ,
!$& share(sal_dmin,phyt1_dmin,phyt2_dmin,phyt3_dmin),
!$& share(pop_dmin,dop_dmin,dpo4_dmin,tp_dmin),
!$& share(pon_dmin,don_dmin,dnh4_dmin,no23_dmin,tn_dmin),
!$& share(bsi_dmin,dsi_dmin,hydsal_dmin,hydtemp_dmin),
!$& share(poc_dmin,doc_dmin,toc_dmin,o2eq_dmin,do_dmin),
!$& share(tam_dmin,cchl1_dmin,cchl2_dmin,chla1_dmin,chla2_dmin)
!$& share(cchl3_dmin,chla3_dmin)
!JQI       SAL_DMIN     = 1000. ;PHYT1_DMIN   = 1000. ;PHYT2_DMIN   = 1000.
       SCRATCH_KIN(:,:,12) = 1000. ;PHYT1_DMIN = 1000. 
       PHYT2_DMIN   = 1000.
       PHYT3_DMIN   = 1000. ;POP_DMIN     = 1000. ;DOP_DMIN     = 1000.
       DPO4_DMIN    = 1000. ;TP_DMIN      = 1000. ;PON_DMIN     = 1000.
       DON_DMIN     = 1000. ;DNH4_DMIN    = 1000. ;NO23_DMIN    = 1000.
       TN_DMIN      = 1000. ;BSI_DMIN     = 1000. ;DSI_DMIN     = 1000.
       POC_DMIN     = 1000. ;DOC_DMIN     = 1000. ;TOC_DMIN     = 1000.
       O2EQ_DMIN    = 1000. ;DO_DMIN      = 1000. ;HYDSAL_DMIN  = 1000.
       HYDTEMP_DMIN = 1000. ;CCHL1_DMIN   = 1000. ;CCHL2_DMIN   = 1000.
       CCHL3_DMIN   = 1000. ;CHLA1_DMIN   = 1000. ;CHLA2_DMIN   = 1000.
       CHLA3_DMIN   = 1000.

       ALLOCATE(PHYT1_DMAX(MT,NZ),PHYT2_DMAX(MT,NZ))
       ALLOCATE(PHYT3_DMAX(MT,NZ),POP_DMAX(MT,NZ))
       ALLOCATE(DOP_DMAX(MT,NZ),DPO4_DMAX(MT,NZ))
       ALLOCATE(PON_DMAX(MT,NZ),DON_DMAX(MT,NZ))
       ALLOCATE(DNH4_DMAX(MT,NZ),NO23_DMAX(MT,NZ))
       ALLOCATE(TP_DMAX(MT,NZ),TN_DMAX(MT,NZ))
       ALLOCATE(BSI_DMAX(MT,NZ),DSI_DMAX(MT,NZ))
       ALLOCATE(POC_DMAX(MT,NZ),DOC_DMAX(MT,NZ))
       ALLOCATE(TOC_DMAX(MT,NZ),O2EQ_DMAX(MT,NZ))
       ALLOCATE(HYDSAL_DMAX(MT,NZ))
       ALLOCATE(HYDTEMP_DMAX(MT,NZ),CCHL1_DMAX(MT,NZ))
       ALLOCATE(CCHL2_DMAX(MT,NZ))
       ALLOCATE(CCHL3_DMAX(MT,NZ),CHLA1_DMAX(MT,NZ))
       ALLOCATE(CHLA2_DMAX(MT,NZ),CHLA3_DMAX(MT,NZ))

!$doacross local(iz,ixy) ,
!$& share(sal_dmax,phyt1_dmax,phyt2_dmax,phyt3_dmax),
!$& share(pop_dmax,rdop_dmax,dpo4_dmax,tp_dmax),
!$& share(pon_dmax,don_dmax,dnh4_dmax,no23_dmax,tn_dmax),
!$& share(bsi_dmax,dsi_dmax,hydsal_dmax,hydtemp_dmax),
!$& share(poc_dmax,doc_dmax,toc_dmax,o2eq_dmax,do_dmax),
!$& share(tam_dmax,cchl1_dmax,cchl2_dmax,chla1_dmax,chla2_dmax)
!$& share(cchl3_dmax,chla3_dmax)
!JQI       SAL_DMAX     = -1000.   ;PHYT1_DMAX   = -1000.
       SCRATCH_KIN(:,:,13) = -1000.   ;PHYT1_DMAX   = -1000.
       PHYT2_DMAX   = -1000.   ;PHYT3_DMAX   = -1000.
       POP_DMAX     = -1000.   ;DOP_DMAX     = -1000.
       DPO4_DMAX    = -1000.   ;TP_DMAX      = -1000.
       PON_DMAX     = -1000.   ;DON_DMAX     = -1000.
       DNH4_DMAX    = -1000.   ;NO23_DMAX    = -1000.
       TN_DMAX      = -1000.   ;BSI_DMAX     = -1000.
       DSI_DMAX     = -1000.   ;POC_DMAX     = -1000.
       DOC_DMAX     = -1000.   ;TOC_DMAX     = -1000.
       O2EQ_DMAX    = -1000.   ;DO_DMAX      = -1000.
       HYDSAL_DMAX  = -1000.   ;HYDTEMP_DMAX = -1000.
       CCHL1_DMAX   = -1000.   ;CCHL2_DMAX   = -1000.
       CCHL3_DMAX   = -1000.   ;CHLA1_DMAX   = -1000.
       CHLA2_DMAX   = -1000.   ;CHLA3_DMAX   = -1000.

       IAVGDDCNTR = 0
      ENDIF




!        INITIALIZE SALINITY FROM ECOM
      CARAY(:,:,1) = HYDSAL(:,:)

!        INITIALIZE SEDIMENT

      CALL ALLOCATE_SED 
      CALL SED_READ    
! 
!                  S Y S T E M   L O O P S
! 

   50 CONTINUE

!        COMPUTE TLDOC RECYCLE TERM, SUSPENDED SOLIDS AND STP20
!! c$doacross local(iz,iy,ix,tldoc)
      DO IZ=1,NZ
       DO IXY=1,MT
       
        IF(FSM(IXY) /= 0.) THEN
!JQI         TLDOC = PHYT1(IXY,IZ) + PHYT2(IXY,IZ) +PHYT3(IXY,IZ) +
!JQI     .           REDOC(IXY,IZ) + EXDOC(IXY,IZ) 
         TLDOC = CARAY(IXY,IZ,2) + CARAY(IXY,IZ,3) +CARAY(IXY,IZ,4) +  &
                 CARAY(IXY,IZ,24) + CARAY(IXY,IZ,22) 
!JQI         IF((KMPHYT == 0.) .AND. (TLDOC == 0.0)) THEN
         IF((CONST(105) == 0.) .AND. (TLDOC == 0.0)) THEN
          XEMPRC(IXY,IZ) = 0.
         ELSE              
!JQI          XEMPRC(IXY,IZ) = TLDOC/(KMPHYT+TLDOC)
          XEMPRC(IXY,IZ) = TLDOC/(CONST(105)+TLDOC)
         ENDIF
         STP20(IXY,IZ) = MAX(0.0,HYDTEMP(IXY,IZ)) - 20.
         ISTP20(IXY,IZ) = 10.*MAX(0.,HYDTEMP(IXY,IZ)) + 1.	 
	ENDIF
       END DO
      END DO 
      	 
!   ISTP20 =40;HYDTEMP=4. !Temporal Tian

!        LOOP FOR DETAILED DUMP AVERAGING, IF REQUIRED
      IF(IDDOPT == 1) THEN
!$doacross local(iz,ixy) , share(sal_dda,ecmsal_dda,phyt1_dda),
!$& share(phyt2_dda,bsi_dda,dsi_dda,o2eq_dda,do_dda,ecmtem_dda)
!$& share(phyt3_dda)
!JQI       SAL_DDA    = SAL_DDA    + SAL
       SCRATCH_KIN(:,:,2)    = SCRATCH_KIN(:,:,2)    + CARAY(:,:,1)
       ECMSAL_DDA = ECMSAL_DDA + HYDSAL
!JQI       PHYT1_DDA  = PHYT1_DDA  + PHYT1
!JQI       PHYT2_DDA  = PHYT2_DDA  + PHYT2
!JQI       PHYT3_DDA  = PHYT3_DDA  + PHYT3
       SCRATCH_KIN(:,:,3)  = SCRATCH_KIN(:,:,3)  + CARAY(:,:,2)
       SCRATCH_KIN(:,:,4)  = SCRATCH_KIN(:,:,4)  + CARAY(:,:,3)
       SCRATCH_KIN(:,:,5)  = SCRATCH_KIN(:,:,5)  + CARAY(:,:,4)
!JQI       BSI_DDA    = BSI_DDA    + BSI
       BSI_DDA(:,:)    = BSI_DDA(:,:)    + CARAY(:,:,16)
!JQI       DSI_DDA    = DSI_DDA    + DSI
       DSI_DDA(:,:)    = DSI_DDA(:,:)    + CKINARRAY(:,:,3)
!JQI       SIT_DDA    = SIT_DDA    + SIT
       SIT_DDA(:,:)    = SIT_DDA(:,:)    + CARAY(:,:,17)
!JQI       O2EQ_DDA   = O2EQ_DDA   + O2EQ
       O2EQ_DDA(:,:)   = O2EQ_DDA(:,:)   + CARAY(:,:,25)
!JQI       DO_DDA     = DO_DDA     + DO
       DO_DDA(:,:)     = DO_DDA(:,:)     + CARAY(:,:,26)
       ECMTEM_DDA = ECMTEM_DDA + HYDTEMP
!$doacross local(iz,ixy,pop,dop) ,
!$& share(rpop_dda,lpop_dda,rdop_dda,ldop_dda,po4t_dda)                 
!$& share(pop_dda,dop_dda,dpo4_dda,tp_dda)                 
       DO IZ=1,NZ
        DO IXY=1,M
!JQI         RPOP_DDA(IXY,IZ) = RPOP_DDA(IXY,IZ) + RPOP(IXY,IZ)
         RPOP_DDA(IXY,IZ) = RPOP_DDA(IXY,IZ) + CARAY(IXY,IZ,5)
!JQI         LPOP_DDA(IXY,IZ) = LPOP_DDA(IXY,IZ) + LPOP(IXY,IZ)
         LPOP_DDA(IXY,IZ) = LPOP_DDA(IXY,IZ) + CARAY(IXY,IZ,6)
!JQI         RDOP_DDA(IXY,IZ) = RDOP_DDA(IXY,IZ) + RDOP(IXY,IZ)
         RDOP_DDA(IXY,IZ) = RDOP_DDA(IXY,IZ) + CARAY(IXY,IZ,7)
!JQI         LDOP_DDA(IXY,IZ) = LDOP_DDA(IXY,IZ) + LDOP(IXY,IZ)
         LDOP_DDA(IXY,IZ) = LDOP_DDA(IXY,IZ) + CARAY(IXY,IZ,8)
!JQI         PO4T_DDA(IXY,IZ) = PO4T_DDA(IXY,IZ) + PO4T(IXY,IZ)
         PO4T_DDA(IXY,IZ) = PO4T_DDA(IXY,IZ) + CARAY(IXY,IZ,9)
!JQI         POP = PCRB1(IXY,IZ)*PHYT1(IXY,IZ) +
!JQI     .         PCRB2(IXY,IZ)*PHYT2(IXY,IZ) +
!JQI     .         PCRB3(IXY,IZ)*PHYT3(IXY,IZ) +
!JQI     .         RPOP(IXY,IZ) + LPOP(IXY,IZ)
         POP = PCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + PCRB2(IXY,IZ)*CARAY(IXY,IZ,3) + &
	       PCRB3(IXY,IZ)*CARAY(IXY,IZ,4) + CARAY(IXY,IZ,5) + CARAY(IXY,IZ,6)
         POP_DDA(IXY,IZ) = POP_DDA(IXY,IZ) + POP
!JQI         DOP = RDOP(IXY,IZ) + LDOP(IXY,IZ)
         DOP = CARAY(IXY,IZ,7) + CARAY(IXY,IZ,8)
         DOP_DDA(IXY,IZ) = DOP_DDA(IXY,IZ) + DOP
!JQI         DPO4_DDA(IXY,IZ) = DPO4_DDA(IXY,IZ) + DPO4(IXY,IZ)
!JQI         TP_DDA(IXY,IZ) = TP_DDA(IXY,IZ)+POP+DOP+DPO4(IXY,IZ)
         DPO4_DDA(IXY,IZ) = DPO4_DDA(IXY,IZ) + CKINARRAY(IXY,IZ,1)
         TP_DDA(IXY,IZ) = TP_DDA(IXY,IZ)+POP+DOP+CKINARRAY(IXY,IZ,1)
	END DO
       END DO	 
!$doacross local(iz,ixy,pon,don) ,
!$& share(rpon_dda,lpon_dda,rdon_dda,ldon_dda,nh4t_dda,pon_dda)        
!$& share(don_dda,dnh4_dda,no23_dda,tn_dda)        
       DO IZ=1,NZ
        DO IXY=1,M
!JQI         RPON_DDA(IXY,IZ) = RPON_DDA(IXY,IZ) + RPON(IXY,IZ)
         RPON_DDA(IXY,IZ) = RPON_DDA(IXY,IZ) + CARAY(IXY,IZ,10)
!JQI         LPON_DDA(IXY,IZ) = LPON_DDA(IXY,IZ) + LPON(IXY,IZ)
         LPON_DDA(IXY,IZ) = LPON_DDA(IXY,IZ) + CARAY(IXY,IZ,11)
!JQI         RDON_DDA(IXY,IZ) = RDON_DDA(IXY,IZ) + RDON(IXY,IZ)
         RDON_DDA(IXY,IZ) = RDON_DDA(IXY,IZ) + CARAY(IXY,IZ,12)
!JQI         LDON_DDA(IXY,IZ) = LDON_DDA(IXY,IZ) + LDON(IXY,IZ)
         LDON_DDA(IXY,IZ) = LDON_DDA(IXY,IZ) + CARAY(IXY,IZ,13)
!JQI         NH4T_DDA(IXY,IZ) = NH4T_DDA(IXY,IZ) + NH4T(IXY,IZ)
         NH4T_DDA(IXY,IZ) = NH4T_DDA(IXY,IZ) + CARAY(IXY,IZ,14)
!JQI         PON = NCRB1(IXY,IZ)*PHYT1(IXY,IZ) +
!JQI     .         NCRB2(IXY,IZ)*PHYT2(IXY,IZ) +
!JQI     .         NCRB3(IXY,IZ)*PHYT3(IXY,IZ) +
!JQI     .         RPON(IXY,IZ) + LPON(IXY,IZ)
         PON = NCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + NCRB2(IXY,IZ)*CARAY(IXY,IZ,3) + &
               NCRB3(IXY,IZ)*CARAY(IXY,IZ,4) + CARAY(IXY,IZ,10) + CARAY(IXY,IZ,11)
         PON_DDA(IXY,IZ) = PON_DDA(IXY,IZ) + PON
!JQI         DON = RDON(IXY,IZ) + LDON(IXY,IZ)
         DON = CARAY(IXY,IZ,12) + CARAY(IXY,IZ,13)
         DON_DDA(IXY,IZ) = DON_DDA(IXY,IZ) + DON
!JQI         DNH4_DDA(IXY,IZ) = DNH4_DDA(IXY,IZ) + DNH4(IXY,IZ)
         DNH4_DDA(IXY,IZ) = DNH4_DDA(IXY,IZ) + CKINARRAY(IXY,IZ,2)
!JQI         NO23_DDA(IXY,IZ) = NO23_DDA(IXY,IZ) + NO23(IXY,IZ)
         NO23_DDA(IXY,IZ) = NO23_DDA(IXY,IZ) + CARAY(IXY,IZ,15)
!JQI         TN_DDA(IXY,IZ) = TN_DDA(IXY,IZ) + PON + DON +
!JQI     .         DNH4(IXY,IZ) + NO23(IXY,IZ)
         TN_DDA(IXY,IZ) = TN_DDA(IXY,IZ) + PON + DON +      &
              CKINARRAY(IXY,IZ,2) + CARAY(IXY,IZ,15)
        END DO
       END DO	
!$doacross local(iz,ixy,poc,doc) ,
!$& share(rpoc_dda,lpoc_dda,rdoc_dda,ldoc_dda,repoc_dda,redoc_dda)        
!$& share(exdoc_dda,poc_dda,doc_dda,tdoc_dda)
       DO IZ=1,NZ
        DO IXY=1,M
!JQI         RPOC_DDA(IXY,IZ) = RPOC_DDA(IXY,IZ) + RPOC(IXY,IZ)
         RPOC_DDA(IXY,IZ) = RPOC_DDA(IXY,IZ) + CARAY(IXY,IZ,18)
!JQI         LPOC_DDA(IXY,IZ) = LPOC_DDA(IXY,IZ) + LPOC(IXY,IZ)
         LPOC_DDA(IXY,IZ) = LPOC_DDA(IXY,IZ) + CARAY(IXY,IZ,19)
!JQI         RDOC_DDA(IXY,IZ) = RDOC_DDA(IXY,IZ) + RDOC(IXY,IZ)
         RDOC_DDA(IXY,IZ) = RDOC_DDA(IXY,IZ) + CARAY(IXY,IZ,20)
!JQI         LDOC_DDA(IXY,IZ) = LDOC_DDA(IXY,IZ) + LDOC(IXY,IZ)
         LDOC_DDA(IXY,IZ) = LDOC_DDA(IXY,IZ) + CARAY(IXY,IZ,21)
!JQI         REPOC_DDA(IXY,IZ) = REPOC_DDA(IXY,IZ) + REPOC(IXY,IZ)
         REPOC_DDA(IXY,IZ) = REPOC_DDA(IXY,IZ) + CARAY(IXY,IZ,23)
!JQI         REDOC_DDA(IXY,IZ) = REDOC_DDA(IXY,IZ) + REDOC(IXY,IZ)
         REDOC_DDA(IXY,IZ) = REDOC_DDA(IXY,IZ) + CARAY(IXY,IZ,24)
!JQI         EXDOC_DDA(IXY,IZ) = EXDOC_DDA(IXY,IZ) + EXDOC(IXY,IZ)
         EXDOC_DDA(IXY,IZ) = EXDOC_DDA(IXY,IZ) + CARAY(IXY,IZ,22)
!JQI         POC = PHYT1(IXY,IZ) + PHYT2(IXY,IZ) +PHYT3(IXY,IZ) +
!JQI     .         RPOC(IXY,IZ) + LPOC(IXY,IZ) + REPOC(IXY,IZ)     
         POC = CARAY(IXY,IZ,2) + CARAY(IXY,IZ,3) +CARAY(IXY,IZ,4) +    &
               CARAY(IXY,IZ,18) + CARAY(IXY,IZ,19) + CARAY(IXY,IZ,23)
         POC_DDA(IXY,IZ) = POC_DDA(IXY,IZ) + POC
!JQI         DOC = RDOC(IXY,IZ) + LDOC(IXY,IZ) +
!JQI     .         REDOC(IXY,IZ) + EXDOC(IXY,IZ)
         DOC = CARAY(IXY,IZ,20) + CARAY(IXY,IZ,21) +         &
               CARAY(IXY,IZ,24) + CARAY(IXY,IZ,22)
         DOC_DDA(IXY,IZ) = DOC_DDA(IXY,IZ) + DOC
         TOC_DDA(IXY,IZ) = TOC_DDA(IXY,IZ) + POC + DOC
	END DO
       END DO	 
!$doacross local(iz,ixy),
!$& share(sal_dmin,phyt1_dmin,phyt2_dmin,phyt3_dmin),
!$& share(bsi_dmin,dsi_dmin,tam_dmin,cchl1_dmin,cchl2_dmin,cchl3_dmin),
!$& share(chla1_dmin,chla2_dmin,chla3_dmin)
       DO IZ=1,NZ
        DO IXY=1,M
!JQI         SAL_DMIN(IXY,IZ) =
!JQI     .          AMIN1(SAL_DMIN(IXY,IZ),SAL(IXY,IZ))
         SCRATCH_KIN(IXY,IZ,12) =                             &
                AMIN1(SCRATCH_KIN(IXY,IZ,12),CARAY(IXY,IZ,1))
!JQI         PHYT1_DMIN(IXY,IZ) =
!JQI     .          AMIN1(PHYT1_DMIN(IXY,IZ),PHYT1(IXY,IZ))
!JQI         PHYT2_DMIN(IXY,IZ) =
!JQI     .          AMIN1(PHYT2_DMIN(IXY,IZ),PHYT2(IXY,IZ))
!JQI         PHYT3_DMIN(IXY,IZ) =
!JQI     .          AMIN1(PHYT3_DMIN(IXY,IZ),PHYT3(IXY,IZ))
         PHYT1_DMIN(IXY,IZ) =                                 &
                AMIN1(PHYT1_DMIN(IXY,IZ),CARAY(IXY,IZ,2))
         PHYT2_DMIN(IXY,IZ) =                                 &
                AMIN1(PHYT2_DMIN(IXY,IZ),CARAY(IXY,IZ,3))
         PHYT3_DMIN(IXY,IZ) =                                 &
                AMIN1(PHYT3_DMIN(IXY,IZ),CARAY(IXY,IZ,4))
!JQI         BSI_DMIN(IXY,IZ) =
!JQI     .          AMIN1(BSI_DMIN(IXY,IZ),BSI(IXY,IZ))
         BSI_DMIN(IXY,IZ) =                                   &
                AMIN1(BSI_DMIN(IXY,IZ),CARAY(IXY,IZ,16))
!JQI         DSI_DMIN(IXY,IZ) =
!JQI     .          AMIN1(DSI_DMIN(IXY,IZ),DSI(IXY,IZ))
         DSI_DMIN(IXY,IZ) =                                   &
                AMIN1(DSI_DMIN(IXY,IZ),CKINARRAY(IXY,IZ,3))
         CCHL1_DMIN(IXY,IZ) =                                 &
                AMIN1(CCHL1_DMIN(IXY,IZ),CCHL1S(IXY,IZ))
         CCHL2_DMIN(IXY,IZ) =                                 &
                AMIN1(CCHL2_DMIN(IXY,IZ),CCHL2S(IXY,IZ))
         CCHL3_DMIN(IXY,IZ) =                                 &
                AMIN1(CCHL3_DMIN(IXY,IZ),CCHL3S(IXY,IZ))
!JQI         CHLA1_DMIN(IXY,IZ) = AMIN1(CHLA1_DMIN(IXY,IZ),
!JQI     .          1000.*PHYT1(IXY,IZ)/(CCHL1S(IXY,IZ)+1.0E-4))
!JQI         CHLA2_DMIN(IXY,IZ) = AMIN1(CHLA2_DMIN(IXY,IZ),
!JQI     .          1000.*PHYT2(IXY,IZ)/(CCHL2S(IXY,IZ)+1.0E-4))
!JQI         CHLA3_DMIN(IXY,IZ) = AMIN1(CHLA3_DMIN(IXY,IZ),
!JQI     .          1000.*PHYT3(IXY,IZ)/(CCHL3S(IXY,IZ)+1.0E-4))
         CHLA1_DMIN(IXY,IZ) = AMIN1(CHLA1_DMIN(IXY,IZ),        &
                1000.*CARAY(IXY,IZ,2)/(CCHL1S(IXY,IZ)+1.0E-4))
         CHLA2_DMIN(IXY,IZ) = AMIN1(CHLA2_DMIN(IXY,IZ),        &
                1000.*CARAY(IXY,IZ,3)/(CCHL2S(IXY,IZ)+1.0E-4))
         CHLA3_DMIN(IXY,IZ) = AMIN1(CHLA3_DMIN(IXY,IZ),        &
                1000.*CARAY(IXY,IZ,4)/(CCHL3S(IXY,IZ)+1.0E-4))
        END DO
       END DO	
!$doacross local(iz,ixy,pop,dop,tp) ,
!$& share(pop_dmin,dop_dmin,tp_dmin,dpo4_dmin)
!$& share(pop_dmax,dop_dmax,tp_dmax,dpo4_dmax)
       DO IZ=1,NZ
        DO IXY=1,M
!JQI         POP = PCRB1(IXY,IZ)*PHYT1(IXY,IZ) +
!JQI     .         PCRB2(IXY,IZ)*PHYT2(IXY,IZ) +
!JQI     .         PCRB3(IXY,IZ)*PHYT3(IXY,IZ) +
!JQI     .         RPOP(IXY,IZ) + LPOP(IXY,IZ)
         POP = PCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + PCRB2(IXY,IZ)*CARAY(IXY,IZ,3) + &
               PCRB3(IXY,IZ)*CARAY(IXY,IZ,4) + CARAY(IXY,IZ,5) + CARAY(IXY,IZ,6)
         POP_DMIN(IXY,IZ) = AMIN1(POP_DMIN(IXY,IZ),POP)
         POP_DMAX(IXY,IZ) = AMAX1(POP_DMAX(IXY,IZ),POP)
!JQI         DOP = RDOP(IXY,IZ) + LDOP(IXY,IZ)
         DOP = CARAY(IXY,IZ,7) + CARAY(IXY,IZ,8)
         DOP_DMIN(IXY,IZ) = AMIN1(DOP_DMIN(IXY,IZ),DOP)
         DOP_DMAX(IXY,IZ) = AMAX1(DOP_DMAX(IXY,IZ),DOP)
!JQI         DPO4_DMIN(IXY,IZ) =
!JQI     .        AMIN1(DPO4_DMIN(IXY,IZ),DPO4(IXY,IZ))
!JQI         DPO4_DMAX(IXY,IZ) =
!JQI     .        AMAX1(DPO4_DMAX(IXY,IZ),DPO4(IXY,IZ))
!JQI         TP = POP + DOP + DPO4(IXY,IZ)
         DPO4_DMIN(IXY,IZ) = AMIN1(DPO4_DMIN(IXY,IZ),CKINARRAY(IXY,IZ,1))
         DPO4_DMAX(IXY,IZ) = AMAX1(DPO4_DMAX(IXY,IZ),CKINARRAY(IXY,IZ,1))
         TP = POP + DOP + CKINARRAY(IXY,IZ,1)
         TP_DMIN(IXY,IZ) = AMIN1(TP_DMIN(IXY,IZ),TP)
         TP_DMAX(IXY,IZ) = AMAX1(TP_DMAX(IXY,IZ),TP)
	END DO
       END DO	 
!$doacross local(iz,iy,ix,pon,don,tn) ,
!$& share(pon_dmin,don_dmin,tn_dmin,dnh4_dmin,no23_dmin)
!$& share(pon_dmax,don_dmax,tn_dmax,dnh4_dmax,no23_dmax)
       DO IZ=1,NZ
        DO IXY=1,M
!JQI         PON = NCRB1(IXY,IZ)*PHYT1(IXY,IZ) +
!JQI     .         NCRB2(IXY,IZ)*PHYT2(IXY,IZ) +
!JQI     .         NCRB3(IXY,IZ)*PHYT3(IXY,IZ) +
!JQI     .         RPON(IXY,IZ) + LPON(IXY,IZ)
         PON = NCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + NCRB2(IXY,IZ)*CARAY(IXY,IZ,3) + &
               NCRB3(IXY,IZ)*CARAY(IXY,IZ,4) + CARAY(IXY,IZ,10) + CARAY(IXY,IZ,11)
         PON_DMIN(IXY,IZ) = AMIN1(PON_DMIN(IXY,IZ),PON)
         PON_DMAX(IXY,IZ) = AMAX1(PON_DMAX(IXY,IZ),PON)
!JQI         DON = RDON(IXY,IZ) + LDON(IXY,IZ)
         DON = CARAY(IXY,IZ,12) + CARAY(IXY,IZ,13)
         DON_DMIN(IXY,IZ) = AMIN1(DON_DMIN(IXY,IZ),DON)
         DON_DMAX(IXY,IZ) = AMAX1(DON_DMAX(IXY,IZ),DON)
!JQI         DNH4_DMIN(IXY,IZ) =
!JQI     .        AMIN1(DNH4_DMIN(IXY,IZ),DNH4(IXY,IZ))
         DNH4_DMIN(IXY,IZ) = AMIN1(DNH4_DMIN(IXY,IZ),CKINARRAY(IXY,IZ,2))
!JQI         DNH4_DMAX(IXY,IZ) =
!JQI     .        AMAX1(DNH4_DMAX(IXY,IZ),DNH4(IXY,IZ))
         DNH4_DMAX(IXY,IZ) = AMAX1(DNH4_DMAX(IXY,IZ),CKINARRAY(IXY,IZ,2))
!JQI         NO23_DMIN(IXY,IZ) =
!JQI     .        AMIN1(NO23_DMIN(IXY,IZ),NO23(IXY,IZ))
         NO23_DMIN(IXY,IZ) = AMIN1(NO23_DMIN(IXY,IZ),CARAY(IXY,IZ,15))
!JQI         NO23_DMAX(IXY,IZ) =
!JQI     .        AMAX1(NO23_DMAX(IXY,IZ),NO23(IXY,IZ))
         NO23_DMAX(IXY,IZ) = AMAX1(NO23_DMAX(IXY,IZ),CARAY(IXY,IZ,15))
!JQI         TN = PON + DON + DNH4(IXY,IZ) + NO23(IXY,IZ)
         TN = PON + DON + CKINARRAY(IXY,IZ,2) + CARAY(IXY,IZ,15)
         TN_DMIN(IXY,IZ) = AMIN1(TN_DMIN(IXY,IZ),TN)
         TN_DMAX(IXY,IZ) = AMAX1(TN_DMAX(IXY,IZ),TN)
	END DO
       END DO	 
!$doacross local(iz,ixy,poc,doc,toc) ,
!$& share(poc_dmin,doc_dmin,toc_dmin)
!$& share(poc_dmax,doc_dmax,toc_dmax)
       DO IZ=1,NZ
        DO IXY=1,M
!JQI         POC = RPOC(IXY,IZ) + LPOC(IXY,IZ) + REPOC(IXY,IZ)
!JQI     .       + PHYT1(IXY,IZ) + PHYT2(IXY,IZ)+ PHYT3(IXY,IZ)
         POC = CARAY(IXY,IZ,18) + CARAY(IXY,IZ,19) + CARAY(IXY,IZ,23)  &
             + CARAY(IXY,IZ,2) + CARAY(IXY,IZ,3)+ CARAY(IXY,IZ,4)
         POC_DMIN(IXY,IZ) = AMIN1(POC_DMIN(IXY,IZ),POC)
         POC_DMAX(IXY,IZ) = AMAX1(POC_DMAX(IXY,IZ),POC)
!JQI         DOC = RDOC(IXY,IZ) + LDOC(IXY,IZ)
!JQI     .       + REDOC(IXY,IZ) + EXDOC(IXY,IZ)
         DOC = CARAY(IXY,IZ,20) + CARAY(IXY,IZ,21)       &
             + CARAY(IXY,IZ,24) + CARAY(IXY,IZ,22)
         DOC_DMIN(IXY,IZ) = AMIN1(DOC_DMIN(IXY,IZ),DOC)
         DOC_DMAX(IXY,IZ) = AMAX1(DOC_DMAX(IXY,IZ),DOC)
         TOC_DMIN(IXY,IZ) = AMIN1(TOC_DMIN(IXY,IZ),POC+DOC)
         TOC_DMAX(IXY,IZ) = AMAX1(TOC_DMAX(IXY,IZ),POC+DOC)
	END DO
       END DO	 
!$doacross local(iz,ixy) , share(o2eq_dmin,do_dmin),
!$& share(hydsal_dmin,hydtemp_dmin)
       DO IZ=1,NZ
        DO IXY=1,M
!JQI         O2EQ_DMIN(IXY,IZ) =
!JQI     .        AMIN1(O2EQ_DMIN(IXY,IZ),O2EQ(IXY,IZ))
         O2EQ_DMIN(IXY,IZ) = AMIN1(O2EQ_DMIN(IXY,IZ),CARAY(IXY,IZ,25))
!JQI         DO_DMIN(IXY,IZ) =
!JQI     .        AMIN1(DO_DMIN(IXY,IZ),DO(IXY,IZ))
         DO_DMIN(IXY,IZ) = AMIN1(DO_DMIN(IXY,IZ),CARAY(IXY,IZ,26))
         HYDSAL_DMIN(IXY,IZ) = AMIN1(HYDSAL_DMIN(IXY,IZ),HYDSAL(IXY,IZ))
         HYDTEMP_DMIN(IXY,IZ) = AMIN1(HYDTEMP_DMIN(IXY,IZ),HYDTEMP(IXY,IZ))
        END DO
       END DO	
!$doacross local(iz,ixy) ,
!$& share(sal_dmax,phyt1_dmax,phyt2_dmax,phyt3_dmax),
!$& share(bsi_dmax,dsi_dmax,tam_dmax,cchl1_dmax,cchl2_dmax,cchl3_dmax),
!$& share(chla1_dmax,chla2_dmax,chla3_dmax)
       DO IZ=1,NZ
        DO IXY=1,M
!JQI         SAL_DMAX(IXY,IZ) =
!JQI     .       AMAX1(SAL_DMAX(IXY,IZ),SAL(IXY,IZ))
         SCRATCH_KIN(IXY,IZ,13) = AMAX1(SCRATCH_KIN(IXY,IZ,13),CARAY(IXY,IZ,1))
!JQI         PHYT1_DMAX(IXY,IZ) =
!JQI     .       AMAX1(PHYT1_DMAX(IXY,IZ),PHYT1(IXY,IZ))
!JQI         PHYT2_DMAX(IXY,IZ) =
!JQI     .       AMAX1(PHYT2_DMAX(IXY,IZ),PHYT2(IXY,IZ))
!JQI         PHYT3_DMAX(IXY,IZ) =
!JQI     .       AMAX1(PHYT3_DMAX(IXY,IZ),PHYT3(IXY,IZ))
         PHYT1_DMAX(IXY,IZ) = AMAX1(PHYT1_DMAX(IXY,IZ),CARAY(IXY,IZ,2))
         PHYT2_DMAX(IXY,IZ) = AMAX1(PHYT2_DMAX(IXY,IZ),CARAY(IXY,IZ,3))
         PHYT3_DMAX(IXY,IZ) = AMAX1(PHYT3_DMAX(IXY,IZ),CARAY(IXY,IZ,4))
!JQI         BSI_DMAX(IXY,IZ) =
!JQI     .       AMAX1(BSI_DMAX(IXY,IZ),BSI(IXY,IZ))
         BSI_DMAX(IXY,IZ) = AMAX1(BSI_DMAX(IXY,IZ),CARAY(IXY,IZ,16))
!JQI         DSI_DMAX(IXY,IZ) =
!JQI     .       AMAX1(DSI_DMAX(IXY,IZ),DSI(IXY,IZ))
         DSI_DMAX(IXY,IZ) = AMAX1(DSI_DMAX(IXY,IZ),CKINARRAY(IXY,IZ,3))
         CCHL1_DMAX(IXY,IZ) = AMAX1(CCHL1_DMAX(IXY,IZ),CCHL1S(IXY,IZ))
         CCHL2_DMAX(IXY,IZ) = AMAX1(CCHL2_DMAX(IXY,IZ),CCHL2S(IXY,IZ))
         CCHL3_DMAX(IXY,IZ) = AMAX1(CCHL3_DMAX(IXY,IZ),CCHL3S(IXY,IZ))
!JQI         CHLA1_DMAX(IXY,IZ) = AMAX1(CHLA1_DMAX(IXY,IZ),
!JQI     .       1000.*PHYT1(IXY,IZ)/(CCHL1S(IXY,IZ)+1.0E-4))
!JQI         CHLA2_DMAX(IXY,IZ) = AMAX1(CHLA2_DMAX(IXY,IZ),
 !JQI    .       1000.*PHYT2(IXY,IZ)/(CCHL2S(IXY,IZ)+1.0E-4))
!JQI         CHLA3_DMAX(IXY,IZ) = AMAX1(CHLA3_DMAX(IXY,IZ),
!JQI     .       1000.*PHYT3(IXY,IZ)/(CCHL3S(IXY,IZ)+1.0E-4))
         CHLA1_DMAX(IXY,IZ) = AMAX1(CHLA1_DMAX(IXY,IZ),       &
	                      1000.*CARAY(IXY,IZ,2)/(CCHL1S(IXY,IZ)+1.0E-4))
         CHLA2_DMAX(IXY,IZ) = AMAX1(CHLA2_DMAX(IXY,IZ),       &
                              1000.*CARAY(IXY,IZ,3)/(CCHL2S(IXY,IZ)+1.0E-4))
         CHLA3_DMAX(IXY,IZ) = AMAX1(CHLA3_DMAX(IXY,IZ),       &
                              1000.*CARAY(IXY,IZ,4)/(CCHL3S(IXY,IZ)+1.0E-4))
        END DO
       END DO	
!$doacross local(iz,ixy) , share(o2eq_dmax,do_dmax),
!$& share(hydsal_dmax,hydtemp_dmax)
       DO IZ=1,NZ
        DO IXY=1,M
!JQI         O2EQ_DMAX(IXY,IZ) =
!JQI     .        AMAX1(O2EQ_DMAX(IXY,IZ),O2EQ(IXY,IZ))
         O2EQ_DMAX(IXY,IZ) = AMAX1(O2EQ_DMAX(IXY,IZ),CARAY(IXY,IZ,25))
!JQI         DO_DMAX(IXY,IZ) =
!JQI     .        AMAX1(DO_DMAX(IXY,IZ),DO(IXY,IZ))
         DO_DMAX(IXY,IZ) = AMAX1(DO_DMAX(IXY,IZ),CARAY(IXY,IZ,26))
         HYDSAL_DMAX(IXY,IZ) = AMAX1(HYDSAL_DMAX(IXY,IZ),HYDSAL(IXY,IZ))
         HYDTEMP_DMAX(IXY,IZ) = AMAX1(HYDTEMP_DMAX(IXY,IZ),HYDTEMP(IXY,IZ))
        END DO
       END DO	
       IAVGDDCNTR = IAVGDDCNTR + 1
      ENDIF

!JQI      IF(KEOPT == 4.) THEN
      IF(CONST(4) == 4.) THEN
       IF(TKE(IKE) <= TIME) THEN
        ALLOCATE(KEBASE_TMP(NXY))
        READ(28,'(8F10.0)',ERR=910)  (KEBASE_TMP(IXY),IXY=1,NXY)
    
        IF(SERIAL)THEN
         DO IXY = 1,NXY
	  KEBASE(IXY) = KEBASE_TMP(IXY)
	 END DO
        END IF	 
# if defined (MULTIPROCESSOR)
        IF(PAR)THEN
         DO IXY=1,M
          KEBASE(IXY) = KEBASE_TMP(NGID(IXY)) 
	 END DO
	 DO IXY=1,NHN
	  KEBASE(IXY+M) = KEBASE_TMP(HN_LST(IXY))
         END DO
        END IF	
# endif
             	
        IF(MSR) WRITE(OUT,1155) TKE(ITEMP)
        IF(MSR) WRITE(OUT,1156)  (KEBASE_TMP(IXY),IXY=1,NXY)
        DEALLOCATE(KEBASE_TMP) 

        IKE=IKE+1
       ENDIF
      ENDIF

!
!        SYSTEM 1 - SALINITY
!

!JQI      CDSAL = 0.0
      !CDARAY(:,:,1) = 0.0

!        PUT ECOM COMPUTED SALINITY AT BOUNDARY
      DO I=1,NOBCALL
       IXY = IBCALL(1,I)
       IZ  = IBCALL(2,I)
       CARAY(IXY,IZ,1) = HYDSAL(IXY,IZ) 
       BBC(I,1) = HYDSAL(IXY,IZ)
      END DO
      CARAY(:,:,1) = HYDSAL(:,:)  !Tian use FVCOM predcited Salinity 
!
!             SYSTEMS 2-4 - PHYTOPLANKTON
!
!JQI      IF(AGMOPT == 0) THEN
 !lz     if(msr)print*,"CONST(1)= ",CONST(1)
      IF(CONST(1) == 0) THEN
!JQI       CALL STD_EUTRO_MAIN
       CALL INIT_STD_EUTRO(2)
!JQI      ELSEIF(AGMOPT == 1) THEN
      ELSEIF(CONST(1) == 1) THEN
       CALL LC_EUTRO_MAIN
      ELSE
!JQI       IF(MSR) WRITE(OUT,9000)   AGMOPT
       IF(MSR) WRITE(OUT,9000)   CONST(1)
!       CALL EXIT
       CALL PSTOP('eutro1836 ')
      ENDIF

!
!             SYSTEMS 5-9 - PHOSPHOROUS 
!

!$doacross local(iz,iy,ix,sard,term,sk57,sk68,sk710,sk89)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) > 0.) THEN

!        Algal Respiration and Death
         SARD = (PCRB1(IXY,IZ)*DPP1(IXY,IZ) + PCRB2(IXY,IZ)*DPP2(IXY,IZ) &
               + PCRB3(IXY,IZ)*DPP3(IXY,IZ))
         TERM = XEMPRC(IXY,IZ)

!        RPOP - REFRACTORY PARTICULATE ORGANIC PHOSPHORUS
!                 Sources                         Sinks
!           Algal Resp + Death            Mineralization to RDOP
!JQI         SK57 = K57CT(ISTP20(IXY,IZ))*RPOP(IXY,IZ)*TERM
         SK57 = K57CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,5)*TERM

!JQI         CDRPOP(IXY,IZ) = FRPOP*SARD - SK57
         CDARAY(IXY,IZ,5) = CONST(106)*SARD - SK57
 
!        LPOP - LABILE PARTICULATE ORGANIC PHOSPHORUS
!                 Sources                         Sinks
!           Algal Resp + Death            Mineralization to LDOP
!JQI         SK68 = K68CT(ISTP20(IXY,IZ))*LPOP(IXY,IZ)*TERM
         SK68 = K68CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,6)*TERM

!JQI         CDLPOP(IXY,IZ) = FLPOP*SARD - SK68
         CDARAY(IXY,IZ,6) = CONST(107)*SARD - SK68
 
!        RDOP - REFRACTORY DISSOLVED ORGANIC PHOSPHORUS
!                 Sources                         Sinks
!           Algal Resp + Death            Mineralization to PO4
!           Mineralization from RDOP
!JQI         SK710 = K710CT(ISTP20(IXY,IZ))*RDOP(IXY,IZ)*TERM
         SK710 = K710CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,7)*TERM

!JQI         CDRDOP(IXY,IZ) = FRDOP*SARD + SK57 - SK710
         CDARAY(IXY,IZ,7) = CONST(108)*SARD + SK57 - SK710
 
!        LDOP - LABILE DISSOLVED ORGANIC PHOSPHORUS
!                 Sources                         Sinks
!           Algal Resp + Death            Mineralization to PO4
!           Mineralization from LPOP
!JQI         SK89 = K89CT(ISTP20(IXY,IZ))*LDOP(IXY,IZ)*TERM
         SK89 = K89CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,8)*TERM

!JQI         CDLDOP(IXY,IZ) = FLDOP*SARD + SK68 - SK89
         CDARAY(IXY,IZ,8) = CONST(109)*SARD + SK68 - SK89
 
!        PO4T - Total Dissolved Inorganic Phosphorus
!                 Sources                         Sinks
!           Mineralization from RDOP      Algal Resp + Death Going
!           Mineralization from LDOP          to Organic Pools
!     (Note: Algal uptake and release of PO4 represent an exchange of
!            fractions rather than a source or sink of PO4, therefore
!            no direct algal-related source/sink terms are included in
!            the PO4T equation.)
!     SK8P = PCRB1(IX,IY,IZ)*(1.-FLOCEX)*GPP1(IX,IY,IZ)
!    .     + PCRB2(IX,IY,IZ)*(1.-FLOCEX)*GPP2(IX,IY,IZ)
!    .     + PCRB3(IX,IY,IZ)*(1.-FLOCEX)*GPP3(IX,IY,IZ)

!JQI         CDPO4T(IXY,IZ) = SK710 + SK89 - (1.-FPO4)*SARD
         CDARAY(IXY,IZ,9) = SK710 + SK89 - (1.-CONST(110))*SARD

        END IF
       END DO
      END DO

      IF(IDISK == 2 .OR. IDISK == 3) THEN
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
         SARD = (PCRB1(IXY,IZ)*DPP1(IXY,IZ) + PCRB2(IXY,IZ)*DPP2(IXY,IZ) &
               + PCRB3(IXY,IZ)*DPP3(IXY,IZ))
         TERM = XEMPRC(IXY,IZ)
!JQI         SK57 = K57CT(ISTP20(IXY,IZ))*RPOP(IXY,IZ)*TERM
         SK57 = K57CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,5)*TERM
!JQI         CALL RCAWBUF(5,RPOP(IXY,IZ),FRPOP*SARD,SK57,
!JQI     .        PCRB1(IXY,IZ),PCRB2(IXY,IZ))
        ! CALL RCAWBUF(5,CARAY(IXY,IZ,5),CONST(106)*SARD,SK57,PCRB1(IXY,IZ),PCRB2(IXY,IZ))
        ELSE
        ! CALL RCAWBUF(5,RPOP_DDA(IXY,IZ)/IAVGDDCNTR,    &
        !      POP_DMIN(IXY,IZ),POP_DMAX(IXY,IZ),PCRB1(IXY,IZ),PCRB2(IXY,IZ))
        ENDIF
       END DO
      
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
         SARD = (PCRB1(IXY,IZ)*DPP1(IXY,IZ) + PCRB2(IXY,IZ)*DPP2(IXY,IZ) &
               + PCRB3(IXY,IZ)*DPP3(IXY,IZ))
         TERM = XEMPRC(IXY,IZ)
!JQI         SK68 = K68CT(ISTP20(IXY,IZ))*LPOP(IXY,IZ)*TERM
         SK68 = K68CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,6)*TERM
!JQI         TPP = PCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .       + PCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .       + PCRB3(IXY,IZ)*PHYT3(IXY,IZ)
!JQI     .       + RPOP(IXY,IZ) + LPOP(IXY,IZ)
!JQI     .       + PO4T(IXY,IZ) - DPO4(IXY,IZ)
         TPP = PCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + PCRB2(IXY,IZ)*CARAY(IXY,IZ,3) &
             + PCRB3(IXY,IZ)*CARAY(IXY,IZ,4) + CARAY(IXY,IZ,5) + CARAY(IXY,IZ,6) &
             + CARAY(IXY,IZ,9) - CKINARRAY(IXY,IZ,1)
!JQI         CALL RCAWBUF(6,LPOP(IXY,IZ),FLPOP*SARD,SK68,TPP,
!JQI     .        XEMPRC(IXY,IZ))
        ! CALL RCAWBUF(6,CARAY(IXY,IZ,6),CONST(107)*SARD,SK68,TPP,XEMPRC(IXY,IZ))
        ELSE
        ! CALL RCAWBUF(6,LPOP_DDA(IXY,IZ)/IAVGDDCNTR,                    &
        !    POP_DDA(IXY,IZ)/IAVGDDCNTR,DOP_DDA(IXY,IZ)/IAVGDDCNTR,      &
        !    DPO4_DDA(IXY,IZ)/IAVGDDCNTR,TP_DDA(IXY,IZ)/IAVGDDCNTR)
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        EZPRNT = RZ(IXY,IZ+1)*0.5*(DZ(IXY,IZ+1)+DZ(IXY,IZ))*HBAR(IXY)/XAZ(IXY)
        IF(IDDOPT == 0) THEN
         SARD = (PCRB1(IXY,IZ)*DPP1(IXY,IZ) + PCRB2(IXY,IZ)*DPP2(IXY,IZ)  &
               + PCRB3(IXY,IZ)*DPP3(IXY,IZ))
         TERM = XEMPRC(IXY,IZ)
!JQI         SK710 = K710CT(ISTP20(IXY,IZ))*RDOP(IXY,IZ)*TERM
         SK710 = K710CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,7)*TERM
!JQI         CALL RCAWBUF(7,RDOP(IXY,IZ),FRDOP*SARD,SK710,TIME,EZPRNT)
       !  CALL RCAWBUF(7,CARAY(IXY,IZ,7),CONST(108)*SARD,SK710,TIME,EZPRNT)
        ELSE
        ! CALL RCAWBUF(7,RDOP_DDA(IXY,IZ)/IAVGDDCNTR,        &
        !      DOP_DMIN(IXY,IZ),DOP_DMAX(IXY,IZ),TIME,EZPRNT)
        ENDIF
       END DO

       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
!JQI         TDP = RDOP(IXY,IZ) + LDOP(IXY,IZ) + DPO4(IXY,IZ)
         TDP = CARAY(IXY,IZ,7) + CARAY(IXY,IZ,8) + CKINARRAY(IXY,IZ,1)
!JQI         DOP = RDOP(IXY,IZ) + LDOP(IXY,IZ)
         DOP = CARAY(IXY,IZ,7) + CARAY(IXY,IZ,8)
         SARD = (PCRB1(IXY,IZ)*DPP1(IXY,IZ) + PCRB2(IXY,IZ)*DPP2(IXY,IZ) &
               + PCRB3(IXY,IZ)*DPP3(IXY,IZ))
         TERM = XEMPRC(IXY,IZ)
!JQI         SK89 = K89CT(ISTP20(IXY,IZ))*LDOP(IXY,IZ)*TERM
         SK89 = K89CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,8)*TERM
!JQI         CALL RCAWBUF(8,LDOP(IXY,IZ),FLDOP*SARD,SK89,DOP,TDP)
       !  CALL RCAWBUF(8,CARAY(IXY,IZ,8),CONST(109)*SARD,SK89,DOP,TDP)
        ELSE
       !  CALL RCAWBUF(8,LDOP_DDA(IXY,IZ)/IAVGDDCNTR,      &
       !       CCHL1_DMIN(IXY,IZ),CCHL1_DMAX(IXY,IZ),      &
       !       CCHL2_DMIN(IXY,IZ),CCHL2_DMAX(IXY,IZ))
        ENDIF
       END DO

       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
!JQI         TPP = PCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .       + PCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .       + PCRB3(IXY,IZ)*PHYT3(IXY,IZ)
!JQI     .       + RPOP(IXY,IZ) + LPOP(IXY,IZ)
!JQI     .       + PO4T(IXY,IZ) - DPO4(IXY,IZ)
         TPP = PCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + PCRB2(IXY,IZ)*CARAY(IXY,IZ,3) &
             + PCRB3(IXY,IZ)*CARAY(IXY,IZ,4) + CARAY(IXY,IZ,5) + CARAY(IXY,IZ,6) &
             + CARAY(IXY,IZ,9) - CKINARRAY(IXY,IZ,1)
!JQI         TDP = RDOP(IXY,IZ) + LDOP(IXY,IZ) + DPO4(IXY,IZ)
         TDP = CARAY(IXY,IZ,7) + CARAY(IXY,IZ,8) + CKINARRAY(IXY,IZ,1)
         TP = TPP + TDP
         SARD = (PCRB1(IXY,IZ)*DPP1(IXY,IZ) + PCRB2(IXY,IZ)*DPP2(IXY,IZ) &
               + PCRB3(IXY,IZ)*DPP3(IXY,IZ))
         TERM = XEMPRC(IXY,IZ)
!JQI         SK8P = PCRB1(IXY,IZ)*(1.-FLOCEX)*GPP1(IXY,IZ)
!JQI     .        + PCRB2(IXY,IZ)*(1.-FLOCEX)*GPP2(IXY,IZ)
!JQI     .        + PCRB3(IXY,IZ)*(1.-FLOCEX)*GPP3(IXY,IZ)
         SK8P = PCRB1(IXY,IZ)*(1.-CONST(156))*GPP1(IXY,IZ)        &
              + PCRB2(IXY,IZ)*(1.-CONST(156))*GPP2(IXY,IZ)        &
              + PCRB3(IXY,IZ)*(1.-CONST(156))*GPP3(IXY,IZ)    
!JQI         IF(FSM(IXY) < 0.) DPO4(IXY,IZ) = PO4T(IXY,IZ)
!JQI     .            -(PCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .            +PCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .            +PCRB3(IXY,IZ)*PHYT3(IXY,IZ))
         IF(FSM(IXY) < 0.) CKINARRAY(IXY,IZ,1) = CARAY(IXY,IZ,9)   &
                  -(PCRB1(IXY,IZ)*CARAY(IXY,IZ,2)                  &
                  +PCRB2(IXY,IZ)*CARAY(IXY,IZ,3)                   &
                  +PCRB3(IXY,IZ)*CARAY(IXY,IZ,4))
!JQI         CALL RCAWBUF(9,PO4T(IXY,IZ),DPO4(IXY,IZ),FPO4*SARD,SK8P,
!JQI     .        TP)
       !  CALL RCAWBUF(9,CARAY(IXY,IZ,9),CKINARRAY(IXY,IZ,1),CONST(110)*SARD,SK8P,TP)
        ELSE
       !  CALL RCAWBUF(9,PO4T_DDA(IXY,IZ)/IAVGDDCNTR,             &
        !      DPO4_DMIN(IXY,IZ),DPO4_DMAX(IXY,IZ),TP_DMIN(IXY,IZ),TP_DMAX(IXY,IZ))
        ENDIF
       END DO
      ENDIF

!
!             SYSTEMS 10-15 - NITROGEN
!

!$doacross local(iz,iy,ix,sard,term,sk1012,sk1113,sk1214,sk1314)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) > 0.) THEN

!        Algal Resp and Death
         SARD =  NCRB1(IXY,IZ)*DPP1(IXY,IZ) + NCRB2(IXY,IZ)*DPP2(IXY,IZ) &
               + NCRB3(IXY,IZ)*DPP3(IXY,IZ)	       
	       
         TERM = XEMPRC(IXY,IZ)

!        RPON - REFRACTORY PARTICULATE ORGANIC NITROGEN
!                 Sources                         Sinks
!           Algal Resp + Death            Mineralization to RDON
!JQI         SK1012 = K1012CT(ISTP20(IXY,IZ))*RPON(IXY,IZ)*TERM
         SK1012 = K1012CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,10)*TERM

!JQI         CDRPON(IXY,IZ) = FRPON*SARD - SK1012
         CDARAY(IXY,IZ,10) = CONST(111)*SARD - SK1012
 
!        LPON - LABILE PARTICULATE ORGANIC NITROGEN
!                 Sources                         Sinks
!           Algal Resp + Death            Mineralization to LDON
!JQI         SK1113 = K1113CT(ISTP20(IXY,IZ))*LPON(IXY,IZ)*TERM
         SK1113 = K1113CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,11)*TERM

!JQI         CDLPON(IXY,IZ) = FLPON*SARD - SK1113
         CDARAY(IXY,IZ,11) = CONST(112)*SARD - SK1113
 
!        RDON - REFRACTORY DISSOLVED ORGANIC NITROGEN
!                 Sources                         Sinks
!           Algal Resp + Death            Mineralization to NH4
!JQI         SK1214 = K1214CT(ISTP20(IXY,IZ))*RDON(IXY,IZ)*TERM
         SK1214 = K1214CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,12)*TERM

!JQI         CDRDON(IXY,IZ) = FRDON*SARD + SK1012 - SK1214
         CDARAY(IXY,IZ,12) = CONST(113)*SARD + SK1012 - SK1214
 
!        LDON - LABILE DISSOLVED ORGANIC NITROGEN
!                 Sources                         Sinks
!           Algal Resp + Death            Mineralization to NH4
!           Mineralization from LPON
!JQI         SK1314 = K1314CT(ISTP20(IXY,IZ))*LDON(IXY,IZ)*TERM
         SK1314 = K1314CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,13)*TERM

!JQI         CDLDON(IXY,IZ) = FLDON*SARD + SK1113 - SK1314
         CDARAY(IXY,IZ,13) = CONST(114)*SARD + SK1113 - SK1314
 
!        AMMONIA
!                 Sources                         Sinks
!           Mineralization from LRON      Algal Resp + Death Going
!           Mineralization from LDON          to Organic Pools
!           Algal Uptake of NO23          Nitrification
!     (Note: Algal uptake and release of NH4 represent an exchange of
!            fractions rather than a source or sink of NH4, therefore
!            no direct source/sink terms are included in TNH4 equation.)

!JQI         TERM = (1.-FLOCEX)
         TERM = (1.-CONST(156))
!     SR13P = FNH4*SARD
!     SK13P = PNH41(IX,IY,IZ)*NCRB1(IX,IY,IZ)*TERM*GPP1(IX,IY,IZ)
!    .      + PNH42(IX,IY,IZ)*NCRB2(IX,IY,IZ)*TERM*GPP2(IX,IY,IZ)
!    .      + PNH43(IX,IY,IZ)*NCRB3(IX,IY,IZ)*TERM*GPP3(IX,IY,IZ)

!JQI         SK1415(IXY,IZ) = K1415CT(ISTP20(IXY,IZ))
!JQI     .                  *DNH4(IXY,IZ)*DO(IXY,IZ)/(KNIT+DO(IXY,IZ))
         SK1415(IXY,IZ) = K1415CT(ISTP20(IXY,IZ))*CKINARRAY(IXY,IZ,2)*CARAY(IXY,IZ,26) &
                        /(CONST(138)+CARAY(IXY,IZ,26))
         IF(HYDTEMP(IXY,IZ) <= 7.0) SK1415(IXY,IZ)=0.0

         SK15P(IXY,IZ) =                                            &
              (1.-PNH41(IXY,IZ))*NCRB1(IXY,IZ)*TERM*GPP1(IXY,IZ)    &
            + (1.-PNH42(IXY,IZ))*NCRB2(IXY,IZ)*TERM*GPP2(IXY,IZ)    &
            + (1.-PNH43(IXY,IZ))*NCRB3(IXY,IZ)*TERM*GPP3(IXY,IZ)

!JQI         CDNH4T(IXY,IZ) = SK1214 + SK1314 + SK15P(IXY,IZ)
!JQI     .            - (1.-FNH4)*SARD - SK1415(IXY,IZ)
         CDARAY(IXY,IZ,14) = SK1214 + SK1314 + SK15P(IXY,IZ)       &
                  - (1.-CONST(115))*SARD - SK1415(IXY,IZ)

!        NITRITE+NITRATE
!                 Sources                         Sinks
!           Nitrification                 Algal Uptake
!                                         Denitrification
!JQI         SK150(IXY,IZ) = K150CT(ISTP20(IXY,IZ))
!JQI     .                  *NO23(IXY,IZ)*KNO3/(KNO3+DO(IXY,IZ))
!JQI     .                  *LDOC(IXY,IZ)/(KMLDOC+LDOC(IXY,IZ))
         SK150(IXY,IZ) = K150CT(ISTP20(IXY,IZ))                    &
                        *CARAY(IXY,IZ,15)*CONST(141)               &
                        /(CONST(141)+CARAY(IXY,IZ,26))             &
                        *CARAY(IXY,IZ,21)/(CONST(152)+CARAY(IXY,IZ,21))

!JQI         CDNO23(IXY,IZ) = SK1415(IXY,IZ) - SK15P(IXY,IZ)
!JQI     .                 - SK150(IXY,IZ)
         CDARAY(IXY,IZ,15) = SK1415(IXY,IZ) - SK15P(IXY,IZ) - SK150(IXY,IZ)

!if(IZ.eq.10.and.NGID(IXY).eq.3920)write(86,'(A,10E10.2)')'NH4 eutro2144 ',TIME, &
!     SK1214,SK1314,K150CT(ISTP20(IXY,IZ)),SK15P(IXY,IZ),(1.-CONST(115)),SARD ,  &
!                  SK1415(IXY,IZ),CDARAY(IXY,IZ,14)/BVOL(IXY,IZ),CARAY(IXY,IZ,14)

        END IF
       END DO
      END DO

      IF(IDISK == 2 .OR. IDISK == 3) THEN
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
         SARD =  NCRB1(IXY,IZ)*DPP1(IXY,IZ) + NCRB2(IXY,IZ)*DPP2(IXY,IZ) &
               + NCRB3(IXY,IZ)*DPP3(IXY,IZ)
         TERM = XEMPRC(IXY,IZ)
!JQI         SK1012 = K1012CT(ISTP20(IXY,IZ))*RPON(IXY,IZ)*TERM
         SK1012 = K1012CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,10)*TERM
!JQI         CALL RCAWBUF(10,RPON(IXY,IZ),FRPON*SARD,SK1012,
!JQI     .        NCRB1(IXY,IZ),NCRB2(IXY,IZ))
       !  CALL RCAWBUF(10,CARAY(IXY,IZ,10),CONST(111)*SARD,SK1012,      &
       !       NCRB1(IXY,IZ),NCRB2(IXY,IZ))
        ELSE
       !  CALL RCAWBUF(10,RPON_DDA(IXY,IZ)/IAVGDDCNTR,          &
       !       PON_DMIN(IXY,IZ),PON_DMAX(IXY,IZ),NCRB1(IXY,IZ),NCRB2(IXY,IZ))
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
         SARD =  NCRB1(IXY,IZ)*DPP1(IXY,IZ) + NCRB2(IXY,IZ)*DPP2(IXY,IZ) &
               + NCRB3(IXY,IZ)*DPP3(IXY,IZ)
         TERM = XEMPRC(IXY,IZ)
!JQI         SK1113 = K1113CT(ISTP20(IXY,IZ))*LPON(IXY,IZ)*TERM
         SK1113 = K1113CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,11)*TERM
!JQI         DON = RDON(IXY,IZ) + LDON(IXY,IZ)
         DON = CARAY(IXY,IZ,12) + CARAY(IXY,IZ,13)
!JQI         TDN = DON + DNH4(IXY,IZ) + NO23(IXY,IZ)
         TDN = DON + CKINARRAY(IXY,IZ,2) + CARAY(IXY,IZ,15)
         SARD =  NCRB1(IXY,IZ)*DPP1(IXY,IZ) + NCRB2(IXY,IZ)*DPP2(IXY,IZ) &
               + NCRB3(IXY,IZ)*DPP3(IXY,IZ)
!JQI         CALL RCAWBUF(11,LPON(IXY,IZ),FLPON*SARD,SK1113,DON,TDN)
       !  CALL RCAWBUF(11,CARAY(IXY,IZ,11),CONST(112)*SARD,SK1113,DON,TDN)
        ELSE
       !  CALL RCAWBUF(11,LPON_DDA(IXY,IZ)/IAVGDDCNTR,                   &
       !       PON_DDA(IXY,IZ)/IAVGDDCNTR,DON_DDA(IXY,IZ)/IAVGDDCNTR,    &
       !       DNH4_DDA(IXY,IZ)/IAVGDDCNTR,TN_DDA(IXY,IZ)/IAVGDDCNTR)
        ENDIF
       END DO 
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
!JQI         TPN = NCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .       + NCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .       + NCRB3(IXY,IZ)*PHYT3(IXY,IZ)
!JQI     .       + RPON(IXY,IZ) + LPON(IXY,IZ) 
         TPN = NCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + NCRB2(IXY,IZ)*CARAY(IXY,IZ,3) &
             + NCRB3(IXY,IZ)*CARAY(IXY,IZ,4) + CARAY(IXY,IZ,10) + CARAY(IXY,IZ,11) 
         SARD = NCRB1(IXY,IZ)*DPP1(IXY,IZ) + NCRB2(IXY,IZ)*DPP2(IXY,IZ) &
              + NCRB3(IXY,IZ)*DPP3(IXY,IZ)
         TERM = XEMPRC(IXY,IZ)
!JQI         SK1214 = K1214CT(ISTP20(IXY,IZ))*RDON(IXY,IZ)*TERM
         SK1214 = K1214CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,12)*TERM
!JQI         TON = TPN + RDON(IXY,IZ) + LDON(IXY,IZ) 
         TON = TPN + CARAY(IXY,IZ,12) + CARAY(IXY,IZ,13) 
!JQI         CALL RCAWBUF(12,RDON(IXY,IZ),FRDON*SARD,SK1214,TPN,TON)
        ! CALL RCAWBUF(12,CARAY(IXY,IZ,12),CONST(113)*SARD,SK1214,TPN,TON)
        ELSE
        ! CALL RCAWBUF(12,RDON_DDA(IXY,IZ)/IAVGDDCNTR,                &
        !      CHLA1_DMIN(IXY,IZ),CHLA1_DMAX(IXY,IZ),                 &
        !      CHLA2_DMIN(IXY,IZ),CHLA2_DMAX(IXY,IZ))
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
         SARD =  NCRB1(IXY,IZ)*DPP1(IXY,IZ) + NCRB2(IXY,IZ)*DPP2(IXY,IZ) &
               + NCRB3(IXY,IZ)*DPP3(IXY,IZ)
         TERM = XEMPRC(IXY,IZ)
!JQI         SK1314 = K1314CT(ISTP20(IXY,IZ))*LDON(IXY,IZ)*TERM
         SK1314 = K1314CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,13)*TERM
!JQI         CALL RCAWBUF(13,LDON(IXY,IZ),FLDON*SARD,SK1314,
!JQI     .        PNH41(IXY,IZ),PNH42(IXY,IZ))
       !  CALL RCAWBUF(13,CARAY(IXY,IZ,13),CONST(114)*SARD,SK1314,    &
       !       PNH41(IXY,IZ),PNH42(IXY,IZ))
        ELSE
       !  CALL RCAWBUF(13,LDON_DDA(IXY,IZ)/IAVGDDCNTR,            &
       !       DON_DMIN(IXY,IZ),DON_DMAX(IXY,IZ),                 &
       !       PNH41(IXY,IZ),PNH42(IXY,IZ))
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
!JQI         TDN = RDON(IXY,IZ) + LDON(IXY,IZ) + DNH4(IXY,IZ)
!JQI     .       + NO23(IXY,IZ)
         TDN = CARAY(IXY,IZ,12) + CARAY(IXY,IZ,13) + CKINARRAY(IXY,IZ,2)   &
             + CARAY(IXY,IZ,15)
!JQI         DIN = DNH4(IXY,IZ) + NO23(IXY,IZ)
         DIN = CKINARRAY(IXY,IZ,2) + CARAY(IXY,IZ,15)
         SARD =  NCRB1(IXY,IZ)*DPP1(IXY,IZ) + NCRB2(IXY,IZ)*DPP2(IXY,IZ)   &
               + NCRB3(IXY,IZ)*DPP3(IXY,IZ)
!JQI         TERM = (1.-FLOCEX)
         TERM = (1.-CONST(156))
!JQI         SR13P = FNH4*SARD
         SR13P = CONST(115)*SARD
         SK13P = PNH41(IXY,IZ)*NCRB1(IXY,IZ)*TERM*GPP1(IXY,IZ)       &
               + PNH42(IXY,IZ)*NCRB2(IXY,IZ)*TERM*GPP2(IXY,IZ)       &
               + PNH43(IXY,IZ)*NCRB3(IXY,IZ)*TERM*GPP3(IXY,IZ)
!JQI         IF(FSM(IXY) <= 0.) DNH4(IXY,IZ) = NH4T(IXY,IZ)
!JQI     .          - (NCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .            +NCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .            +NCRB3(IXY,IZ)*PHYT3(IXY,IZ))
         IF(FSM(IXY) <= 0.) CKINARRAY(IXY,IZ,2) = CARAY(IXY,IZ,14)   &
                - (NCRB1(IXY,IZ)*CARAY(IXY,IZ,2)                     &
                  +NCRB2(IXY,IZ)*CARAY(IXY,IZ,3)                     &
                  +NCRB3(IXY,IZ)*CARAY(IXY,IZ,4))
!JQI         CALL RCAWBUF(14,NH4T(IXY,IZ),DNH4(IXY,IZ),SR13P,
!JQI     .        SK1415(IXY,IZ),SK13P)
      !   CALL RCAWBUF(14,CARAY(IXY,IZ,14),CKINARRAY(IXY,IZ,2),SR13P, &
      !        SK1415(IXY,IZ),SK13P)
        ELSE
      !   CALL RCAWBUF(14,NH4T_DDA(IXY,IZ)/IAVGDDCNTR,          &
      !        DNH4_DMIN(IXY,IZ),DNH4_DMAX(IXY,IZ),             &
      !        SK1415(IXY,IZ),SK13P)
        ENDIF
       END DO 
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        SK15P(IXY,IZ) =                                             &
           (1.-PNH41(IXY,IZ))*NCRB1(IXY,IZ)*TERM*GPP1(IXY,IZ)       &
         + (1.-PNH42(IXY,IZ))*NCRB2(IXY,IZ)*TERM*GPP2(IXY,IZ)       &
         + (1.-PNH43(IXY,IZ))*NCRB3(IXY,IZ)*TERM*GPP3(IXY,IZ)
        IF(IDDOPT == 0) THEN
!JQI         TPN = NCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .       + NCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .       + NCRB3(IXY,IZ)*PHYT3(IXY,IZ)
!JQI     .       + RPON(IXY,IZ) + LPON(IXY,IZ) 
         TPN = NCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + NCRB2(IXY,IZ)*CARAY(IXY,IZ,3) &
             + NCRB3(IXY,IZ)*CARAY(IXY,IZ,4) + CARAY(IXY,IZ,10) + CARAY(IXY,IZ,11) 
!JQI         TDN = RDON(IXY,IZ) + LDON(IXY,IZ) + DNH4(IXY,IZ)
!JQI     .       + NO23(IXY,IZ)
         TDN = CARAY(IXY,IZ,12) + CARAY(IXY,IZ,13) + CKINARRAY(IXY,IZ,2)     &
             + CARAY(IXY,IZ,15)
!JQI         DIN = DNH4(IXY,IZ) + NO23(IXY,IZ)
         DIN = CKINARRAY(IXY,IZ,2) + CARAY(IXY,IZ,15)
         TN = TPN + TDN
!JQI         TERM = (1.-FLOCEX)
         TERM = (1.-CONST(156))
!JQI         CALL RCAWBUF(15,NO23(IXY,IZ),SK15P(IXY,IZ),
!JQI     .        SK150(IXY,IZ),DIN,TN)
     !    CALL RCAWBUF(15,CARAY(IXY,IZ,15),SK15P(IXY,IZ),SK150(IXY,IZ),DIN,TN)
        ELSE
     !    CALL RCAWBUF(15,NO23_DDA(IXY,IZ)/IAVGDDCNTR,      &
     !         NO23_DMIN(IXY,IZ),NO23_DMAX(IXY,IZ),TN_DMIN(IXY,IZ),TN_DMAX(IXY,IZ))
        ENDIF
       END DO
      ENDIF

!
!             SYSTEMS 16-17 - SILICA
!

!$doacross local(iz,ixy,sard,sk1617,sk17p)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) > 0.) THEN

!        Algal Resp and Death
         SARD =  SCRB1(IXY,IZ)*DPP1(IXY,IZ) + SCRB2(IXY,IZ)*DPP2(IXY,IZ) &
               + SCRB3(IXY,IZ)*DPP3(IXY,IZ)

!        BSI - BIOGENIC SILICA
!                 Sources                         Sinks
!           Algal Resp + Death            Mineralization to Avail Si
!JQI         SK1617 = K1617CT(ISTP20(IXY,IZ))
!JQI     .                            *BSI(IXY,IZ)*XEMPRC(IXY,IZ)
         SK1617 = K1617CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,16)*XEMPRC(IXY,IZ)

!JQI         CDBSI(IXY,IZ) = SARD - SK1617
         CDARAY(IXY,IZ,16) = SARD - SK1617
 
!        SIT - TOTAL SILICA
!                 Sources                         Sinks
!           Mineralization of BSi         Algal Resp + Death Going
!                                             to Organic Pools
!     (Note: Algal uptake and release of Si represent an exchange of
!            fractions rather than a source or sink of Si, therefore
!            no direct source/sink terms are included in TSi equation.)
!JQI         SK17P = SCRB1(IXY,IZ)*(1.-FLOCEX)*GPP1(IXY,IZ)
!JQI     .         + SCRB2(IXY,IZ)*(1.-FLOCEX)*GPP2(IXY,IZ)
!JQI     .         + SCRB3(IXY,IZ)*(1.-FLOCEX)*GPP3(IXY,IZ)
         SK17P = SCRB1(IXY,IZ)*(1.-CONST(156))*GPP1(IXY,IZ)       &
               + SCRB2(IXY,IZ)*(1.-CONST(156))*GPP2(IXY,IZ)       &
               + SCRB3(IXY,IZ)*(1.-CONST(156))*GPP3(IXY,IZ)

!JQI         CDSIT(IXY,IZ) = SK1617 - SARD
         CDARAY(IXY,IZ,17) = SK1617 - SARD
        END IF
	
!if(IZ.eq.30.and.NGID(IXY).eq.3920)write(85,'(A,10E10.2)')'SiO3 Terms ',TIME,SK1617,SARD, &
!       K1617CT(ISTP20(IXY,IZ)),ISTP20(IXY,IZ),HYDTEMP(IXY,IZ), &
!       XEMPRC(IXY,IZ),CDARAY(IXY,IZ,17)/BVOL(IXY,IZ),CARAY(IXY,IZ,17)

       END DO
      END DO

      IF(IDISK == 2 .OR. IDISK == 3) THEN
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        SARD =  SCRB1(IXY,IZ)*DPP1(IXY,IZ) + SCRB2(IXY,IZ)*DPP2(IXY,IZ)  &
              + SCRB3(IXY,IZ)*DPP3(IXY,IZ)
!JQI        SK1617 = K1617CT(ISTP20(IXY,IZ))
!JQI     .                            *BSI(IXY,IZ)*XEMPRC(IXY,IZ)
        SK1617 = K1617CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,16)*XEMPRC(IXY,IZ)
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(16,BSI(IXY,IZ),SARD,SK1617,SCRB1(IXY,IZ),
!JQI     .        SCRB2(IXY,IZ))
        ! CALL RCAWBUF(16,CARAY(IXY,IZ,16),SARD,SK1617,SCRB1(IXY,IZ),    &
        !      SCRB2(IXY,IZ))
        ELSE
        ! CALL RCAWBUF(16,BSI_DDA(IXY,IZ)/IAVGDDCNTR,            &
        !      BSI_DMIN(IXY,IZ),BSI_DMAX(IXY,IZ),SCRB1(IXY,IZ),SCRB2(IXY,IZ))
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
!JQI         TSI = BSI(IXY,IZ) + SCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .       + SCRB2(IXY,IZ)*PHYT2(IXY,IZ) 
!JQI     .       + SCRB3(IXY,IZ)*PHYT3(IXY,IZ) 
         TSI = CARAY(IXY,IZ,16) + SCRB1(IXY,IZ)*CARAY(IXY,IZ,2) &
             + SCRB2(IXY,IZ)*CARAY(IXY,IZ,3) + SCRB3(IXY,IZ)*CARAY(IXY,IZ,4) 
!JQI         SK17P = SCRB1(IXY,IZ)*(1.-FLOCEX)*GPP1(IXY,IZ)
!JQI     .         + SCRB2(IXY,IZ)*(1.-FLOCEX)*GPP2(IXY,IZ)
!JQI     .         + SCRB3(IXY,IZ)*(1.-FLOCEX)*GPP3(IXY,IZ)
         SK17P = SCRB1(IXY,IZ)*(1.-CONST(156))*GPP1(IXY,IZ)     &
               + SCRB2(IXY,IZ)*(1.-CONST(156))*GPP2(IXY,IZ)     &
               + SCRB3(IXY,IZ)*(1.-CONST(156))*GPP3(IXY,IZ)
!JQI         IF(FSM(IXY) < 0.) DSI(IXY,IZ) = SIT(IXY,IZ)
!JQI     .          - (SCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .            +SCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .            +SCRB3(IXY,IZ)*PHYT3(IXY,IZ))
         IF(FSM(IXY) < 0.) CKINARRAY(IXY,IZ,3) = CARAY(IXY,IZ,17)   &
                - (SCRB1(IXY,IZ)*CARAY(IXY,IZ,2)                    &
                  +SCRB2(IXY,IZ)*CARAY(IXY,IZ,3)                    &
                  +SCRB3(IXY,IZ)*CARAY(IXY,IZ,4))
!JQI         CALL RCAWBUF(17,SIT(IXY,IZ),DSI(IXY,IZ),SK17P,TSI,
!JQI     .        HBAR(IXY))
        ! CALL RCAWBUF(17,CARAY(IXY,IZ,17),CKINARRAY(IXY,IZ,3),SK17P,TSI,HBAR(IXY))
        ELSE
        ! CALL RCAWBUF(17,SIT_DDA(IXY,IZ)/IAVGDDCNTR,            &
        !      DSI_DDA(IXY,IZ)/IAVGDDCNTR,DSI_DMIN(IXY,IZ),      &
        !      DSI_DMAX(IXY,IZ),HBAR(IXY))
        ENDIF
       END DO
      ENDIF

!
!             SYSTEMS 18-24 - ORGANIC CARBON
!

!$doacross local(iz,ixy,term,sk1820,sk1921,sr23p)
!$share(botbod,botbodhs)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) > 0.) THEN

         TERM = XEMPRC(IXY,IZ)

!        RPOC - REFRACTORY PARTICULATE ORGANIC CARBON
!                 Sources                         Sinks
!              Grazed Algae               Hydrolysis to RDOC
!JQI         SK1820 = K1820CT(ISTP20(IXY,IZ))*RPOC(IXY,IZ)*TERM
         SK1820 = K1820CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,18)*TERM

!JQI         CDRPOC(IXY,IZ) = FRPOC*GRAZ(IXY,IZ) - SK1820
         CDARAY(IXY,IZ,18) = CONST(116)*GRAZ(IXY,IZ) - SK1820
 
!        LPOC - LABILE PARTICULATE ORGANIC CARBON
!                 Sources                         Sinks
!              Grazed Algae               Hydrolysis to LDOC
!JQI         SK1921 = K1921CT(ISTP20(IXY,IZ))*LPOC(IXY,IZ)*TERM
         SK1921 = K1921CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,19)*TERM

!JQI         CDLPOC(IXY,IZ) = FLPOC*GRAZ(IXY,IZ) - SK1921
         CDARAY(IXY,IZ,19) = CONST(117)*GRAZ(IXY,IZ) - SK1921
 
!        RDOC - REFRACTORY DISSOLVED ORGANIC CARBON
!                 Sources                         Sinks
!              Grazed Algae                     Oxidation
!              From RPOC
!JQI         SK200(IXY,IZ) = K200CT(ISTP20(IXY,IZ))*RDOC(IXY,IZ)
!JQI     .            *TERM*DO(IXY,IZ)/(KDOC+DO(IXY,IZ))
         SK200(IXY,IZ) = K200CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,20)      &
                  *TERM*CARAY(IXY,IZ,26)/(CONST(153)+CARAY(IXY,IZ,26))

!JQI         CDRDOC(IXY,IZ) = FRDOC*GRAZ(IXY,IZ) + SK1820 - SK200(IXY,IZ)
         CDARAY(IXY,IZ,20) = CONST(118)*GRAZ(IXY,IZ) + SK1820 - SK200(IXY,IZ)
 
!        LDOC - LABILE DISSOLVED ORGANIC CARBON
!                 Sources                         Sinks
!              Grazed Algae                     Oxidation
!              From LPOC                     Denitrification
!JQI         SK210(IXY,IZ) = K210CT(ISTP20(IXY,IZ))*LDOC(IXY,IZ)
!JQI     .                  *LDOC(IXY,IZ)/(KMLDOC+LDOC(IXY,IZ))
!JQI     .                  *TERM*DO(IXY,IZ)/(KDOC+DO(IXY,IZ))
         SK210(IXY,IZ) = K210CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,21)           &
                        *CARAY(IXY,IZ,21)/(CONST(152)+CARAY(IXY,IZ,21))    &
                        *TERM*CARAY(IXY,IZ,26)/(CONST(153)                 &
                        +CARAY(IXY,IZ,26))

!        Denitrification
!            ( 5 CH2O + 5 H2O + 4 NO3- + 4 H+ = 5 CO2 + 2 N2 + 12 H2O ) 
         SK2114(IXY,IZ) = 5./4.*12./14.*SK150(IXY,IZ)
  
!JQI         CDLDOC(IXY,IZ) = FLDOC*GRAZ(IXY,IZ) + SK1921
!JQI     .                  - SK2114(IXY,IZ) - SK210(IXY,IZ)
         CDARAY(IXY,IZ,21) = CONST(119)*GRAZ(IXY,IZ) + SK1921           &
                           - SK2114(IXY,IZ) - SK210(IXY,IZ)

!        EXDOC - ALGAL EXUDATE ORGANIC CARBON
!                 Sources                         Sinks
!              Algal Exudate                    Oxidation
!JQI         SR22P = FLOCEX*(GPP1(IXY,IZ)+GPP2(IXY,IZ)+GPP3(IXY,IZ))
         SR22P = CONST(156)*(GPP1(IXY,IZ)+GPP2(IXY,IZ)+GPP3(IXY,IZ))

!JQI         SK220(IXY,IZ) = K220CT(ISTP20(IXY,IZ))*EXDOC(IXY,IZ)
!JQI     .                  *EXDOC(IXY,IZ)/(KMLDOC+EXDOC(IXY,IZ))
!JQI     .                  *TERM*DO(IXY,IZ)/(KDOC+DO(IXY,IZ))
         SK220(IXY,IZ) = K220CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,22)           &
                        *CARAY(IXY,IZ,22)/(CONST(152)+CARAY(IXY,IZ,22))    &
                        *TERM*CARAY(IXY,IZ,26)/(CONST(153)                 &
                        +CARAY(IXY,IZ,26))

!JQI         CDEXDOC(IXY,IZ) = SR22P - SK220(IXY,IZ)
         CDARAY(IXY,IZ,22) = SR22P - SK220(IXY,IZ)

!        REPOC - REACTIVE PARTICULATE ORGANIC CARBON (CSOs/STPs)
!                 Sources                         Sinks
!                   CSOs                  Hydrolysis to REDOC
!JQI         SK2324(IXY,IZ) = K2324CT(ISTP20(IXY,IZ))*REPOC(IXY,IZ)*TERM
         SK2324(IXY,IZ) = K2324CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,23)*TERM

!JQI         CDREPOC(IXY,IZ) = -SK2324(IXY,IZ) 
         CDARAY(IXY,IZ,23) = -SK2324(IXY,IZ) 

!        REDOC - REACTIVE DISSOLVED ORGANIC CARBON (CSOs/STPs)
!                 Sources                         Sinks
!              From RePOC                       Oxidation
!JQI         SK240(IXY,IZ) = K240CT(ISTP20(IXY,IZ))*REDOC(IXY,IZ)
!JQI     .                  *REDOC(IXY,IZ)/(KMLDOC+REDOC(IXY,IZ))
!JQI     .                  *TERM*DO(IXY,IZ)/(KDOC+DO(IXY,IZ))
         SK240(IXY,IZ) = K240CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,24)         &
                        *CARAY(IXY,IZ,24)/(CONST(152)+CARAY(IXY,IZ,24))  &
                        *TERM*CARAY(IXY,IZ,26)/(CONST(153)               &
                        +CARAY(IXY,IZ,26))

!JQI         CDREDOC(IXY,IZ) = SK2324(IXY,IZ) - SK240(IXY,IZ) 
         CDARAY(IXY,IZ,24) = SK2324(IXY,IZ) - SK240(IXY,IZ) 

!        BOTTLE BOD5 - INCLUDES EFFECTS OF ALGAL RESPIRATION + NITRIFICATION
!JQI         BOTBOD(IXY,IZ)=OCRB*( RDOC(IXY,IZ)*(1.-EXP(-5.*K200CT(201)))
         BOTBOD(IXY,IZ)=OCRB*( CARAY(IXY,IZ,20)*(1.-EXP(-5.*K200CT(201)))  &
                       +(K200CT(201)*(1.-EXP(-5*K1820CT(201)))             &
                       -K1820CT(201)*(1.-EXP(-5*K200CT(201))))             &
!JQI     .       / ( K200CT(201) - K1820CT(201) ) * RPOC(IXY,IZ)
                       /(K200CT(201) - K1820CT(201) ) * CARAY(IXY,IZ,18)   &
!JQI     .                      + LDOC(IXY,IZ)*(1.-EXP(-5.*K210CT(201)))
                       +CARAY(IXY,IZ,21)*(1.-EXP(-5.*K210CT(201)))         &
                       +(K210CT(201)*(1.-EXP(-5*K1921CT(201)))             &
                       -K1921CT(201)*(1.-EXP(-5*K210CT(201))))             &
!JQI     .       / ( K210CT(201) - K1921CT(201) ) * LPOC(IXY,IZ)
                       /(K210CT(201) - K1921CT(201) ) * CARAY(IXY,IZ,19)   &
!JQI     .                      + REDOC(IXY,IZ)*(1.-EXP(-5.*K240CT(201)))
                       +CARAY(IXY,IZ,24)*(1.-EXP(-5.*K240CT(201)))         &
!JQI     .                 + EXDOC(IXY,IZ)*(1.-EXP(-5.*K220CT(201)))
                       +CARAY(IXY,IZ,22)*(1.-EXP(-5.*K220CT(201)))         &
!JQI     .                 + PHYT1(IXY,IZ)*(1.-EXP(-5.*K1RBT(201)))
!JQI     .                 + PHYT2(IXY,IZ)*(1.-EXP(-5.*K2RBT(201))) 
!JQI     .                 + PHYT3(IXY,IZ)*(1.-EXP(-5.*K3RBT(201))) )
                       +CARAY(IXY,IZ,2)*(1.-EXP(-5.*K1RBT(201)))           &
                       +CARAY(IXY,IZ,3)*(1.-EXP(-5.*K2RBT(201)))           &
                       +CARAY(IXY,IZ,4)*(1.-EXP(-5.*K3RBT(201))))          &
!JQI     .          + 4.57*DNH4(IXY,IZ)*(1.-EXP(-5.*K1415CT(201)))
                       +4.57*CKINARRAY(IXY,IZ,2)*(1.-EXP(-5.*K1415CT(201)))
!JQI         BOTBODHS(IXY,IZ) = BOTBOD(IXY,IZ)+
!JQI     .                 O2EQ(IXY,IZ)*(1.-EXP(-5.*K250CT(201)))
         BOTBODHS(IXY,IZ) = BOTBOD(IXY,IZ)+ CARAY(IXY,IZ,25)*(1.-EXP(-5.*K250CT(201)))
        END IF
       END DO
      END DO

      IF(IDISK == 2 .OR. IDISK == 3) THEN
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        TERM = XEMPRC(IXY,IZ)
!JQI        SK1820 = K1820CT(ISTP20(IXY,IZ))*RPOC(IXY,IZ)*TERM
        SK1820 = K1820CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,18)*TERM
        IF(IDDOPT == 0) THEN
!JQI         VAL1 = (RZ(IXY,IZ+1)/BVOL(IXY,IZ))*
!JQI     .          (PHYT1(IXY,IZ+1)-PHYT1(IXY,IZ))
         VAL1 = (RZ(IXY,IZ+1)/BVOL(IXY,IZ))*(CARAY(IXY,IZ+1,2)-CARAY(IXY,IZ,2))
!JQI         VAL2 = (RZ(IXY,IZ+1)/BVOL(IXY,IZ))*
!JQI     .          (PHYT2(IXY,IZ+1)-PHYT2(IXY,IZ))
         VAL2 = (RZ(IXY,IZ+1)/BVOL(IXY,IZ))*(CARAY(IXY,IZ+1,3)-CARAY(IXY,IZ,3))
!JQI         CALL RCAWBUF(18,RPOC(IXY,IZ),FRPOC*GRAZ(IXY,IZ),SK1820,
!JQI     .        VAL1,VAL2)
      !   CALL RCAWBUF(18,CARAY(IXY,IZ,18),CONST(116)*GRAZ(IXY,IZ),SK1820,VAL1,VAL2)
        ELSE
      !   CALL RCAWBUF(18,RPOC_DDA(IXY,IZ)/IAVGDDCNTR,                &
      !        POC_DMIN(IXY,IZ),POC_DMAX(IXY,IZ),POC_DDA(IXY,IZ)/IAVGDDCNTR, &
      !        DOC_DDA(IXY,IZ)/IAVGDDCNTR)
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
!JQI         TTPOC = PHYT1(IXY,IZ) + PHYT2(IXY,IZ) + PHYT3(IXY,IZ)
!JQI     .         + RPOC(IXY,IZ) + LPOC(IXY,IZ)  + REPOC(IXY,IZ) 
         TTPOC = CARAY(IXY,IZ,2) + CARAY(IXY,IZ,3) + CARAY(IXY,IZ,4)      &
               + CARAY(IXY,IZ,18) + CARAY(IXY,IZ,19)  + CARAY(IXY,IZ,23) 
         TERM = XEMPRC(IXY,IZ)
!JQI         SK1921 = K1921CT(ISTP20(IXY,IZ))*LPOC(IXY,IZ)*TERM
!JQI         CALL RCAWBUF(19,LPOC(IXY,IZ),FLPOC*GRAZ(IXY,IZ),SK1921,
!JQI     .        TTPOC,DUMMY)
         SK1921 = K1921CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,19)*TERM
        ! CALL RCAWBUF(19,CARAY(IXY,IZ,19),CONST(117)*GRAZ(IXY,IZ),      &
        !              SK1921,TTPOC,DUMMY)
        ELSE
        ! CALL RCAWBUF(19,LPOC_DDA(IXY,IZ)/IAVGDDCNTR,               &
        !      PHYT1_DMIN(IXY,IZ),PHYT1_DMAX(IXY,IZ),                &
        !      PHYT2_DMIN(IXY,IZ),PHYT2_DMAX(IXY,IZ))
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        TERM = XEMPRC(IXY,IZ)
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(20,RDOC(IXY,IZ),FRDOC*GRAZ(IXY,IZ),
!JQI     .        SK200(IXY,IZ),RX(IXY,IZ),RY(IXY,IZ) )
        ! CALL RCAWBUF(20,CARAY(IXY,IZ,20),CONST(118)*GRAZ(IXY,IZ),   &
        !      SK200(IXY,IZ),RX(IXY,IZ),RY(IXY,IZ) )
        ELSE
        ! CALL RCAWBUF(20,RDOC_DDA(IXY,IZ)/IAVGDDCNTR,              &
        !      DOC_DMIN(IXY,IZ),DOC_DMAX(IXY,IZ),                   &
        !      RX(IXY,IZ),RY(IXY,IZ))
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        APPGR = (GPP1(IXY,IZ) + GPP1(IXY,IZ))/(HBAR(IXY)*DZ(IXY,IZ))
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(21,LDOC(IXY,IZ),FLDOC*GRAZ(IXY,IZ),
!JQI     .        SK210(IXY,IZ),SK2114(IXY,IZ),APPGR)
        ! CALL RCAWBUF(21,CARAY(IXY,IZ,21),CONST(119)*GRAZ(IXY,IZ), &
        !      SK210(IXY,IZ),SK2114(IXY,IZ),APPGR)
        ELSE
!JQI    !     CALL RCAWBUF(21,LDOC_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI    ! .        FLDOC*GRAZ(IXY,IZ),SK210(IXY,IZ),SK2114(IXY,IZ),
!JQI    ! .        APPGR)
        ! CALL RCAWBUF(21,LDOC_DDA(IXY,IZ)/IAVGDDCNTR,               &
        !      CONST(119)*GRAZ(IXY,IZ),SK210(IXY,IZ),SK2114(IXY,IZ), &
        !      APPGR)
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
!JQI        TTPOC = PHYT1(IXY,IZ) + PHYT2(IXY,IZ) + PHYT3(IXY,IZ)
!JQI     .        + RPOC(IXY,IZ) + LPOC(IXY,IZ)  + REPOC(IXY,IZ) 
        TTPOC = CARAY(IXY,IZ,2) + CARAY(IXY,IZ,3) + CARAY(IXY,IZ,4)     &
              + CARAY(IXY,IZ,18) + CARAY(IXY,IZ,19)  + CARAY(IXY,IZ,23) 
!JQI        TTDOC = RDOC(IXY,IZ) + LDOC(IXY,IZ) + REDOC(IXY,IZ) 
!JQI     .        + EXDOC(IXY,IZ) 
        TTDOC = CARAY(IXY,IZ,20) + CARAY(IXY,IZ,21) + CARAY(IXY,IZ,24)  &
              + CARAY(IXY,IZ,22) 
        TOC = TTPOC + TTDOC
!JQI        SR22P = FLOCEX*(GPP1(IXY,IZ)+GPP2(IXY,IZ)+GPP3(IXY,IZ))
        SR22P = CONST(156)*(GPP1(IXY,IZ)+GPP2(IXY,IZ)+GPP3(IXY,IZ))
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(22,EXDOC(IXY,IZ),SK220(IXY,IZ),SR22P,
!JQI     .        TTDOC,TOC)
       !  CALL RCAWBUF(22,CARAY(IXY,IZ,22),SK220(IXY,IZ),SR22P,TTDOC,TOC)
        ELSE
       !  CALL RCAWBUF(22,EXDOC_DDA(IXY,IZ)/IAVGDDCNTR,             &
       !       SK220(IXY,IZ),SR22P,TTDOC,TOC_DDA(IXY,IZ)/IAVGDDCNTR)
        ENDIF
       END DO

       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
!JQI        TTPOC = PHYT1(IXY,IZ) + PHYT2(IXY,IZ) + PHYT3(IXY,IZ)
!JQI     .        + RPOC(IXY,IZ) + LPOC(IXY,IZ)  + REPOC(IXY,IZ) 
        TTPOC = CARAY(IXY,IZ,2) + CARAY(IXY,IZ,3) + CARAY(IXY,IZ,4)      &
              + CARAY(IXY,IZ,18) + CARAY(IXY,IZ,19)  + CARAY(IXY,IZ,23) 
!JQI        TTDOC = RDOC(IXY,IZ) + LDOC(IXY,IZ) + REDOC(IXY,IZ) 
!JQI     .        + EXDOC(IXY,IZ) 
        TTDOC = CARAY(IXY,IZ,20) + CARAY(IXY,IZ,21) + CARAY(IXY,IZ,24)   &
              + CARAY(IXY,IZ,22) 
        TOC = TTPOC + TTDOC
!JQI        SR22P = FLOCEX*(GPP1(IXY,IZ)+GPP2(IXY,IZ)+GPP3(IXY,IZ))
        SR22P = CONST(156)*(GPP1(IXY,IZ)+GPP2(IXY,IZ)+GPP3(IXY,IZ))
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(23,REPOC(IXY,IZ),SK240(IXY,IZ),SR22P,
!JQI     .        HYDSAL(IXY,IZ),TOC)
       !  CALL RCAWBUF(23,CARAY(IXY,IZ,23),SK240(IXY,IZ),SR22P,HYDSAL(IXY,IZ),TOC)
        ELSE
       !  CALL RCAWBUF(23,REPOC_DDA(IXY,IZ)/IAVGDDCNTR,        &
       !       SK240(IXY,IZ),SR22P,TTDOC,                      &
       !       TOC_DDA(IXY,IZ)/IAVGDDCNTR)
        ENDIF
       END DO

       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
!        ALGAL PRODUCTION USING CO2 AND NH4
        SR26PA = 32./12.*(PNH41(IXY,IZ)*GPP1(IXY,IZ)          &
               + PNH42(IXY,IZ)*GPP2(IXY,IZ) + PNH43(IXY,IZ)*GPP3(IXY,IZ))

!        ALGAL PRODUCTION USING CO2 AND NO3  (HNO3 + H2O => NH4 + 2O2)
        SR26PB = (1.-PNH41(IXY,IZ))*GPP1(IXY,IZ)              &  
               * 32.*(1./12.+2.*NCRB1(IXY,IZ)/14.)            &
               + (1.-PNH42(IXY,IZ))*GPP2(IXY,IZ)              &
               * 32.*(1./12.+2.*NCRB2(IXY,IZ)/14.)            &
               + (1.-PNH43(IXY,IZ))*GPP3(IXY,IZ)              &
               * 32.*(1./12.+2.*NCRB3(IXY,IZ)/14.)

!        ALGAL RESPIRATION
        SK26P = OCRB*RESP(IXY,IZ)
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(24,REDOC(IXY,IZ),SK240(IXY,IZ),
!JQI     .        SR26PA+SR26PB,SK26P,BOTBOD(IXY,IZ))
       !  CALL RCAWBUF(24,CARAY(IXY,IZ,24),SK240(IXY,IZ),      &
       !       SR26PA+SR26PB,SK26P,BOTBOD(IXY,IZ))
        ELSE
        ! CALL RCAWBUF(24,REDOC_DDA(IXY,IZ)/IAVGDDCNTR,        &
        !      SK240(IXY,IZ),SR26PA+SR26PB,SK26P,BOTBOD(IXY,IZ))
        ENDIF
       END DO
      ENDIF

!
!             SYSTEM 25 - O2*
!

!$doacross local(iz,ixy)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) > 0.) THEN

!        O2 Demanding Equivalents (H2S + CH4)
!                 Sources                         Sinks
!             (Sediment Flux)                   Oxidation
!JQI         SK250(IXY,IZ) = K250CT(ISTP20(IXY,IZ))*O2EQ(IXY,IZ)
!JQI     .            *XEMPRC(IXY,IZ)*DO(IXY,IZ)/(KO2EQ+DO(IXY,IZ))
         SK250(IXY,IZ) = K250CT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,25)    &
                  *XEMPRC(IXY,IZ)*CARAY(IXY,IZ,26)                  &
                  /(CONST(165)+CARAY(IXY,IZ,26))
!JQI         CDO2EQ(IXY,IZ) = - SK250(IXY,IZ)
         CDARAY(IXY,IZ,25) = - SK250(IXY,IZ)

        ENDIF
       END DO
      END DO

      IF(IDISK == 2 .OR. IDISK == 3) THEN
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        SK26OC(IXY,IZ) = OCRB*(SK200(IXY,IZ) + SK210(IXY,IZ)    &
                       + SK220(IXY,IZ) + SK240(IXY,IZ))
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(25,O2EQ(IXY,IZ),SK250(IXY,IZ),
!JQI     .        SK2614(IXY,IZ),SK26OC(IXY,IZ),HYDSAL(IXY,IZ))
        ! CALL RCAWBUF(25,CARAY(IXY,IZ,25),SK250(IXY,IZ),        &
        !           SK2614(IXY,IZ),SK26OC(IXY,IZ),HYDSAL(IXY,IZ))
        ELSE
        ! CALL RCAWBUF(25,O2EQ_DDA(IXY,IZ)/IAVGDDCNTR,           &
        !      O2EQ_DMIN(IXY,IZ),O2EQ_DMAX(IXY,IZ),              &
        !      SK26OC(IXY,IZ),ECMSAL_DDA(IXY,IZ)/IAVGDDCNTR)
        ENDIF
       END DO
      ENDIF

!
!             SYSTEM 26 - DISSOLVED OXYGEN
!
! print*,'eutro 2731 ',DOAVEG(1107,30),CARAY(1107,30,26),IAVGGDCNTR  !Tian
!$doacross local(iz,ixy,sr26pa,sr26pb,sk26p) ,
!$& share (cs,doaveg,doming,domaxg) ,
!$& local (qxave,qyave,qvect1,qvect2,klvel,kavel)
      DO IZ=1,NZ
       DO IXY=1,M
!JQI        DOAVEG(IXY,IZ) = DOAVEG(IXY,IZ) + DO(IXY,IZ)
!JQI        DOMING(IXY,IZ) = AMIN1(DOMING(IXY,IZ),DO(IXY,IZ))
!JQI        DOMAXG(IXY,IZ) = AMAX1(DOMAXG(IXY,IZ),DO(IXY,IZ))
        DOAVEG(IXY,IZ) = DOAVEG(IXY,IZ) + CARAY(IXY,IZ,26)
        DOMING(IXY,IZ) = AMIN1(DOMING(IXY,IZ),CARAY(IXY,IZ,26))
        DOMAXG(IXY,IZ) = AMAX1(DOMAXG(IXY,IZ),CARAY(IXY,IZ,26))
        IF(FSM(IXY) > 0.) THEN

!                 Sources                         Sinks
!               Reaeration                    Nitrification
!              Photosynthesis                  Respiration
!                                         Oxidation of Org Carbon
!                                         Oxidation of O2* (H2S/CH4)
!        REAERATION - SURFACE SEGMENT ONLY
         IF(IZ == 1) THEN
!           COMPUTE OXYGEN SATURATION
!JQI          CS(IXY) = 14.6244 - 0.36713*HYDTEMP(IXY,1)
!JQI     .      + 0.0044972*HYDTEMP(IXY,1)*HYDTEMP(IXY,1)
!JQI     .      - 0.0966*SAL(IXY,1) + 0.00205*SAL(IXY,1)*HYDTEMP(IXY,1)
!JQI     .      + 0.0002739*SAL(IXY,1)*SAL(IXY,1)
          CS(IXY) = 14.6244 - 0.36713*HYDTEMP(IXY,1)              &
                  + 0.0044972*HYDTEMP(IXY,1)*HYDTEMP(IXY,1)       &
                  - 0.0966*CARAY(IXY,1,1)                         &
                  + 0.00205*CARAY(IXY,1,1)*HYDTEMP(IXY,1)         &
                  + 0.0002739*CARAY(IXY,1,1)*CARAY(IXY,1,1)
!JQI          IF(KAOPT == 2) THEN
          IF(CONST(3) == 2) THEN
           QXAVE = 0.0
	   QYAVE = 0.0
	   DO I=1,NTVE(IXY)
	    QXAVE = QXAVE + UU(NBVE(IXY,I),1)
	    QYAVE = QYAVE + VV(NBVE(IXY,I),1)
	   END DO
	   QXAVE = QXAVE/NTVE(IXY)
	   QYAVE = QYAVE/NTVE(IXY)  
           QVECT1 = SQRT(QXAVE*QXAVE + QYAVE*QYAVE)

	   QXAVE = 0.0
	   QYAVE = 0.0
	   DO I=1,NTVE(IXY)
	    QXAVE = QXAVE + UU(NBVE(IXY,I),2)
	    QYAVE = QYAVE + VV(NBVE(IXY,I),2)
	   END DO
	   QXAVE = QXAVE/NTVE(IXY)
	   QYAVE = QYAVE/NTVE(IXY)  
           QVECT2 = SQRT(QXAVE*QXAVE + QYAVE*QYAVE)
!JQI           KLVEL = SQRT(DIFUS*ABS(QVECT1-QVECT2)/
!JQI     .               (HBAR(IXY)*(DZ(IXY,1)+DZ(IXY,2))/2.))
           KLVEL = SQRT(CONST(167)*ABS(QVECT1-QVECT2)/          &
                   (HBAR(IXY)*(DZ(IXY,1)+DZ(IXY,2))/2.))
!JQI           KA20(IXY) = MAX(KLMIN,KLVEL)/(HBAR(IXY)*DZ(IXY,1))
           KA20(IXY) = MAX(CONST(166),KLVEL)/(HBAR(IXY)*DZ(IXY,1))
!JQI          ELSEIF(KAOPT == 3) THEN
          ELSEIF(CONST(3) == 3) THEN
!JQI           KA20(IXY) = MAX(KLMIN,KLWIND)/(HBAR(IXY)*DZ(IXY,1))
           KA20(IXY) = MAX(CONST(166),KLWIND)/(HBAR(IXY)*DZ(IXY,1))
          ENDIF
!JQI          SR260(IXY,1) = KA20(IXY)*KACT(ISTP20(IXY,1))
!JQI     .                 * (CS(IXY)-DO(IXY,1))
          SR260(IXY,1) = KA20(IXY)*KACT(ISTP20(IXY,1)) * (CS(IXY)-CARAY(IXY,1,26))
         ENDIF


!        ALGAL PRODUCTION USING CO2 AND NH4
         SR26PA = 32./12.*(PNH41(IXY,IZ)*GPP1(IXY,IZ)           &
                + PNH42(IXY,IZ)*GPP2(IXY,IZ)                    &
                + PNH43(IXY,IZ)*GPP3(IXY,IZ))

!        ALGAL PRODUCTION USING CO2 AND NO3  (HNO3 + H2O => NH4 + 2O2)
         SR26PB = (1.-PNH41(IXY,IZ))*GPP1(IXY,IZ)               &
                * 32.*(1./12.+2.*NCRB1(IXY,IZ)/14.)             &
                + (1.-PNH42(IXY,IZ))*GPP2(IXY,IZ)               &
                * 32.*(1./12.+2.*NCRB2(IXY,IZ)/14.)             &
                + (1.-PNH43(IXY,IZ))*GPP3(IXY,IZ)               &
                * 32.*(1./12.+2.*NCRB3(IXY,IZ)/14.)

!        ALGAL RESPIRATION
         SK26P = OCRB*RESP(IXY,IZ)

!        NITRIFICATION  (NH4 + 2O2 => NO3 + H2O + H)
         SK2614(IXY,IZ) = 64./14.*SK1415(IXY,IZ)

!        OXIDATION OF ORGANIC CARBON
         SK26OC(IXY,IZ) = OCRB*(SK200(IXY,IZ) + SK210(IXY,IZ)   &
                        + SK220(IXY,IZ) + SK240(IXY,IZ))

!JQI         CDDO(IXY,IZ) = SR260(IXY,IZ) + SR26PA + SR26PB - SK26P 
!JQI     .       - SK2614(IXY,IZ) - SK26OC(IXY,IZ) - SK250(IXY,IZ)
         CDARAY(IXY,IZ,26) = SR260(IXY,IZ) + SR26PA + SR26PB - SK26P  &
                           - SK2614(IXY,IZ) - SK26OC(IXY,IZ) - SK250(IXY,IZ)
        END IF
       END DO
      END DO

      IF(IDISK == 2 .OR. IDISK == 3) THEN
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        SR26PA = 32./12.*(PNH41(IXY,IZ)*GPP1(IXY,IZ)            &
               + PNH42(IXY,IZ)*GPP2(IXY,IZ) + PNH43(IXY,IZ)*GPP3(IXY,IZ))
        SR26PB = (1.-PNH41(IXY,IZ))*GPP1(IXY,IZ)                &
                * 32.*(1./12.+2.*NCRB1(IXY,IZ)/14.)             &
                + (1.-PNH42(IXY,IZ))*GPP2(IXY,IZ)               &
                * 32.*(1./12.+2.*NCRB2(IXY,IZ)/14.)             &
                + (1.-PNH43(IXY,IZ))*GPP3(IXY,IZ)               &
                * 32.*(1./12.+2.*NCRB3(IXY,IZ)/14.)
        SK26P = OCRB*RESP(IXY,IZ)
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(26,DO(IXY,IZ),SR260(IXY,IZ),SR26PA,SR26PB,
!JQI     .        SK26P)
      !   CALL RCAWBUF(26,CARAY(IXY,IZ,26),SR260(IXY,IZ),SR26PA,SR26PB,SK26P)
        ELSE
      !   CALL RCAWBUF(26,DO_DDA(IXY,IZ)/IAVGDDCNTR,SR260(IXY,IZ),    &
      !         DO_DMIN(IXY,IZ),DO_DMAX(IXY,IZ),(SR26PA+SR26PB-SK26P))
        ENDIF
       END DO
      ENDIF


!        CLOSE BUFFER

  206 IF(IDISK == 2 .OR. IDISK == 3) THEN
    !   CALL RCAWRIT

!      RE-INITIALIZE ARRAY FOR DETAILED DUMP AVERAGING, IF REQUIRED
       IF(IDDOPT == 1) THEN
!$doacross local(iz,ixy),share(sal_dda,ecmsal_dda),
!$& share(phyt1_dda,phyt2_dda,phyt3_dda),
!$& share(rpop_dda,lpop_dda,rdop_dda,ldop_dda,dpo4_dda),
!$& share(rpon_dda,lpon_dda,rdon_dda,ldon_dda,dnh4_dda,no23_dda),
!$& share(bsi_dda,dsi_dda,poc_dda,doc_dda,toc_dda,don_dda,pon_dda),
!$& share(tn_dda,pop_dda,dop_dda,tp_dda),
!$& share(rpoc_dda,lpoc_dda,rdoc_dda,ldoc_dda,redoc_dda,exdoc_dda),
!$& share(o2eq_dda,do_dda,ecmtem_dda,do_dmin,do_dmax)
!JQI        SAL_DDA    = 0. ;ECMSAL_DDA = 0. ;PHYT1_DDA  = 0.
        SCRATCH_KIN(:,:,2) = 0. ;ECMSAL_DDA = 0. ;SCRATCH_KIN(:,:,3) = 0.
!JQI        PHYT2_DDA  = 0. ;PHYT3_DDA  = 0. ;RPOP_DDA   = 0.
        SCRATCH_KIN(:,:,4) = 0. ;SCRATCH_KIN(:,:,5) = 0. ;RPOP_DDA   = 0.
        LPOP_DDA   = 0. ;POP_DDA    = 0. ;RDOP_DDA   = 0.
        LDOP_DDA   = 0. ;DOP_DDA    = 0. ;DPO4_DDA   = 0.
        TP_DDA     = 0. ;RPON_DDA   = 0. ;LPON_DDA   = 0.
        PON_DDA    = 0. ;RDON_DDA   = 0. ;LDON_DDA   = 0.
        DON_DDA    = 0. ;DNH4_DDA   = 0. ;NO23_DDA   = 0.
        TN_DDA     = 0. ;BSI_DDA    = 0. ;DSI_DDA    = 0.
        RPOC_DDA   = 0. ;LPOC_DDA   = 0. ;RDOC_DDA   = 0.
        LDOC_DDA   = 0. ;REDOC_DDA  = 0. ;REPOC_DDA  = 0.
        EXDOC_DDA  = 0. ;POC_DDA    = 0. ;DOC_DDA    = 0.
        TOC_DDA    = 0. ;O2EQ_DDA   = 0. ;DO_DDA     = 0.
        ECMTEM_DDA = 0. ;PO4T_DDA   = 0. ;NH4T_DDA   = 0.
        SIT_DDA    = 0. ;
	DO_DMIN    = 1000.
        DO_DMAX    = -1000.

!$doacross local(iz,ixy) ,
!$& share(sal_dmin,phyt1_dmin,phyt2_dmin,phyt3_dmin),
!$& share(pop_dmin,dop_dmin,dpo4_dmin,tp_dmin),
!$& share(pon_dmin,don_dmin,dnh4_dmin,no23_dmin,tn_dmin),
!$& share(bsi_dmin,dsi_dmin,hydsal_dmin,hydtemp_dmin),
!$& share(poc_dmin,doc_dmin,toc_dmin,o2eq_dmin,do_dmin),
!$& share(tam_dmin,cchl1_dmin,cchl2_dmin,chla1_dmin,chla2_dmin)
!$& share(cchl3_dmin,chla3_dmin)
!JQI        SAL_DMIN     = 1000.   ;PHYT1_DMIN   = 1000.
        SCRATCH_KIN(:,:,12) = 1000.   ;PHYT1_DMIN   = 1000.
        PHYT2_DMIN   = 1000.   ;PHYT3_DMIN   = 1000.
        POP_DMIN     = 1000.   ;DOP_DMIN     = 1000.
        DPO4_DMIN    = 1000.   ;TP_DMIN      = 1000.
        PON_DMIN     = 1000.   ;DON_DMIN     = 1000.
        DNH4_DMIN    = 1000.   ;NO23_DMIN    = 1000.
        TN_DMIN      = 1000.   ;BSI_DMIN     = 1000.
        DSI_DMIN     = 1000.   ;POC_DMIN     = 1000.
        DOC_DMIN     = 1000.   ;TOC_DMIN     = 1000.
        O2EQ_DMIN    = 1000.   ;DO_DMIN      = 1000.
        HYDSAL_DMIN  = 1000.   ;HYDTEMP_DMIN = 1000.
        CCHL1_DMIN   = 1000.   ;CCHL2_DMIN   = 1000.
        CCHL3_DMIN   = 1000.   ;CHLA1_DMIN   = 1000.
        CHLA2_DMIN   = 1000.   ;CHLA3_DMIN   = 1000.

!$doacross local(iz,iy,ix) ,
!$& share(sal_dmax,phyt1_dmax,phyt2_dmax,phyt3_dmax),
!$& share(pop_dmax,rdop_dmax,dpo4_dmax,tp_dmax),
!$& share(pon_dmax,don_dmax,dnh4_dmax,no23_dmax,tn_dmax),
!$& share(bsi_dmax,dsi_dmax,hydsal_dmax,hydtemp_dmax),
!$& share(poc_dmax,doc_dmax,toc_dmax,o2eq_dmax,do_dmax),
!$& share(tam_dmax,cchl1_dmax,cchl2_dmax,chla1_dmax,chla2_dmax)
!$& share(,cchl3_dmax,chla3_dmax)
!JQI        SAL_DMAX     = -1000.   ;PHYT1_DMAX   = -1000.
        SCRATCH_KIN(:,:,13) = -1000.   ;PHYT1_DMAX   = -1000.
        PHYT2_DMAX   = -1000.   ;PHYT3_DMAX   = -1000.
        POP_DMAX     = -1000.   ;DOP_DMAX     = -1000.
        DPO4_DMAX    = -1000.   ;TP_DMAX      = -1000.
        PON_DMAX     = -1000.   ;DON_DMAX     = -1000.
        DNH4_DMAX    = -1000.   ;NO23_DMAX    = -1000.
        TN_DMAX      = -1000.   ;BSI_DMAX     = -1000.
        DSI_DMAX     = -1000.   ;POC_DMAX     = -1000.
        DOC_DMAX     = -1000.   ;TOC_DMAX     = -1000.
        O2EQ_DMAX    = -1000.   ;DO_DMAX      = -1000.
        HYDSAL_DMAX  = -1000.   ;HYDTEMP_DMAX = -1000.
        CCHL1_DMAX   = -1000.   ;CCHL2_DMAX   = -1000.
        CCHL3_DMAX   = -1000.   ;CHLA1_DMAX   = -1000.
        CHLA2_DMAX   = -1000.   ;CHLA3_DMAX   = -1000.

        IAVGDDCNTR = 0
        ENDIF
      ENDIF

!        PERFORM GLOBAL DUMP AVERAGING, IF REQUIRED
      IF(IGDOPT == 1) THEN
!$doacross local(iz,ixy) , share(sal_gda,ecmsal_gda,phyt1_gda),
!$& share(phyt2_gda,tpop_gda,tdop_gda,dpo4_gda),
!$& share(tpon_gda,tdon_gda,dnh4_gda,no23_gda)
!JQI       SAL_GDA = SAL_GDA + SAL
       SAL_GDA(:,:) = SAL_GDA(:,:) + CARAY(:,:,1)
       ECMSAL_GDA = ECMSAL_GDA + HYDSAL
!JQI       PHYT1_GDA = PHYT1_GDA + PHYT1
!JQI       PHYT2_GDA = PHYT2_GDA + PHYT2
!JQI       PHYT3_GDA = PHYT3_GDA + PHYT3
       PHYT1_GDA(:,:) = PHYT1_GDA(:,:) + CARAY(:,:,2)
       PHYT2_GDA(:,:) = PHYT2_GDA(:,:) + CARAY(:,:,3)
       PHYT3_GDA(:,:) = PHYT3_GDA(:,:) + CARAY(:,:,4)
!JQI       TPOP_GDA = TPOP_GDA + PCRB1*PHYT1 + PCRB2*PHYT2 +
!JQI     .            PCRB3*PHYT3 + RPOP + LPOP
       TPOP_GDA(:,:) = TPOP_GDA(:,:) + PCRB1*CARAY(:,:,2) + PCRB2*CARAY(:,:,3) +  &
                  PCRB3*CARAY(:,:,4) + CARAY(:,:,5) + CARAY(:,:,6)
!JQI       TDOP_GDA = TDOP_GDA + RDOP + LDOP
       TDOP_GDA(:,:) = TDOP_GDA(:,:) + CARAY(:,:,7) + CARAY(:,:,8)
!JQI       DPO4_GDA = DPO4_GDA + DPO4
       DPO4_GDA(:,:) = DPO4_GDA(:,:) + CKINARRAY(:,:,1)
    
!JQI       TPON_GDA = TPON_GDA + NCRB1*PHYT1 + NCRB2*PHYT2 +
!JQI     .            NCRB3*PHYT3 + RPON + LPON
       TPON_GDA(:,:) = TPON_GDA (:,:)+ NCRB1*CARAY(:,:,2) + NCRB2*CARAY(:,:,3) +  &
                  NCRB3*CARAY(:,:,4) + CARAY(:,:,10) + CARAY(:,:,11)
!JQI       TDON_GDA = TDON_GDA + RDON + LDON
       TDON_GDA(:,:) = TDON_GDA(:,:) + CARAY(:,:,12) + CARAY(:,:,13)
!JQI       DNH4_GDA = DNH4_GDA + DNH4
       DNH4_GDA(:,:) = DNH4_GDA(:,:) + CKINARRAY(:,:,2)
           
!JQI       NO23_GDA = NO23_GDA + NO23
!       print*,'here 0'
       NO23_GDA(:,:) = NO23_GDA(:,:) + CARAY(:,:,15)
!lz        write(191,'(1x,2i5,24F12.4)') IGDOPT,IAVGPPCNTR,NO23_GDA(4358,1),CARAY(4358,1,15)    
!$doacross local(iz,ixy,depth) ,
!$& share(tpoc_gda,tdoc_gda,tpsi_gda,dsi_gda),
!$& share(o2eq_gda,tgpdp_gda,tresp_gda,ske_gda),
!$& share(rcatmp_gda,ecmtmp_gda,botbodhs_gda)
!JQI       TPSI_GDA = TPSI_GDA + BSI + SCRB1*PHYT1 + SCRB2*PHYT2
!JQI     .          + SCRB3*PHYT3
       TPSI_GDA(:,:) = TPSI_GDA(:,:) + CARAY(:,:,16) + SCRB1*CARAY(:,:,2) + SCRB2*CARAY(:,:,3) &
                + SCRB3*CARAY(:,:,4)
!JQI       DSI_GDA = DSI_GDA + DSI
       DSI_GDA(:,:) = DSI_GDA(:,:) + CKINARRAY(:,:,3)
      
!JQI       TPOC_GDA = TPOC_GDA + PHYT1 + PHYT2 + PHYT3 + RPOC 
!JQI     .          + LPOC + REPOC
       TPOC_GDA(:,:) = TPOC_GDA(:,:) + CARAY(:,:,2) + CARAY(:,:,3) + CARAY(:,:,4) + CARAY(:,:,18)  &
                + CARAY(:,:,19) + CARAY(:,:,23)
!JQI       TDOC_GDA = TDOC_GDA + RDOC + LDOC + REDOC + EXDOC
       TDOC_GDA(:,:) = TDOC_GDA(:,:) + CARAY(:,:,20) + CARAY(:,:,21) + CARAY(:,:,24) + CARAY(:,:,22)
!JQI       O2EQ_GDA = O2EQ_GDA + O2EQ
       O2EQ_GDA(:,:) = O2EQ_GDA(:,:) + CARAY(:,:,25)
       TGPP_GDA(:,:) = TGPP_GDA(:,:) + 0.0
       TNPP_GDA(:,:) = TNPP_GDA(:,:) + 0.0
       DO IZ=1,NZ
        DO IXY=1,M
!        NET PRIMARY PRODUCTIVITY TO APPROXIMATELY THE
!        1 PERCENT LIGHT LEVEL  -  GM C/M**2-DAY
         IF(ISURF > 0.0) THEN
         ! DEPTH = (ZZ(IXY,IZ)+DZ(IXY,IZ)/2.) * HBAR(IXY)  !Temporal
          DEPTH = (-ZZ(IXY,IZ)+DZ(IXY,IZ)/2.) * HBAR(IXY)	    
          !IF(EXP(-SKE(IXY,IZ)*DEPTH) > 0.01) THEN
           TGPP_GDA(IXY,IZ) = TGPP_GDA(IXY,IZ) + DZ(IXY,IZ)*HBAR(IXY) *   &
                     (GPP1(IXY,IZ) + GPP2(IXY,IZ) + GPP3(IXY,IZ))
           TNPP_GDA(IXY,IZ) = TNPP_GDA(IXY,IZ) + DZ(IXY,IZ)*HBAR(IXY) *   &
                  (GPP1(IXY,IZ) + GPP2(IXY,IZ) + GPP3(IXY,IZ) - RESP(IXY,IZ))
!IF(IXY.EQ.3084)print*,'eutro 3018 ',IZ,DZ(IXY,IZ),HBAR(IXY),GPP1(IXY,IZ),GPP2(IXY,IZ),GPP3(IXY,IZ), &
!       CARAY(IXY,IZ,2:4)		  
         ! ENDIF
         ENDIF

         TRESP_GDA(IXY,IZ) = TRESP_GDA(IXY,IZ) + OCRB*RESP(IXY,IZ) + SK26OC(IXY,IZ) + &
                   SK250(IXY,IZ) + SK2614(IXY,IZ)
         SKE_GDA(IXY,IZ) = SKE_GDA(IXY,IZ) + SKE(IXY,IZ)
         ECMTMP_GDA(IXY,IZ) = ECMTMP_GDA(IXY,IZ) + HYDTEMP(IXY,IZ)
         BOTBODHS_GDA(IXY,IZ) = BOTBODHS_GDA(IXY,IZ) + BOTBODHS(IXY,IZ)
        END DO
       END DO
      ENDIF

      IAVGGDCNTR = IAVGGDCNTR + 1
      IF(ISURF > 0.0) IAVGPPCNTR = IAVGPPCNTR + 1

!        CONVERT TO MASS UNITS

!$doacross local(iz,iy,ix,isys)
      DO ISYS=1,NOSYS
       CDARAY(:,:,ISYS) = BVOL(:,:)*CDARAY(:,:,ISYS)       
      END DO
      
!        SETTLING AND DEPOSITION OF POM

!        SETTLING
!$doacross local(iy,ix,iz,alg1flx,alg2flx,algpflx,algnflx,algsflx),
!$& local(flux,pflux,sflux,term)
      DO IZ=1,NZ-1
       DO IXY=1,M            
       
        IF(FSM(IXY) > 0.) THEN

!        WINTER DIATOMS
!JQI         ALG1FLX =  ALG1VS(IXY,IZ)*XAZ(IXY)*PHYT1(IXY,IZ)
         ALG1FLX =  ALG1VS(IXY,IZ)*XAZ(IXY)*CARAY(IXY,IZ,2)
!JQI         CDPHYT1(IXY,IZ) = CDPHYT1(IXY,IZ) - ALG1FLX
!JQI         CDPHYT1(IXY,IZ+1) = CDPHYT1(IXY,IZ+1) + ALG1FLX
         CDARAY(IXY,IZ,2) = CDARAY(IXY,IZ,2) - ALG1FLX
         CDARAY(IXY,IZ+1,2) = CDARAY(IXY,IZ+1,2) + ALG1FLX

!        SUMMER PHYTOPLANKTON
!JQI         ALG2FLX = ALG2VS(IXY,IZ)*XAZ(IXY)*PHYT2(IXY,IZ)
         ALG2FLX = ALG2VS(IXY,IZ)*XAZ(IXY)*CARAY(IXY,IZ,3)
!JQI         CDPHYT2(IXY,IZ) = CDPHYT2(IXY,IZ) - ALG2FLX
!JQI         CDPHYT2(IXY,IZ+1) = CDPHYT2(IXY,IZ+1) + ALG2FLX
         CDARAY(IXY,IZ,3) = CDARAY(IXY,IZ,3) - ALG2FLX
         CDARAY(IXY,IZ+1,3) = CDARAY(IXY,IZ+1,3) + ALG2FLX

!        FALL PHYTOPLANKTON
!JQI         ALG3FLX = ALG3VS(IXY,IZ)*XAZ(IXY)*PHYT3(IXY,IZ)
         ALG3FLX = ALG3VS(IXY,IZ)*XAZ(IXY)*CARAY(IXY,IZ,4)
!JQI         CDPHYT3(IXY,IZ) = CDPHYT3(IXY,IZ) - ALG3FLX
!JQI         CDPHYT3(IXY,IZ+1) = CDPHYT3(IXY,IZ+1) + ALG3FLX
         CDARAY(IXY,IZ,4) = CDARAY(IXY,IZ,4) - ALG3FLX
         CDARAY(IXY,IZ+1,4) = CDARAY(IXY,IZ+1,4) + ALG3FLX
 
!        ALGAL BOUND PHOSPHORUS, NITROGEN AND SILICA
         ALGPFLX = PCRB1(IXY,IZ)*ALG1FLX + PCRB2(IXY,IZ)*ALG2FLX   &
                 + PCRB3(IXY,IZ)*ALG3FLX
!JQI         CDPO4T(IXY,IZ) = CDPO4T(IXY,IZ) - ALGPFLX
!JQI         CDPO4T(IXY,IZ+1) = CDPO4T(IXY,IZ+1) + ALGPFLX
         CDARAY(IXY,IZ,9) = CDARAY(IXY,IZ,9) - ALGPFLX
         CDARAY(IXY,IZ+1,9) = CDARAY(IXY,IZ+1,9) + ALGPFLX
         ALGNFLX = NCRB1(IXY,IZ)*ALG1FLX + NCRB2(IXY,IZ)*ALG2FLX   &
                 + NCRB3(IXY,IZ)*ALG3FLX
!JQI         CDNH4T(IXY,IZ) = CDNH4T(IXY,IZ) - ALGNFLX
!JQI         CDNH4T(IXY,IZ+1) = CDNH4T(IXY,IZ+1) + ALGNFLX
         CDARAY(IXY,IZ,14) = CDARAY(IXY,IZ,14) - ALGNFLX
         CDARAY(IXY,IZ+1,14) = CDARAY(IXY,IZ+1,14) + ALGNFLX
	 
         ALGSFLX = SCRB1(IXY,IZ)*ALG1FLX + SCRB2(IXY,IZ)*ALG2FLX   &
                 + SCRB3(IXY,IZ)*ALG3FLX
!JQI         CDSIT(IXY,IZ) = CDSIT(IXY,IZ) - ALGSFLX
!JQI         CDSIT(IXY,IZ+1) = CDSIT(IXY,IZ+1) + ALGSFLX
         CDARAY(IXY,IZ,17) = CDARAY(IXY,IZ,17) - ALGSFLX
         CDARAY(IXY,IZ+1,17) = CDARAY(IXY,IZ+1,17) + ALGSFLX
!if(NGID(IXY).EQ.3564)write(88,*)'eutro 3101 ',time, iz, ALGSFLX,CDARAY(IXY,IZ,17)
!        SETTLING OF SORBED PHOSPHORUS AND SILICA ASSOCIATED WITH 
!        SUSPENDED SOLIDS
!JQI         FLUX = VSPIM*VSPMTS(ISTP20(IXY,IZ))*XAZ(IXY)
         FLUX = CONST(179)*VSPMTS(ISTP20(IXY,IZ))*XAZ(IXY)
         PFLUX = FLUX*PO4SS(IXY,IZ)
!JQI         CDPO4T(IXY,IZ) = CDPO4T(IXY,IZ) - PFLUX
!JQI         CDPO4T(IXY,IZ+1) = CDPO4T(IXY,IZ+1) + PFLUX
         CDARAY(IXY,IZ,9) = CDARAY(IXY,IZ,9) - PFLUX
         CDARAY(IXY,IZ+1,9) = CDARAY(IXY,IZ+1,9) + PFLUX
         SFLUX = FLUX*SISS(IXY,IZ)
!JQI         CDSIT(IXY,IZ) = CDSIT(IXY,IZ) - SFLUX
!JQI         CDSIT(IXY,IZ+1) = CDSIT(IXY,IZ+1) + SFLUX
         CDARAY(IXY,IZ,17) = CDARAY(IXY,IZ,17) - SFLUX
         CDARAY(IXY,IZ+1,17) = CDARAY(IXY,IZ+1,17) + SFLUX
!if(NGID(IXY).EQ.3564)write(88,*)'eutro 3117 ',time, iz, SFLUX,CDARAY(IXY,IZ,17)
!        PARTICULATE ORGANIC MATTER
!JQI         FLUX = VSPOM*VSPMTS(ISTP20(IXY,IZ))*XAZ(IXY)
         FLUX = CONST(170)*VSPMTS(ISTP20(IXY,IZ))*XAZ(IXY)
!JQI         TERM = FLUX*RPOP(IXY,IZ)
         TERM = FLUX*CARAY(IXY,IZ,5)
!JQI         CDRPOP(IXY,IZ) = CDRPOP(IXY,IZ) - TERM
!JQI         CDRPOP(IXY,IZ+1) = CDRPOP(IXY,IZ+1) + TERM
         CDARAY(IXY,IZ,5) = CDARAY(IXY,IZ,5) - TERM
         CDARAY(IXY,IZ+1,5) = CDARAY(IXY,IZ+1,5) + TERM
!JQI         TERM = FLUX*LPOP(IXY,IZ)
         TERM = FLUX*CARAY(IXY,IZ,6)
!JQI         CDLPOP(IXY,IZ) = CDLPOP(IXY,IZ) - TERM
!JQI         CDLPOP(IXY,IZ+1) = CDLPOP(IXY,IZ+1) + TERM
         CDARAY(IXY,IZ,6) = CDARAY(IXY,IZ,6) - TERM
         CDARAY(IXY,IZ+1,6) = CDARAY(IXY,IZ+1,6) + TERM
!JQI         TERM = FLUX*RPON(IXY,IZ)
         TERM = FLUX*CARAY(IXY,IZ,10)
!JQI         CDRPON(IXY,IZ) = CDRPON(IXY,IZ) - TERM
!JQI         CDRPON(IXY,IZ+1) = CDRPON(IXY,IZ+1) + TERM
         CDARAY(IXY,IZ,10) = CDARAY(IXY,IZ,10) - TERM
         CDARAY(IXY,IZ+1,10) = CDARAY(IXY,IZ+1,10) + TERM
!JQI         TERM = FLUX*LPON(IXY,IZ)
         TERM = FLUX*CARAY(IXY,IZ,11)
!JQI         CDLPON(IXY,IZ) = CDLPON(IXY,IZ) - TERM
!JQI         CDLPON(IXY,IZ+1) = CDLPON(IXY,IZ+1) + TERM
         CDARAY(IXY,IZ,11) = CDARAY(IXY,IZ,11) - TERM
         CDARAY(IXY,IZ+1,11) = CDARAY(IXY,IZ+1,11) + TERM
!JQI         TERM = FLUX*BSI(IXY,IZ)
         TERM = FLUX*CARAY(IXY,IZ,16)
!JQI         CDBSI(IXY,IZ) = CDBSI(IXY,IZ) - TERM
!JQI         CDBSI(IXY,IZ+1) = CDBSI(IXY,IZ+1) + TERM
         CDARAY(IXY,IZ,16) = CDARAY(IXY,IZ,16) - TERM
         CDARAY(IXY,IZ+1,16) = CDARAY(IXY,IZ+1,16) + TERM
!JQI         TERM = FLUX*RPOC(IXY,IZ)
         TERM = FLUX*CARAY(IXY,IZ,18)
!JQI         CDRPOC(IXY,IZ) = CDRPOC(IXY,IZ) - TERM
!JQI         CDRPOC(IXY,IZ+1) = CDRPOC(IXY,IZ+1) + TERM
         CDARAY(IXY,IZ,18) = CDARAY(IXY,IZ,18) - TERM
         CDARAY(IXY,IZ+1,18) = CDARAY(IXY,IZ+1,18) + TERM
!JQI         TERM = FLUX*LPOC(IXY,IZ)
         TERM = FLUX*CARAY(IXY,IZ,19)
!JQI         CDLPOC(IXY,IZ) = CDLPOC(IXY,IZ) - TERM
!JQI         CDLPOC(IXY,IZ+1) = CDLPOC(IXY,IZ+1) + TERM
         CDARAY(IXY,IZ,19) = CDARAY(IXY,IZ,19) - TERM
         CDARAY(IXY,IZ+1,19) = CDARAY(IXY,IZ+1,19) + TERM
!JQI         FLUX = min(VMAXCSO,
!JQI     .        VMINCSO+(VMAXCSO-VMINCSO)*(REPOC(IXY,IZ)/CRCSO)**BVCSO)
!JQI     .       *VSPMTS(ISTP20(IXY,IZ))*XAZ(IXY)
         FLUX = min(CONST(176),CONST(175)+(CONST(176)-CONST(175))   &
              *(CARAY(IXY,IZ,23)/CONST(174))**CONST(173))           &
              *VSPMTS(ISTP20(IXY,IZ))*XAZ(IXY)
!JQI         TERM = FLUX*REPOC(IXY,IZ)
         TERM = FLUX*CARAY(IXY,IZ,23)
!JQI         CDREPOC(IXY,IZ) = CDREPOC(IXY,IZ) - TERM
!JQI         CDREPOC(IXY,IZ+1) = CDREPOC(IXY,IZ+1) + TERM
         CDARAY(IXY,IZ,23) = CDARAY(IXY,IZ,23) - TERM
         CDARAY(IXY,IZ+1,23) = CDARAY(IXY,IZ+1,23) + TERM
	END IF
       END DO
      END DO   	  

!        DEPOSITION
!$doacross local(ixy,tcorr,vssed)
!$doacross local(ixy,tcorr,vssed,alg1flx,alg2flx),
!$& local(algpflx,algnflx,algsflx)
      DO IXY=1,MT
       IF(FSM(IXY) > 0.) THEN

!JQI        TCORR = VSSEDT**STP20(IXY,NZ)
        TCORR = CONST(172)**STP20(IXY,NZ)
!     DEPFLUX(IX,IY,1) = ALG1VS(IX,IY,NZ)*VSNET1(IX,IY)*TCORR
!    .               *XAZ(IX,IY)*PHYT1(IX,IY,NZ)
!JQI        DEPFLUX(IXY,1) = ALG1VS(IXY,NZ)*VSNET1(IXY)
!JQI     .                  *XAZ(IXY)*PHYT1(IXY,NZ)
        DEPFLUX(IXY,1) = ALG1VS(IXY,NZ)*PARAM2D(IXY,2)*XAZ(IXY)*CARAY(IXY,NZ,2)
	
        ALG1FLX=DEPFLUX(IXY,1)
!JQI        CDPHYT1(IXY,NZ) = CDPHYT1(IXY,NZ) - DEPFLUX(IXY,1)
        CDARAY(IXY,NZ,2) = CDARAY(IXY,NZ,2) - DEPFLUX(IXY,1)
!     DEPFLUX(IX,IY,2) = ALG2VS(IX,IY,NZ)*VSNET2(IX,IY)*TCORR
!    .               *XAZ(IX,IY)*PHYT2(IX,IY,NZ)
!JQI        DEPFLUX(IXY,2) = ALG2VS(IXY,NZ)*VSNET2(IXY)
!JQI     .                  *XAZ(IXY)*PHYT2(IXY,NZ)
        DEPFLUX(IXY,2) = ALG2VS(IXY,NZ)*PARAM2D(IXY,3)*XAZ(IXY)*CARAY(IXY,NZ,3)
        ALG2FLX=DEPFLUX(IXY,2)
!JQI        CDPHYT2(IXY,NZ) = CDPHYT2(IXY,NZ) - DEPFLUX(IXY,2)
        CDARAY(IXY,NZ,3) = CDARAY(IXY,NZ,3) - DEPFLUX(IXY,2)
!JQI        DEPFLUX(IXY,3) = ALG3VS(IXY,NZ)*VSNET3(IXY)*TCORR
!JQI     .                  *XAZ(IXY)*PHYT3(IXY,NZ)
        DEPFLUX(IXY,3) = ALG3VS(IXY,NZ)*PARAM2D(IXY,4)*TCORR      &
                        *XAZ(IXY)*CARAY(IXY,NZ,4)
        ALG3FLX=DEPFLUX(IXY,3)
!JQI        CDPHYT3(IXY,NZ) = CDPHYT3(IXY,NZ) - DEPFLUX(IXY,3)
        CDARAY(IXY,NZ,4) = CDARAY(IXY,NZ,4) - DEPFLUX(IXY,3)

!     ALGAL BOUND PHOSPHORUS, NITROGEN, AND SILICA
        ALGPFLX = PCRB1(IXY,NZ)*ALG1FLX + PCRB2(IXY,NZ)*ALG2FLX   &
                + PCRB3(IXY,NZ)*ALG3FLX
!JQI        CDPO4T(IXY,NZ) = CDPO4T(IXY,NZ) - ALGPFLX
        CDARAY(IXY,NZ,9) = CDARAY(IXY,NZ,9) - ALGPFLX
        ALGNFLX = NCRB1(IXY,NZ)*ALG1FLX + NCRB2(IXY,NZ)*ALG2FLX   &
                + NCRB3(IXY,NZ)*ALG3FLX
!JQI        CDNH4T(IXY,NZ) = CDNH4T(IXY,NZ) - ALGNFLX
        CDARAY(IXY,NZ,14) = CDARAY(IXY,NZ,14) - ALGNFLX
        ALGSFLX = SCRB1(IXY,NZ)*ALG1FLX + SCRB2(IXY,NZ)*ALG2FLX   &
                + SCRB3(IXY,NZ)*ALG3FLX
!JQI        CDSIT(IXY,NZ) = CDSIT(IXY,NZ) - ALGSFLX
        CDARAY(IXY,NZ,17) = CDARAY(IXY,NZ,17) - ALGSFLX
!if(NGID(IXY).EQ.3564)write(88,*)'eutro 3225 ',time, iz, ALGSFLX,CDARAY(IXY,IZ,17)
!     VSSED = VSPOM*VSPMTS(ISTP20(IX,IY,NZ))
!    .           *VSNET4(IX,IY)*TCORR*XAZ(IX,IY)
!JQI        VSSED = VSNET4(IXY)*TCORR*XAZ(IXY)
        VSSED = PARAM2D(IXY,5)*TCORR*XAZ(IXY)
!JQI        DEPFLUX(IXY,4) = VSSED*RPOP(IXY,NZ)
        DEPFLUX(IXY,4) = VSSED*CARAY(IXY,NZ,5)
!JQI        CDRPOP(IXY,NZ) = CDRPOP(IXY,NZ) - DEPFLUX(IXY,4)
        CDARAY(IXY,NZ,5) = CDARAY(IXY,NZ,5) - DEPFLUX(IXY,4)
!JQI        DEPFLUX(IXY,5) = VSSED*LPOP(IXY,NZ)
        DEPFLUX(IXY,5) = VSSED*CARAY(IXY,NZ,6)
!JQI        CDLPOP(IXY,NZ) = CDLPOP(IXY,NZ) - DEPFLUX(IXY,5)
        CDARAY(IXY,NZ,6) = CDARAY(IXY,NZ,6) - DEPFLUX(IXY,5)
!JQI        DEPFLUX(IXY,6) = VSSED*RPON(IXY,NZ)
        DEPFLUX(IXY,6) = VSSED*CARAY(IXY,NZ,10)
!JQI        CDRPON(IXY,NZ) = CDRPON(IXY,NZ) - DEPFLUX(IXY,6)
        CDARAY(IXY,NZ,10) = CDARAY(IXY,NZ,10) - DEPFLUX(IXY,6)
!JQI        DEPFLUX(IXY,7) = VSSED*LPON(IXY,NZ)
        DEPFLUX(IXY,7) = VSSED*CARAY(IXY,NZ,11)
!JQI        CDLPON(IXY,NZ) = CDLPON(IXY,NZ) - DEPFLUX(IXY,7)
        CDARAY(IXY,NZ,11) = CDARAY(IXY,NZ,11) - DEPFLUX(IXY,7)
!JQI        DEPFLUX(IXY,8) = VSSED*BSI(IXY,NZ)
        DEPFLUX(IXY,8) = VSSED*CARAY(IXY,NZ,16)
!JQI        CDBSI(IXY,NZ) = CDBSI(IXY,NZ) - DEPFLUX(IXY,8)
        CDARAY(IXY,NZ,16) = CDARAY(IXY,NZ,16) - DEPFLUX(IXY,8)
!JQI        DEPFLUX(IXY,9) = VSSED*RPOC(IXY,NZ)
        DEPFLUX(IXY,9) = VSSED*CARAY(IXY,NZ,18)
!JQI        CDRPOC(IXY,NZ) = CDRPOC(IXY,NZ) - DEPFLUX(IXY,9)
        CDARAY(IXY,NZ,18) = CDARAY(IXY,NZ,18) - DEPFLUX(IXY,9)
!JQI        DEPFLUX(IXY,10) = VSSED*LPOC(IXY,NZ)
        DEPFLUX(IXY,10) = VSSED*CARAY(IXY,NZ,19)
!JQI        CDLPOC(IXY,NZ) = CDLPOC(IXY,NZ) - DEPFLUX(IXY,10)
        CDARAY(IXY,NZ,19) = CDARAY(IXY,NZ,19) - DEPFLUX(IXY,10)
!JQI        VSSED = min(VMAXCSO,
!JQI     .          VMINCSO+(VMAXCSO-VMINCSO)*(REPOC(IXY,IZ)/CRCSO)**BVCSO)
!JQI     .         *VSPMTS(ISTP20(IXY,NZ))*VSNET4(IXY)*TCORR*XAZ(IXY)
        VSSED = min(CONST(176),CONST(175)+(CONST(176)-CONST(175))    &
              *(CARAY(IXY,IZ,23)/CONST(174))**CONST(173))            &
              *VSPMTS(ISTP20(IXY,NZ))*PARAM2D(IXY,5)*TCORR*XAZ(IXY)
!JQI        DEPFLUX(IXY,11) = VSSED*REPOC(IXY,NZ)
        DEPFLUX(IXY,11) = VSSED*CARAY(IXY,NZ,23)
!JQI        CDREPOC(IXY,NZ) = CDREPOC(IXY,NZ) - DEPFLUX(IXY,11)
        CDARAY(IXY,NZ,23) = CDARAY(IXY,NZ,23) - DEPFLUX(IXY,11)
!JQI        VSSED = VSPIM*VSPMTS(ISTP20(IXY,IZ))
!JQI     .           *VSNET4(IXY)*TCORR*XAZ(IXY)
        VSSED = CONST(179)*VSPMTS(ISTP20(IXY,IZ))*PARAM2D(IXY,5)*TCORR*XAZ(IXY)
        DEPFLUX(IXY,12) = VSSED*PO4SS(IXY,NZ)
!JQI        CDPO4T(IXY,NZ) = CDPO4T(IXY,NZ) - DEPFLUX(IXY,12)
        CDARAY(IXY,NZ,9) = CDARAY(IXY,NZ,9) - DEPFLUX(IXY,12)
        DEPFLUX(IXY,13) = VSSED*SISS(IXY,NZ)
!JQI        CDSIT(IXY,NZ) = CDSIT(IXY,NZ) - DEPFLUX(IXY,13)
        CDARAY(IXY,NZ,17) = CDARAY(IXY,NZ,17) - DEPFLUX(IXY,13)
!if(NGID(IXY).EQ.3564)write(88,*)'eutro 3277 ',time, iz, DEPFLUX(IXY,13),CDARAY(IXY,IZ,17)
       ENDIF
      END DO
  
!        CALL SEDMODL TO COMPUTE NUTRIENT FLUXES/SOD


      CALL SED_FLUX 

!        NUTRIENT FLUXES AND SOD

!$doacross local(ixy,sa)
      DO IXY=1,MT
       IF(FSM(IXY) > 0.) THEN

        SA = XAZ(IXY)
!        PO4
!JQI        CDPO4T(IXY,NZ) = CDPO4T(IXY,NZ) + JPO4(IXY)*SA
        CDARAY(IXY,NZ,9) = CDARAY(IXY,NZ,9) + CFLUXS(IXY,7)*SA
!        NH4-N
!JQI        CDNH4T(IXY,NZ) = CDNH4T(IXY,NZ) + JNH4(IXY)*SA
        CDARAY(IXY,NZ,14) = CDARAY(IXY,NZ,14) + CFLUXS(IXY,5)*SA
!        NO3-N
!JQI        CDNO23(IXY,NZ) = CDNO23(IXY,NZ) + JNO3(IXY)*SA
        CDARAY(IXY,NZ,15) = CDARAY(IXY,NZ,15) + CFLUXS(IXY,6)*SA
!        SILICA
!JQI        CDSIT(IXY,NZ) = CDSIT(IXY,NZ) + JSI(IXY)*SA
        CDARAY(IXY,NZ,17) = CDARAY(IXY,NZ,17) + CFLUXS(IXY,8)*SA
!if(NGID(IXY).EQ.3564)write(88,*)'eutro 3277 ',time, iz, CFLUXS(IXY,8)*SA,CDARAY(IXY,IZ,17)
!        LEACHING O2*  (JHS OR JCH4AQ+JCH4G)
!JQI        CDO2EQ(IXY,NZ) = CDO2EQ(IXY,NZ) + (JHS(IXY)
!JQI     .     +JCH4AQ(IXY)+JCH4G(IXY))*SA
        CDARAY(IXY,NZ,25) = CDARAY(IXY,NZ,25) + (CFLUXS(IXY,2)  &
                           +CFLUXS(IXY,3)+CFLUXS(IXY,4))*SA
!        SOD
!JQI        CDDO(IXY,NZ) = CDDO(IXY,NZ) - SODS(IXY)*SA
        CDARAY(IXY,NZ,26) = CDARAY(IXY,NZ,26) - CFLUXS(IXY,1)*SA
	
!      IF(ngid(IXy).EQ.3920) write(84,'(A,10E10.2)')'eutro 3326 ',TIME,   &
!      CDARAY(IXY,NZ,14)/BVOL(IXY,IZ),CDARAY(IXY,NZ,17)/BVOL(IXY,IZ) , &
!       CFLUXS(IXY,5),CFLUXS(IXY,8)	
	
       ENDIF
      END DO

  262 CONTINUE
  
!      CHECK IF TIME TO DUMP TO DISK
!lz       write(170,*) IDISK
      IF(IDISK == 0) RETURN      !lz_c

!      GLOBAL DUMPS
!lz       write(180,*) IDISK
      IF(IDISK == 1 .OR. IDISK == 3) THEN     !lz_c
!lz      IF(IDISK == 0 .OR. IDISK == 3) THEN    !lz Added
       IF(IGDOPT == 0) THEN
!       write(190,*) IGDOPT
        IF(SERIAL) THEN
	 WRITE(10)   TIME
!JQI        WRITE(11)   SAL
!JQI        WRITE(11)   PHYT1
!JQI        WRITE(11)   PHYT2
!JQI        WRITE(11)   PHYT3
         WRITE(11)   CARAY(:,:,1)
         WRITE(11)   CARAY(:,:,2)
         WRITE(11)   CARAY(:,:,3)
         WRITE(11)   CARAY(:,:,4)
        ELSE
#  if defined (MULTIPROCESSOR)
	 IF(MSR) WRITE(10)   TIME
	 ALLOCATE(SAL(0:MT,NZ))
	 ALLOCATE(PHYT1(0:MT,NZ))
	 ALLOCATE(PHYT2(0:MT,NZ))
	 ALLOCATE(PHYT3(0:MT,NZ))
         SAL(:,:)   = CARAY(:,:,1)
         PHYT1(:,:) = CARAY(:,:,2)
         PHYT2(:,:) = CARAY(:,:,3)
         PHYT3(:,:) = CARAY(:,:,4)
!lz         PHYT1(:,:) = SK1415(:,:)
!lz         PHYT2(:,:) = SK15P(:,:)
!lz         PHYT3(:,:) = SK150(:,:)
         print*,'I am here'
         CALL PWRITE(11,MYID,NPROCS,SAL,LBOUND(SAL,1),       &
              UBOUND(SAL,1),M,NXY,NZ,NMAP,1,"SAL")
         CALL PWRITE(11,MYID,NPROCS,PHYT1,LBOUND(PHYT1,1),   &
              UBOUND(PHYT1,1),M,NXY,NZ,NMAP,1,"PHYT1")
         CALL PWRITE(11,MYID,NPROCS,PHYT2,LBOUND(PHYT2,1),   &
              UBOUND(PHYT2,1),M,NXY,NZ,NMAP,1,"PHYT2")
         CALL PWRITE(11,MYID,NPROCS,PHYT3,LBOUND(PHYT3,1),   &
              UBOUND(PHYT3,1),M,NXY,NZ,NMAP,1,"PHYT3")
         DEALLOCATE(SAL,PHYT1,PHYT2,PHYT3)
#  endif
	END IF 
!$doacross local(iz,ixy)
!JQI        TPOP = PCRB1*PHYT1 + PCRB2*PHYT2 + PCRB3*PHYT3
!JQI     .       + RPOP + LPOP
        SCRATCH_KIN(:,:,1) = PCRB1*CARAY(:,:,2)           &
             + PCRB2*CARAY(:,:,3) + PCRB3*CARAY(:,:,4)    &
             + CARAY(:,:,5) + CARAY(:,:,6)
!JQI        IF(MSR) WRITE(11)   TPOP
        IF(SERIAL)THEN
	 WRITE(11)   SCRATCH_KIN(:,:,1)
        ELSE
#  if defined (MULTIPROCESSOR)
	 ALLOCATE(TPOP(MT,NZ))
	 TPOP(:,:) = SCRATCH_KIN(:,:,1)
         CALL PWRITE(11,MYID,NPROCS,TPOP,LBOUND(TPOP,1),   &
              UBOUND(TPOP,1),M,NXY,NZ,NMAP,1,"TPOP")
         DEALLOCATE(TPOP)
#  endif
	END IF 
!$doacross local(iz,ixy)
!JQI        TDOP = RDOP + LDOP
        SCRATCH_KIN(:,:,1) = CARAY(:,:,7) + CARAY(:,:,8)
	IF(SERIAL) THEN
!JQI        WRITE(11)   TDOP
!JQI        WRITE(11)   DPO4
         WRITE(11)   SCRATCH_KIN(:,:,1)
         WRITE(11)   CKINARRAY(:,:,1)
        ELSE
#  if defined (MULTIPROCESSOR)
         ALLOCATE(TDOP(0:MT,NZ))
	 ALLOCATE(DPO4(0:MT,NZ))
	 TDOP(:,:) = SCRATCH_KIN(:,:,1)
	 DPO4(:,:) = CKINARRAY(:,:,1)
         CALL PWRITE(11,MYID,NPROCS,TDOP,LBOUND(TDOP,1),    &
              UBOUND(TDOP,1),M,NXY,NZ,NMAP,1,"TDOP")
         CALL PWRITE(11,MYID,NPROCS,DPO4,LBOUND(DPO4,1),    &
              UBOUND(DPO4,1),M,NXY,NZ,NMAP,1,"DPO4")
         DEALLOCATE(TDOP,DPO4)
#  endif	 
	END IF 
!$doacross local(iz,ixy)
!JQI        TPON = NCRB1*PHYT1 + NCRB2*PHYT2 + NCRB3*PHYT3
!JQI     .       + RPON + LPON
        SCRATCH_KIN(:,:,1) = NCRB1*CARAY(:,:,2) + NCRB2*CARAY(:,:,3) + NCRB3*CARAY(:,:,4) &
                           + CARAY(:,:,10) + CARAY(:,:,11)
!JQI        IF(MSR) WRITE(11)   TPON
        IF(SERIAL)THEN
	 WRITE(11)   SCRATCH_KIN(:,:,1)
        ELSE
#  if defined (MULTIPROCESSOR)
         ALLOCATE(TPON(0:MT,NZ))
	 TPON(:,:) = SCRATCH_KIN(:,:,1)
         CALL PWRITE(11,MYID,NPROCS,TPON,LBOUND(TPON,1),    &
              UBOUND(TPON,1),M,NXY,NZ,NMAP,1,"TPON")
	 DEALLOCATE(TPON)
#  endif
        END IF
!$doacross local(iz,ixy)
!JQI        TDON = RDON + LDON
        SCRATCH_KIN(:,:,1) = CARAY(:,:,12) + CARAY(:,:,13)
	IF(SERIAL)THEN
!JQI         WRITE(11)   TDON
!JQI         WRITE(11)   DNH4
!JQI         WRITE(11)   NO23
         WRITE(11)   SCRATCH_KIN(:,:,1)
         WRITE(11)   CKINARRAY(:,:,2)
         WRITE(11)   CARAY(:,:,15)
        ELSE
#  if defined (MULTIPROCESSOR)
         ALLOCATE(TDON(0:MT,NZ))
	 ALLOCATE(DNH4(0:MT,NZ))
	 ALLOCATE(NO23(0:MT,NZ))
	 TDON(:,:) = SCRATCH_KIN(:,:,1)
	 DNH4(:,:) = CKINARRAY(:,:,2)
	 NO23(:,:) = CARAY(:,:,15)
         CALL PWRITE(11,MYID,NPROCS,TDON,LBOUND(TDON,1),    &
              UBOUND(TDON,1),M,NXY,NZ,NMAP,1,"TDON")
         CALL PWRITE(11,MYID,NPROCS,DNH4,LBOUND(DNH4,1),    &
              UBOUND(DNH4,1),M,NXY,NZ,NMAP,1,"DNH4")
         CALL PWRITE(11,MYID,NPROCS,NO23,LBOUND(NO23,1),    &
              UBOUND(NO23,1),M,NXY,NZ,NMAP,1,"NO23")
	 DEALLOCATE(TDON,DNH4,NO23)
#  endif
	END IF 
!$doacross local(iz,ixy)
!JQI        TPSI = SCRB1*PHYT1 + SCRB2*PHYT2 + SCRB3*PHYT3
!JQI     .       + BSI
        SCRATCH_KIN(:,:,1) = SCRB1*CARAY(:,:,2) + SCRB2*CARAY(:,:,3)  &
                           + SCRB3*CARAY(:,:,4) + CARAY(:,:,16)
        IF(SERIAL)THEN
!JQI         WRITE(11)   TPSI
!JQI         WRITE(11)   DSI
         WRITE(11)   SCRATCH_KIN(:,:,1)
         WRITE(11)   CKINARRAY(:,:,3)
        ELSE
#  if defined (MULTIPROCESSOR)
         ALLOCATE(TPSI(0:MT,NZ))
	 ALLOCATE(DSI(0:MT,NZ))
         CALL PWRITE(11,MYID,NPROCS,TPSI,LBOUND(TPSI,1),    &
              UBOUND(TPSI,1),M,NXY,NZ,NMAP,1,"TPSI")
         CALL PWRITE(11,MYID,NPROCS,DSI,LBOUND(DSI,1),      &
              UBOUND(DSI,1),M,NXY,NZ,NMAP,1,"DSI")
         DEALLOCATE(TPSI,DSI)
#  endif
	END IF 
!$doacross local(iz,ixy)
!JQI        TPOC = PHYT1 + PHYT2 + PHYT3 + RPOC + LPOC + REPOC
        SCRATCH_KIN(:,:,1) = CARAY(:,:,2) + CARAY(:,:,3)    &
              + CARAY(:,:,4) + CARAY(:,:,18)                &
              + CARAY(:,:,19) + CARAY(:,:,23)
!JQI        IF(MSR) WRITE(11)   TPOC
        IF(SERIAL)THEN
	 WRITE(11)   SCRATCH_KIN(:,:,1)
	ELSE
#  if defined (MULTIPROCESSOR)
         ALLOCATE(TPOC(0:MT,NZ))
	 TPOC(:,:) = SCRATCH_KIN(:,:,1)
         CALL PWRITE(11,MYID,NPROCS,TPOC,LBOUND(TPOC,1),    &
              UBOUND(TPOC,1),M,NXY,NZ,NMAP,1,"TPOC")
         DEALLOCATE(TPOC)
#  endif
	END IF 
!$doacross local(iz,ixy)
!JQI        TDOC = RDOC + LDOC + REDOC + EXDOC
        SCRATCH_KIN(:,:,1) = CARAY(:,:,20) + CARAY(:,:,21)  &
                           + CARAY(:,:,24) + CARAY(:,:,22)
        IF(SERIAL)THEN
!JQI         WRITE(11)   TDOC
!JQI         WRITE(11)   O2EQ
         WRITE(11)   SCRATCH_KIN(:,:,1)
         WRITE(11)   CARAY(:,:,25)
	ELSE 
#  if defined (MULTIPROCESSOR)
         ALLOCATE(TDOC(0:MT,NZ))
	 ALLOCATE(O2EQ(0:MT,NZ))
	 TDOC(:,:) = SCRATCH_KIN(:,:,1)
	 O2EQ(:,:) = CARAY(:,:,25)
         CALL PWRITE(11,MYID,NPROCS,TDOC,LBOUND(TDOC,1),    &
              UBOUND(TDOC,1),M,NXY,NZ,NMAP,1,"TDOC")
         CALL PWRITE(11,MYID,NPROCS,O2EQ,LBOUND(O2EQ,1),    &
              UBOUND(O2EQ,1),M,NXY,NZ,NMAP,1,"O2EQ")
         DEALLOCATE(TDOC,O2EQ)
#  endif
	END IF 
!$doacross local(iz,ixy) , share(doaveg)
        DOAVEG = DOAVEG/FLOAT(IAVGGDCNTR)
	IF(SERIAL)THEN
         WRITE(11)   DOAVEG
         WRITE(11)   DOMING
         WRITE(11)   DOMAXG
         WRITE(11)   HYDSAL
	ELSE 
#  if defined (MULTIPROCESSOR)
         CALL PWRITE(11,MYID,NPROCS,DOAVEG,LBOUND(DOAVEG,1),  &
              UBOUND(DOAVEG,1),M,NXY,NZ,NMAP,1,"DOAVEG")
         CALL PWRITE(11,MYID,NPROCS,DOMING,LBOUND(DOMING,1),  &
              UBOUND(DOMING,1),M,NXY,NZ,NMAP,1,"DOMING")
         CALL PWRITE(11,MYID,NPROCS,DOMAXG,LBOUND(DOMAXG,1),  &
              UBOUND(DOMAXG,1),M,NXY,NZ,NMAP,1,"DOMAXG")
         CALL PWRITE(11,MYID,NPROCS,HYDSAL,LBOUND(HYDSAL,1),  &
              UBOUND(HYDSAL,1),M,NXY,NZ,NMAP,1,"HYDSAL")
#  endif
	END IF 
!$doacross local(iz,ixy) , share(chlaveg)
        CHLAVEG = CHLAVEG/FLOAT(IAVGGDCNTR)
        IF(SERIAL)THEN
	 WRITE(11)   CHLAVEG
         WRITE(11)   CHLMING
         WRITE(11)   CHLMAXG
	ELSE 
#  if defined (MULTIPROCESSOR)
         CALL PWRITE(11,MYID,NPROCS,CHLAVEG,LBOUND(CHLAVEG,1),  &
              UBOUND(CHLAVEG,1),M,NXY,NZ,NMAP,1,"CHLAVEG")
         CALL PWRITE(11,MYID,NPROCS,CHLMING,LBOUND(CHLMING,1),  &
              UBOUND(CHLMING,1),M,NXY,NZ,NMAP,1,"CHLMING")
         CALL PWRITE(11,MYID,NPROCS,CHLMAXG,LBOUND(CHLMAXG,1),  &
              UBOUND(CHLMAXG,1),M,NXY,NZ,NMAP,1,"CHLMAXG")
#  endif
	END IF 
!        NET PRIMARY PRODUCTIVITY TO APPROXIMATELY THE
!        1 PERCENT LIGHT LEVEL  -  MG C/M**2-DAY

        DO IZ=1,NZ
         DO IXY=1,M
         ! DEPTH = (ZZ(IXY,IZ)+DZ(IXY,IZ)/2.) * HBAR(IXY)  !Tian
          DEPTH = (-ZZ(IXY,IZ)+DZ(IXY,IZ)/2.) * HBAR(IXY)	  
          !IF(EXP(-SKE(IXY,IZ)*DEPTH) > 0.01) THEN
!JQI           TGPP(IXY,IZ) = 1000.*DZ(IXY,IZ)*DEPTH*
!JQI     .           (GPP1(IXY,IZ) + GPP2(IXY,IZ) + GPP3(IXY,IZ))
           !SCRATCH_KIN(IXY,IZ,1) = 1000.*DZ(IXY,IZ)*DEPTH*        &
	   
           SCRATCH_KIN(IXY,IZ,1) = 1000.*DZ(IXY,IZ)*HBAR(IXY)*        &	   	   
                   (GPP1(IXY,IZ) + GPP2(IXY,IZ) + GPP3(IXY,IZ))
		   
         ! ELSE
!JQI     !      TGPP(IXY,IZ) = 0.0
         !  SCRATCH_KIN(IXY,IZ,1) = 0.0
         ! ENDIF
	 END DO
	END DO  
!JQI        IF(MSR) WRITE(11)   TGPP
        IF(SERIAL)THEN
	 WRITE(11)   SCRATCH_KIN(:,:,1)
	ELSE
#  if defined (MULTIPROCESSOR)
         ALLOCATE(TGPP(0:MT,NZ))
         TGPP(:,:) = SCRATCH_KIN(:,:,1)
         CALL PWRITE(11,MYID,NPROCS,TGPP,LBOUND(TGPP,1),    &
              UBOUND(TGPP,1),M,NXY,NZ,NMAP,1,"TGPP")
	 DEALLOCATE(TGPP)
#  endif
	END IF 

        DO IZ=1,NZ
         DO IXY=1,M
         ! DEPTH = (ZZ(IXY,IZ)+DZ(IXY,IZ)/2.) * HBAR(IXY) !Tian
          DEPTH = (-ZZ(IXY,IZ)+DZ(IXY,IZ)/2.) * HBAR(IXY) !Tian	  
          IF(EXP(-SKE(IXY,IZ)*DEPTH) > 0.01) THEN
!JQI           TNPP(IXY,IZ) = 1000.*DZ(IXY,IZ)*DEPTH*
!JQI     .           (GPP1(IXY,IZ) + GPP2(IXY,IZ) + GPP3(IXY,IZ)
!JQI     .          - DPP1(IXY,IZ) - DPP2(IXY,IZ) - DPP3(IXY,IZ))
           SCRATCH_KIN(IXY,IZ,1) = 1000.*DZ(IXY,IZ)*HBAR(IXY)*       &
                 (GPP1(IXY,IZ) + GPP2(IXY,IZ) + GPP3(IXY,IZ)     &
                - DPP1(IXY,IZ) - DPP2(IXY,IZ) - DPP3(IXY,IZ))
          ELSE
!JQI           TNPP(IXY,IZ) = 0.0
           SCRATCH_KIN(IXY,IZ,1) = 0.0
          ENDIF
	 END DO
	END DO  
!JQI        IF(MSR) WRITE(11)   TNPP
        IF(SERIAL)THEN
	 WRITE(11)   SCRATCH_KIN(:,:,1)
	ELSE
#  if defined (MULTIPROCESSOR)
         ALLOCATE(TNPP(0:MT,NZ))
	 TNPP(:,:) = SCRATCH_KIN(:,:,1)
         CALL PWRITE(11,MYID,NPROCS,TNPP,LBOUND(TNPP,1),    &
              UBOUND(TNPP,1),M,NXY,NZ,NMAP,1,"TNPP")
	DEALLOCATE(TNPP)
#  endif
	END IF 

        DO IZ=1,NZ
         DO IXY=1,M
!JQI          TRESP(IXY,IZ) = OCRB*RESP(IXY,IZ) + SK26OC(IXY,IZ)
!JQI     .                  + SK250(IXY,IZ) + SK2614(IXY,IZ)
          SCRATCH_KIN(IXY,IZ,1) = OCRB*RESP(IXY,IZ) + SK26OC(IXY,IZ)  &
                                + SK250(IXY,IZ) + SK2614(IXY,IZ)
         END DO
	END DO
	IF(SERIAL)THEN
!JQI        WRITE(11)   TRESP
         WRITE(11)   SCRATCH_KIN(:,:,1)
         WRITE(11)   HYDTEMP
         WRITE(11)   SKE
        ELSE
#  if defined (MULTIPROCESSOR)
        ALLOCATE(TRESP(0:MT,NZ))
	TRESP(:,:) = SCRATCH_KIN(:,:,1)
        CALL PWRITE(11,MYID,NPROCS,TRESP,LBOUND(TRESP,1),   &
             UBOUND(TRESP,1),M,NXY,NZ,NMAP,1,"TRESP")
        CALL PWRITE(11,MYID,NPROCS,HYDTEMP,LBOUND(HYDTEMP,1), &
             UBOUND(HYDTEMP,1),M,NXY,NZ,NMAP,1,"HYDTEMP")
        CALL PWRITE(11,MYID,NPROCS,SKE,LBOUND(SKE,1),         &
             UBOUND(SKE,1),M,NXY,NZ,NMAP,1,"SKE")
        DEALLOCATE(TRESP)
#  endif
	END IF	 
       ELSE
!$doacross local(iz,ixy) , share(sal_gda,ecmsal_gda),
!$& share(phyt1_gda,phyt2_gda,phyt3_gda),
!$& share(tpop_gda,tdop_gda,dpo4_gda),
!$& share(tpon_gda,tdon_gda,dnh4_gda,no23_gda),
!$& share(tpsi_gda,dsi_gda,tpoc_gda,tdoc_gda),
!$& share(o2eq_gda,doaveg,rcatmp_gda,ecmtmp_gda,chlaveg),
!$& share(tgpdp_gda,tresp_gda,ske_gda,botbodhs_gda)
!        PREVENT DIVISION BY ZERO (IF AVERAGING PERIOD LESS THAN DAY)
        IF(IAVGPPCNTR == 0) IAVGPPCNTR=1
        SAL_GDA      = SAL_GDA/FLOAT(IAVGGDCNTR)
        ECMSAL_GDA   = ECMSAL_GDA/FLOAT(IAVGGDCNTR)
        PHYT1_GDA    = PHYT1_GDA/FLOAT(IAVGGDCNTR)
        PHYT2_GDA    = PHYT2_GDA/FLOAT(IAVGGDCNTR)
        PHYT3_GDA    = PHYT3_GDA/FLOAT(IAVGGDCNTR)
        TPOP_GDA     = TPOP_GDA/FLOAT(IAVGGDCNTR)
        TDOP_GDA     = TDOP_GDA/FLOAT(IAVGGDCNTR)
        DPO4_GDA     = DPO4_GDA/FLOAT(IAVGGDCNTR)
        TPON_GDA     = TPON_GDA/FLOAT(IAVGGDCNTR)
        TDON_GDA     = TDON_GDA/FLOAT(IAVGGDCNTR)
        DNH4_GDA     = DNH4_GDA/FLOAT(IAVGGDCNTR)
        NO23_GDA     = NO23_GDA/FLOAT(IAVGGDCNTR)
        TPSI_GDA     = TPSI_GDA/FLOAT(IAVGGDCNTR)
        DSI_GDA      = DSI_GDA/FLOAT(IAVGGDCNTR)
        TPOC_GDA     = TPOC_GDA/FLOAT(IAVGGDCNTR)
        TDOC_GDA     = TDOC_GDA/FLOAT(IAVGGDCNTR)
        O2EQ_GDA     = O2EQ_GDA/FLOAT(IAVGGDCNTR)
        DOAVEG       = DOAVEG/FLOAT(IAVGGDCNTR)
        ECMTMP_GDA   = ECMTMP_GDA/FLOAT(IAVGGDCNTR)
        CHLAVEG      = CHLAVEG/FLOAT(IAVGGDCNTR)
!        CONVERT TO GM C/M2-DAY UNITS
        TGPP_GDA     = 1000.*TGPP_GDA/FLOAT(IAVGPPCNTR)
        TNPP_GDA     = 1000.*TNPP_GDA/FLOAT(IAVGPPCNTR)
        TRESP_GDA    = TRESP_GDA/FLOAT(IAVGGDCNTR)
        BOTBODHS_GDA = BOTBODHS_GDA/FLOAT(IAVGGDCNTR)
        SKE_GDA      = SKE_GDA/FLOAT(IAVGGDCNTR)
 !         print*,'here 2'
!       write(190,'(1x,2i5,24F12.4)') IGDOPT,IAVGPPCNTR,NO23_GDA(4358,1),CARAY(4358,1,15),&
!                                      DNH4_GDA(4358,1),NO23_GDA(4358,1)*1000./14.,DNH4_GDA(4358,1)*1000./14.
       IF(INITB == 0 .AND. MSR) WRITE(10) TIME
       IF(INITB >= 1 .AND. MSR) WRITE(10) TIME-(FLOAT(IPRNTGSECS)/86400.)/2.
       IF(SERIAL)THEN
        WRITE(11)   SAL_GDA
        WRITE(11)   PHYT1_GDA
        WRITE(11)   PHYT2_GDA
        WRITE(11)   PHYT3_GDA
        WRITE(11)   TPOP_GDA
        WRITE(11)   TDOP_GDA
        WRITE(11)   DPO4_GDA
        WRITE(11)   TPON_GDA
        WRITE(11)   TDON_GDA
        WRITE(11)   DNH4_GDA
        WRITE(11)   NO23_GDA
        WRITE(11)   TPSI_GDA
        WRITE(11)   DSI_GDA
        WRITE(11)   TPOC_GDA
        WRITE(11)   TDOC_GDA
        WRITE(11)   O2EQ_GDA
        WRITE(11)   DOAVEG
        WRITE(11)   DOMING
        WRITE(11)   DOMAXG
        WRITE(11)   ECMSAL_GDA
        WRITE(11)   CHLAVEG
        WRITE(11)   CHLMING
        WRITE(11)   CHLMAXG
        WRITE(11)   TGPP_GDA
        WRITE(11)   TNPP_GDA
        WRITE(11)   TRESP_GDA
        WRITE(11)   ECMTMP_GDA
        WRITE(11)   SKE_GDA
       ELSE
#  if defined (MULTIPROCESSOR)
!         print*,'here 2-1'
 
        CALL PWRITE(11,MYID,NPROCS,SAL_GDA,LBOUND(SAL_GDA,1),        &
             UBOUND(SAL_GDA,1),M,NXY,NZ,NMAP,1,"SAL_GDA")
        CALL PWRITE(11,MYID,NPROCS,PHYT1_GDA,LBOUND(PHYT1_GDA,1),    &
             UBOUND(PHYT1_GDA,1),M,NXY,NZ,NMAP,1,"PHYT1_GDA")
        CALL PWRITE(11,MYID,NPROCS,PHYT2_GDA,LBOUND(PHYT2_GDA,1),    &
             UBOUND(PHYT2_GDA,1),M,NXY,NZ,NMAP,1,"PHYT2_GDA")       
        CALL PWRITE(11,MYID,NPROCS,PHYT3_GDA,LBOUND(PHYT3_GDA,1),    &
             UBOUND(PHYT3_GDA,1),M,NXY,NZ,NMAP,1,"PHYT3_GDA")
        CALL PWRITE(11,MYID,NPROCS,TPOP_GDA,LBOUND(TPOP_GDA,1),      &
             UBOUND(TPOP_GDA,1),M,NXY,NZ,NMAP,1,"TPOP_GDA")
        CALL PWRITE(11,MYID,NPROCS,TDOP_GDA,LBOUND(TDOP_GDA,1),      &
             UBOUND(TDOP_GDA,1),M,NXY,NZ,NMAP,1,"TDOP_GDA")
        CALL PWRITE(11,MYID,NPROCS,DPO4_GDA,LBOUND(DPO4_GDA,1),      &
             UBOUND(DPO4_GDA,1),M,NXY,NZ,NMAP,1,"DPO4_GDA")
        CALL PWRITE(11,MYID,NPROCS,TPON_GDA,LBOUND(TPON_GDA,1),      &
             UBOUND(TPON_GDA,1),M,NXY,NZ,NMAP,1,"TPON_GDA")
        CALL PWRITE(11,MYID,NPROCS,TDON_GDA,LBOUND(TDON_GDA,1),      &
             UBOUND(TDON_GDA,1),M,NXY,NZ,NMAP,1,"TDON_GDA")
        CALL PWRITE(11,MYID,NPROCS,DNH4_GDA,LBOUND(DNH4_GDA,1),      &
             UBOUND(DNH4_GDA,1),M,NXY,NZ,NMAP,1,"DNH4_GDA")
        CALL PWRITE(11,MYID,NPROCS,NO23_GDA,LBOUND(NO23_GDA,1),      &
             UBOUND(NO23_GDA,1),M,NXY,NZ,NMAP,1,"NO23_GDA")
        CALL PWRITE(11,MYID,NPROCS,TPSI_GDA,LBOUND(TPSI_GDA,1),      &
             UBOUND(TPSI_GDA,1),M,NXY,NZ,NMAP,1,"TPSI_GDA")
        CALL PWRITE(11,MYID,NPROCS,DSI_GDA,LBOUND(DSI_GDA,1),        &
             UBOUND(DSI_GDA,1),M,NXY,NZ,NMAP,1,"DSI_GDA")
        CALL PWRITE(11,MYID,NPROCS,TPOC_GDA,LBOUND(TPOC_GDA,1),      &
             UBOUND(TPOC_GDA,1),M,NXY,NZ,NMAP,1,"TPOC_GDA")
        CALL PWRITE(11,MYID,NPROCS,TDOC_GDA,LBOUND(TDOC_GDA,1),      &
             UBOUND(TDOC_GDA,1),M,NXY,NZ,NMAP,1,"TDOC_GDA")
        CALL PWRITE(11,MYID,NPROCS,O2EQ_GDA,LBOUND(O2EQ_GDA,1),      &
             UBOUND(O2EQ_GDA,1),M,NXY,NZ,NMAP,1,"O2EQ_GDA")
        CALL PWRITE(11,MYID,NPROCS,DOAVEG,LBOUND(DOAVEG,1),          &
             UBOUND(DOAVEG,1),M,NXY,NZ,NMAP,1,"DOAVEG")
        CALL PWRITE(11,MYID,NPROCS,DOMING,LBOUND(DOMING,1),          &
             UBOUND(DOMING,1),M,NXY,NZ,NMAP,1,"DOMING")
        CALL PWRITE(11,MYID,NPROCS,DOMAXG,LBOUND(DOMAXG,1),          &
             UBOUND(DOMAXG,1),M,NXY,NZ,NMAP,1,"DOMAXG")
        CALL PWRITE(11,MYID,NPROCS,ECMSAL_GDA,LBOUND(ECMSAL_GDA,1),  &
             UBOUND(ECMSAL_GDA,1),M,NXY,NZ,NMAP,1,"ECMSAL_GDA")
        CALL PWRITE(11,MYID,NPROCS,CHLAVEG,LBOUND(CHLAVEG,1),        &
             UBOUND(CHLAVEG,1),M,NXY,NZ,NMAP,1,"CHLAVEG")
        CALL PWRITE(11,MYID,NPROCS,CHLMING,LBOUND(CHLMING,1),        &
             UBOUND(CHLMING,1),M,NXY,NZ,NMAP,1,"CHLMING")
        CALL PWRITE(11,MYID,NPROCS,CHLMAXG,LBOUND(CHLMAXG,1),        &
             UBOUND(CHLMAXG,1),M,NXY,NZ,NMAP,1,"CHLMAXG")
        CALL PWRITE(11,MYID,NPROCS,TGPP_GDA,LBOUND(TGPP_GDA,1),      &
             UBOUND(TGPP_GDA,1),M,NXY,NZ,NMAP,1,"TGPP_GDA")
        CALL PWRITE(11,MYID,NPROCS,TNPP_GDA,LBOUND(TNPP_GDA,1),      &
             UBOUND(TNPP_GDA,1),M,NXY,NZ,NMAP,1,"TNPP_GDA")
        CALL PWRITE(11,MYID,NPROCS,TRESP_GDA,LBOUND(TRESP_GDA,1),    &
             UBOUND(TRESP_GDA,1),M,NXY,NZ,NMAP,1,"TRESP_GDA")
        CALL PWRITE(11,MYID,NPROCS,ECMTMP_GDA,LBOUND(ECMTMP_GDA,1),  &
             UBOUND(ECMTMP_GDA,1),M,NXY,NZ,NMAP,1,"ECMTMP_GDA")
        CALL PWRITE(11,MYID,NPROCS,SKE_GDA,LBOUND(SKE_GDA,1),        &
             UBOUND(SKE_GDA,1),M,NXY,NZ,NMAP,1,"SKE_GDA")
#  endif
       END IF	
      ENDIF
         

!$doacross local(iz,ixy) , share(chlaveg,chlmaxg,chlming),
!$& share(doaveg,doming,domaxg)

      CHLAVEG = 0.
      DOAVEG  = 0.
      CHLMING = 1000.
      DOMING  = 1000.
      CHLMAXG = -1000.
      DOMAXG  = -1000.
! print*,'eutro 3733 ',DOAVEG(1107,30),CARAY(1107,30,26),IAVGGDCNTR  !Tian
      IF(IGDOPT == 1) THEN
!$doacross local(iz,ixy) , share(sal_gda,ecmsal_gda),
!$& share(phyt1_gda,phyt2_gda,phyt3_gda),
!$& share(tpop_gda,tdop_gda,dpo4_gda),
!$& share(tpon_gda,tdon_gda,dnh4_gda,no23_gda),
!$& share(tpoc_gda,tdoc_gda,tpsi_gda,dsi_gda),
!$& share(o2eq_gda,rcatmp_gda,ecmtmp_gda,ske_gda),
!$& share(tgpdp_gda,tresp_gda,botbodhs_gda)
       SAL_GDA      = 0.   ;ECMSAL_GDA   = 0.
       PHYT1_GDA    = 0.   ;PHYT2_GDA    = 0.
       PHYT3_GDA    = 0.   ;TPOP_GDA     = 0.
       TDOP_GDA     = 0.   ;DPO4_GDA     = 0.
       TPON_GDA     = 0.   ;TDON_GDA     = 0.
       DNH4_GDA     = 0.   ;NO23_GDA     = 0.
       TPSI_GDA     = 0.   ;DSI_GDA      = 0.
       TPOC_GDA     = 0.   ;TDOC_GDA     = 0.
       O2EQ_GDA     = 0.   ;ECMTMP_GDA   = 0.
       TGPP_GDA     = 0.   ;TNPP_GDA     = 0.
       TRESP_GDA    = 0.   ;BOTBODHS_GDA = 0.
       SKE_GDA      = 0.   ;
      ENDIF

      IAVGGDCNTR = 0
      IAVGPPCNTR = 0

      ENDIF     !DISK==1 or 3

!        INITIAL CONDITION FILE
      REWIND 15
      IF(SERIAL) WRITE(15)  CARAY
#  if defined (MULTIPROCESSOR)
      IF(PAR)THEN
       ALLOCATE(TEMP1(0:MT,NZ))    ;TEMP1 = 0.0
       ALLOCATE(TEMP2(NXY,NZ))    ;TEMP2 = 0.0
       ALLOCATE(CARAY_TMP(NXY,NZ,NOSYS))    ;CARAY_TMP = 0.0
       DO ISYS = 1,NOSYS
        TEMP1(1:MT,1:NZ) = CARAY(1:MT,1:NZ,ISYS)
        CALL GATHER(LBOUND(TEMP1,1),UBOUND(TEMP1,1),M,NXY,NZ,     &
	            MYID,NPROCS,NMAP,TEMP1,TEMP2)
        CARAY_TMP(:,:,ISYS) = TEMP2(:,:)
       END DO 		   
       IF(MSR) WRITE(15)  CARAY_TMP
       DEALLOCATE(TEMP1,TEMP2,CARAY_TMP) 
      END IF 
#  endif
      
! print*,'eutro 3781 ',DOAVEG(1107,30),CARAY(1107,30,26),IAVGGDCNTR  !Tian
!        IF LAST TIME THROUGH THE TUNER SUBROUTINE -
!           DEALLOCATE ARRAYS AS APPROPRIATE
      IF(INITB == 2) THEN
       DEALLOCATE(SK1415,SK2614,SK150,SK2114,SK15P,SK200)
       DEALLOCATE(SK210,SK220,SK240,SK250,SR260,SK2324,SK26OC)
       IF(IGDOPT == 1) THEN
        DEALLOCATE(SAL_GDA,PHYT1_GDA,PHYT2_GDA,PHYT3_GDA)
        DEALLOCATE(TPOP_GDA,TDOP_GDA,TPON_GDA,TDON_GDA)
        DEALLOCATE(TPOC_GDA,TDOC_GDA,DPO4_GDA,DNH4_GDA)
        DEALLOCATE(NO23_GDA,DSI_GDA,O2EQ_GDA,BOTBODHS_GDA)
        DEALLOCATE(TGPP_GDA,TNPP_GDA,TRESP_GDA,SKE_GDA)
        DEALLOCATE(ECMTMP_GDA,ECMSAL_GDA)
       ENDIF
       IF(IDDOPT == 1) THEN
        DEALLOCATE(ECMSAL_DDA)
        DEALLOCATE(RPOP_DDA,LPOP_DDA,RDOP_DDA,LDOP_DDA,DPO4_DDA)
        DEALLOCATE(RPON_DDA,LPON_DDA,RDON_DDA,LDON_DDA,DNH4_DDA)
        DEALLOCATE(NO23_DDA,BSI_DDA,DSI_DDA,RPOC_DDA,LPOC_DDA)
        DEALLOCATE(RDOC_DDA,LDOC_DDA,REPOC_DDA,REDOC_DDA,EXDOC_DDA)
        DEALLOCATE(O2EQ_DDA,DO_DDA,ECMTEM_DDA,PO4T_DDA,NH4T_DDA)
        DEALLOCATE(SIT_DDA,DO_DMIN,DO_DMAX)
        DEALLOCATE(PHYT1_DMIN,PHYT2_DMIN,PHYT3_DMIN)
        DEALLOCATE(POP_DMIN,DOP_DMIN,DPO4_DMIN)
        DEALLOCATE(PON_DMIN,DON_DMIN,DNH4_DMIN,NO23_DMIN)
        DEALLOCATE(TP_DMIN,TN_DMIN,BSI_DMIN,DSI_DMIN)
        DEALLOCATE(POC_DMIN,DOC_DMIN,TOC_DMIN,O2EQ_DMIN)
        DEALLOCATE(HYDSAL_DMIN,HYDTEMP_DMIN)
        DEALLOCATE(CCHL1_DMIN,CCHL2_DMIN,CCHL3_DMIN)
        DEALLOCATE(CHLA1_DMIN,CHLA2_DMIN,CHLA3_DMIN)
        DEALLOCATE(PHYT1_DMAX,PHYT2_DMAX,PHYT3_DMAX)
        DEALLOCATE(POP_DMAX,DOP_DMAX,DPO4_DMAX)
        DEALLOCATE(PON_DMAX,DON_DMAX,DNH4_DMAX,NO23_DMAX)
        DEALLOCATE(TP_DMAX,TN_DMAX,BSI_DMAX,DSI_DMAX)
        DEALLOCATE(POC_DMAX,DOC_DMAX,TOC_DMAX,O2EQ_DMAX)
        DEALLOCATE(HYDSAL_DMAX,HYDTEMP_DMAX)
        DEALLOCATE(CCHL1_DMAX,CCHL2_DMAX,CCHL3_DMAX)
        DEALLOCATE(CHLA1_DMAX,CHLA2_DMAX,CHLA3_DMAX)
       ENDIF
      ENDIF

!jqi      DEALLOCATE(DEPFLUX)
!jqi      DEALLOCATE(CFLUXS)

!JQI      DEALLOCATE(PHYT1,PHYT2,PHYT3,RPOP,LPOP,RDOP,LDOP,PO4T)
!JQI      DEALLOCATE(CDSAL,CDPHYT1,CDPHYT2,CDPHYT3,CDRPOP
!JQI     .          ,CDLPOP,CDRDOP,CDLDOP,CDPO4T)
      
!JQI      DEALLOCATE(RPON,LPON,RDON,LDON,NH4T,NO23,BSI,SIT)      
!JQI      DEALLOCATE(CDRPON,CDLPON,CDRDON,CDLDON,CDNH4T
!JQI     .          ,CDNO23,CDBSI,CDSIT)

!JQI      DEALLOCATE(RPOC,LPOC,RDOC,LDOC,EXDOC,REPOC,REDOC,O2EQ,DO)    
!JQI      DEALLOCATE(CDRPOC,CDLPOC,CDRDOC,CDLDOC,CDEXDOC
!JQI     .          ,CDREPOC,CDREDOC,CDO2EQ,CDDO)

      RETURN

  900 IF(MSR) WRITE(OUT,9990)
 9990 FORMAT(///5X,'INPUT ERROR WHILE READING IGDOPT,IDDOPT'//)
!      CALL EXIT
      CALL PSTOP('eutro3857 ')
  999 STOP 'PROGRAM TERMINATED ABNORMALLY'

!       ERROR ON TEMPERATURE READ
  910 IF(MSR) WRITE(OUT,9100)  
 9100 FORMAT(' Error encountered reading kebase.inp'/)
!      CALL EXIT
      CALL PSTOP('eutro3864 ')
      END SUBROUTINE   TUNER
 
  
      SUBROUTINE INIT_STD_EUTRO(IDX)

      USE ALL_VARS,ONLY : DZ,MSR,MT,CARAY,CDARAY,M,PAR,MYID,NPROCS,SERIAL
#  if defined (MULTIPROCESSOR)
      USE MOD_PAR, ONLY : NMAP,GATHER
#  endif
      USE MOD_RCA
      USE ALLOCEUTRO      
      IMPLICIT NONE
      SAVE

 

!      INCLUDE 'RCACM'

      INTEGER, INTENT(IN) :: IDX

!        STATE-VARIABLES
!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) ::
!JQI     .   SAL     ,PHYT1   ,PHYT2   ,PHYT3   ,PO4T    ,NH4T
!JQI     .  ,NO23    ,SIT   
!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) ::
!JQI     .   CDSAL   ,CDPHYT1 ,CDPHYT2 ,CDPHYT3 ,CDPO4T  ,CDNH4T
!JQI     .  ,CDNO23  ,CDSIT

!        LINKAGE FOR EUTROPHICATION ALGAL GROWTH ROUTINES
!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) :: DPO4,DNH4,DSI

      REAL,DIMENSION(3) :: CRBP1,CRBN1,CRBS1,CRBP2,CRBN2,CRBS2,CRBP3,CRBN3,CRBS3
      REAL,DIMENSION(MT) :: TEMP1,TEMP2

!JQI      EQUIVALENCE 
!JQI     .     (CRBP1(1),CRBP11) , (CRBP1(2),CRBP12) , (CRBP1(3),CRBP13)
!JQI     .   , (CRBN1(1),CRBN11) , (CRBN1(2),CRBN12) , (CRBN1(3),CRBN13)
!JQI     .   , (CRBS1(1),CRBS11) , (CRBS1(2),CRBS12) , (CRBS1(3),CRBS13)
!JQI     .   , (CRBP2(1),CRBP21) , (CRBP2(2),CRBP22) , (CRBP2(3),CRBP23)
!JQI     .   , (CRBN2(1),CRBN21) , (CRBN2(2),CRBN22) , (CRBN2(3),CRBN23)
!JQI     .   , (CRBS2(1),CRBS21) , (CRBS2(2),CRBS22) , (CRBS2(3),CRBS23)
!JQI     .   , (CRBP3(1),CRBP31) , (CRBP3(2),CRBP32) , (CRBP3(3),CRBP33)
!JQI     .   , (CRBN3(1),CRBN31) , (CRBN3(2),CRBN32) , (CRBN3(3),CRBN33)
!JQI     .   , (CRBS3(1),CRBS31) , (CRBS3(2),CRBS32) , (CRBS3(3),CRBS33)
!JQI     .  (CRBP1(1),CONST(24)),(CRBP1(2),CONST(25)),(CRBP1(3),CONST(26))
!     . ,(CRBN1(1),CONST(27)),(CRBN1(2),CONST(28)),(CRBN1(3),CONST(29))
!     . ,(CRBS1(1),CONST(30)),(CRBS1(2),CONST(31)),(CRBS1(3),CONST(32))
!     . ,(CRBP2(1),CONST(56)),(CRBP2(2),CONST(57)),(CRBP2(3),CONST(58))
!     . ,(CRBN2(1),CONST(59)),(CRBN2(2),CONST(60)),(CRBN2(3),CONST(61))
!     . ,(CRBS2(1),CONST(62)),(CRBS2(2),CONST(63)),(CRBS2(3),CONST(64))
!     . ,(CRBP3(1),CONST(88)),(CRBP3(2),CONST(89)),(CRBP3(3),CONST(90))
!     . ,(CRBN3(1),CONST(91)),(CRBN3(2),CONST(92)),(CRBN3(3),CONST(93))
!JQI     . ,(CRBS3(1),CONST(94)),(CRBS3(2),CONST(95)),(CRBS3(3),CONST(96))

      REAL :: ISAT1,ISAT2,ISAT3,ITOT,ITOTSF,KETVF,WIND

!JQI     .     K1C,K1T,K1BETA1,K1BETA2,IS1,KMN1,KMP1,KMS1
!JQI     .    ,K1RB,K1RG,K1RT,K1GRZC,K1GRZT
!JQI     .    ,K2C,K2T,K2BETA1,K2BETA2,IS2,KMN2,KMP2,KMS2
!JQI     .    ,K2RB,K2RG,K2RT,K2GRZC,K2GRZT
!JQI     .    ,K3C,K3T,K3BETA1,K3BETA2,IS3,KMN3,KMP3,KMS3
!JQI     .    ,K3RB,K3RG,K3RT,K3GRZC,K3GRZT
!JQI     .    ,KADPO4,KADSI,KAOPT,KEOPT

!JQI      REAL  
!JQI     .     AGMOPT,ACTALG,OPTION5,OPTION6
!JQI     .    ,TOPT1,CCHL1,CRBP11,CRBP12,CRBP13
!JQI     .    ,CRBN11,CRBN12,CRBN13,CRBS11,CRBS12,CRBS13
!JQI     .    ,XKC1,VSBAS1,VSNTR1,TOPT2
!JQI     .    ,CCHL2
!JQI     .    ,CRBP21,CRBP22,CRBP23,CRBN21,CRBN22,CRBN23
!JQI     .    ,CRBS21,CRBS22,CRBS23,XKC2,VSBAS2,VSNTR2
!JQI     .    ,TOPT3,CCHL3,CRBP31,CRBP32,CRBP33
!JQI     .    ,CRBN31,CRBN32,CRBN33,CRBS31,CRBS32,CRBS33
!JQI     .    ,XKC3,VSBAS3,VSNTR3,FLOCEX,VSBAST


!JQI      REAL, ALLOCATABLE, DIMENSION(:) :: KEBS
!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) :: SSLDS

!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) ::
!JQI     .   XEMPRC    ,SAL_DDA   ,PHYT1_DDA ,PHYT2_DDA ,PHYT3_DDA
!JQI     .  ,SAL_DMIN  ,SAL_DMAX  ,CHLA1_DDA ,CHLA2_DDA ,CHLA3_DDA
!JQI     .  ,CCHL1_DDA ,CCHL2_DDA ,CCHL3_DDA
      REAL, ALLOCATABLE :: VARRAY(:,:,:)

      REAL, DIMENSION(MT,NZ) ::                              &
         GPDP1_DDA  ,GPDP2_DDA  ,GPDP3_DDA                   &
        ,RNUTR1_DDA ,RNUTR2_DDA ,RNUTR3_DDA

      INTEGER :: NPHYT,ITEMP,IDMP
      REAL :: TEMP,F,TSUNRISE,TSUNSET,TDAY,ALGALP,ALGALN,ALGALS,DFPO4,DFSI &
             ,CHLA1,CHLA2,CHLA3,CHLA,GITMAX,XEMP1,XEMP2,XEMP3,RESP2,GRAZ2  &
             ,RESP3,GRAZ3,APPNET,GPDP 
      
!JQI      ALLOCATE(SAL(NXY,NZ))        ;ALLOCATE(CDSAL(NXY,NZ))
!JQI      ALLOCATE(PHYT1(NXY,NZ))      ;ALLOCATE(CDPHYT1(NXY,NZ))
!JQI      ALLOCATE(PHYT2(MT,NZ))       ;ALLOCATE(CDPHYT2(NXY,NZ))
!JQI      ALLOCATE(PHYT3(MT,NZ))       ;ALLOCATE(CDPHYT3(NXY,NZ))
!JQI      ALLOCATE(PO4T(NXY,NZ))       ;ALLOCATE(CDPO4T(NXY,NZ))
!JQI      ALLOCATE(NH4T(NXY,NZ))       ;ALLOCATE(CDNH4T(NXY,NZ))
!JQI      ALLOCATE(NO23(NXY,NZ))       ;ALLOCATE(CDNO23(NXY,NZ))
!JQI      ALLOCATE(SIT(NXY,NZ))        ;ALLOCATE(CDSIT(NXY,NZ))

!JQI      SAL(:,:)     = CARAY(:,:,1)  ;CDSAL(:,:)   = CDARAY(:,:,1)
!JQI      PHYT1(:,:)   = CARAY(:,:,2)  ;CDPHYT1(:,:) = CDARAY(:,:,2)
!JQI      PHYT2(:,:)   = CARAY(:,:,3)  ;CDPHYT2(:,:) = CDARAY(:,:,3)
!JQI      PHYT3(:,:)   = CARAY(:,:,4)  ;CDPHYT3(:,:) = CDARAY(:,:,4)
!JQI      PO4T(:,:)    = CARAY(:,:,9)  ;CDPO4T(:,:)  = CDARAY(:,:,9)
!JQI      NH4T(:,:)    = CARAY(:,:,14) ;CDNH4T(:,:)  = CDARAY(:,:,14)
!JQI      NO23(:,:)    = CARAY(:,:,15) ;CDNO23(:,:)  = CDARAY(:,:,15)
!JQI      SIT(:,:)     = CARAY(:,:,17) ;CDSIT(:,:)   = CDARAY(:,:,17)

!JQI      ALLOCATE(DPO4(MT,NZ))
!JQI      ALLOCATE(DNH4(MT,NZ))
!JQI      ALLOCATE(DSI(MT,NZ))

!JQI      DPO4(:,:) = CKINARRAY(:,:,1)
!JQI      DNH4(:,:) = CKINARRAY(:,:,2)
!JQI      DSI(:,:)  = CKINARRAY(:,:,3)

!JQI      AGMOPT = CONST(1)  ;ACTALG  = CONST(2)  ;KAOPT   = CONST(3)
!JQI      KEOPT  = CONST(4)  ;OPTION5 = CONST(5)  ;OPTION6 = CONST(6)

!JQI      TOPT1  = CONST(9)  ;K1BETA1 = CONST(10)  ;K1BETA2 = CONST(11)
!JQI      K1C    = CONST(12) ;K1T     = CONST(13)  ;IS1     = CONST(14)
!JQI      KMN1   = CONST(15) ;KMP1    = CONST(16)  ;KMS1    = CONST(17)
!JQI      K1RB   = CONST(18) ;K1RT    = CONST(19)  ;K1RG    = CONST(20)
!JQI      K1GRZC = CONST(21) ;K1GRZT  = CONST(22)  ;CCHL1   = CONST(23)
!JQI      CRBP11 = CONST(24) ;CRBP12  = CONST(25)  ;CRBP13  = CONST(26)
 !JQI     CRBN11 = CONST(27) ;CRBN12  = CONST(28)  ;CRBN13  = CONST(29)
!JQI      CRBS11 = CONST(30) ;CRBS12  = CONST(31)  ;CRBS13  = CONST(32)
!JQI      XKC1   = CONST(33) ;VSBAS1  = CONST(34)  ;VSNTR1  = CONST(35)

!JQI      TOPT2  = CONST(41)  ;K2BETA1 = CONST(42) ;K2BETA2 = CONST(43)
!JQI      K2C    = CONST(44)  ;K2T     = CONST(45) ;IS2     = CONST(46)    
!JQI      KMN2   = CONST(47)  ;KMP2    = CONST(48) ;KMS2    = CONST(49)   
!JQI      K2RB   = CONST(50)  ;K2RT    = CONST(51) ;K2RG    = CONST(52)   
!JQI      K2GRZC = CONST(53)  ;K2GRZT  = CONST(54) ;CCHL2   = CONST(55)  
!JQI      CRBP21 = CONST(56)  ;CRBP22  = CONST(57) ;CRBP23  = CONST(58) 
!JQI      CRBN21 = CONST(59)  ;CRBN22  = CONST(60) ;CRBN23  = CONST(61) 
!JQI      CRBS21 = CONST(62)  ;CRBS22  = CONST(63) ;CRBS23  = CONST(64) 
!JQI      XKC2   = CONST(65)  ;VSBAS2  = CONST(66) ;VSNTR2  = CONST(67)

!JQI      TOPT3  = CONST(73)  ;K3BETA1 = CONST(74) ;K3BETA2 = CONST(75)
!JQI      K3C    = CONST(76)  ;K3T     = CONST(77) ;IS3     = CONST(78)
!JQI      KMN3   = CONST(79)  ;KMP3    = CONST(80) ;KMS3    = CONST(81)
!JQI      K3RB   = CONST(82)  ;K3RT    = CONST(83) ;K3RG    = CONST(84)
!JQI      K3GRZC = CONST(85)  ;K3GRZT  = CONST(86) ;CCHL3   = CONST(87)
!JQI      CRBP31 = CONST(88)  ;CRBP32  = CONST(89) ;CRBP33  = CONST(90)
!JQI      CRBN31 = CONST(91)  ;CRBN32  = CONST(92) ;CRBN33  = CONST(93)
!JQI      CRBS31 = CONST(94)  ;CRBS32  = CONST(95) ;CRBS33  = CONST(96)
!JQI      XKC3   = CONST(97)  ;VSBAS3  = CONST(98) ;VSNTR3  = CONST(99)

!JQI      FLOCEX = CONST(156) 
!JQI      VSBAST = CONST(169) ;KADPO4 = CONST(177) ;KADSI = CONST(178)

!JQI      ALLOCATE(KEBS(MT))
!JQI      KEBS(:) = PARAM2D(:,6)

!JQI      ALLOCATE(SSLDS(MT,NZ))
!JQI      SSLDS(:,:) = PARAM3D(:,:,1)
      
      IF(.NOT. ALLOCATED(VARRAY)) ALLOCATE(VARRAY(0:MT,NZ,25))
      VARRAY = SCRATCH_KIN
      
!JQI      ALLOCATE(XEMPRC(MT,NZ)) 
!JQI      ALLOCATE(SAL_DDA(MT,NZ))
!JQI      ALLOCATE(PHYT1_DDA(MT,NZ))
!JQI      ALLOCATE(PHYT2_DDA(MT,NZ))
!JQI      ALLOCATE(PHYT3_DDA(MT,NZ))
!JQI      ALLOCATE(CHLA1_DDA(MT,NZ))
!JQI      ALLOCATE(CHLA2_DDA(MT,NZ))
!JQI      ALLOCATE(CHLA3_DDA(MT,NZ))
!JQI      ALLOCATE(CCHL1_DDA(MT,NZ))
!JQI      ALLOCATE(CCHL2_DDA(MT,NZ))
!JQI      ALLOCATE(CCHL3_DDA(MT,NZ))
!JQI      ALLOCATE(SAL_DMIN(MT,NZ))
!JQI      ALLOCATE(SAL_DMAX(MT,NZ))
!JQI      XEMPRC(:,:)    = VARRAY(:,:,1) 
!JQI      SAL_DDA(:,:)   = VARRAY(:,:,2)
!JQI      PHYT1_DDA(:,:) = VARRAY(:,:,3)
!JQI      PHYT2_DDA(:,:) = VARRAY(:,:,4)
!JQI      PHYT3_DDA(:,:) = VARRAY(:,:,5)
!JQI      CHLA1_DDA(:,:) = VARRAY(:,:,6)
!JQI      CHLA2_DDA(:,:) = VARRAY(:,:,7)
!JQI      CHLA3_DDA(:,:) = VARRAY(:,:,8)
!JQI      CCHL1_DDA(:,:) = VARRAY(:,:,9)
!JQI      CCHL2_DDA(:,:) = VARRAY(:,:,10)
!JQI      CCHL3_DDA(:,:) = VARRAY(:,:,11)
!JQI      SAL_DMIN(:,:)  = VARRAY(:,:,12)
!JQI      SAL_DMAX(:,:)  = VARRAY(:,:,13)
!====================================================================
      SELECT CASE(IDX)

      CASE(1)

!JQI      NPHYT = ACTALG+0.5
      NPHYT = CONST(2)+0.5

!        COMPUTE TERMS FOR VARIABLE NUTRIENT STOICHIOMETRY
!JQI      IF(CRBP12 > 0) THEN
      IF(CONST(25) > 0) THEN
!JQI       IF(CRBP12 > CRBP11) THEN
       IF(CONST(25) > CONST(24)) THEN
!JQI        CRBP12 = CRBP12-CRBP11
        CONST(25) = CONST(25)-CONST(24)
       ELSE
!JQI        IF(MSR) WRITE(OUT,1001)  CRBP11,CRBP12
        IF(MSR) WRITE(OUT,1001)  CONST(24),CONST(25)
 1001   FORMAT(///10X,'ERROR...CRBP11 > CRBP12',F6.2,' > ',F6.2)
       ENDIF
      ENDIF
!JQI      IF(CRBN12 > 0) THEN
      IF(CONST(28) > 0) THEN
!JQI       IF(CRBN12 > CRBN11) THEN
       IF(CONST(28) > CONST(27)) THEN
!JQI        CRBN12 = CRBN12-CRBN11
        CONST(28) = CONST(28)-CONST(27)
       ELSE
!JQI        IF(MSR) WRITE(OUT,1002)  CRBN11,CRBN12
        IF(MSR) WRITE(OUT,1002)  CONST(27),CONST(28)
 1002   FORMAT(///10X,'ERROR...CRBN11 > CRBN12',F6.2,' > ',F6.2)
       ENDIF
      ENDIF
!JQI      IF(CRBS12 > 0) THEN
      IF(CONST(31) > 0) THEN
!JQI       IF(CRBS12 > CRBS11) THEN
       IF(CONST(31) > CONST(30)) THEN
!JQI        CRBS12 = CRBS12-CRBS11
        CONST(31) = CONST(31)-CONST(30)
       ELSE
!JQI        IF(MSR) WRITE(OUT,1003)  CRBS11,CRBS12
        IF(MSR) WRITE(OUT,1003)  CONST(30),CONST(31)
 1003   FORMAT(///10X,'ERROR...CRBS11 > CRBS12',F6.2,' > ',F6.2)
       ENDIF
      ENDIF
!JQI      IF(CRBP22 > 0) THEN
      IF(CONST(57) > 0) THEN
!JQI       IF(CRBP22 > CRBP21) THEN
       IF(CONST(57) > CONST(56)) THEN
!JQI        CRBP22 = CRBP22-CRBP21
        CONST(57) = CONST(57)-CONST(56)
       ELSE
!JQI        IF(MSR) WRITE(OUT,1004)  CRBP21,CRBP22
        IF(MSR) WRITE(OUT,1004)  CONST(56),CONST(57)
 1004   FORMAT(///10X,'ERROR...CRBP21 > CRBP22',F6.1,' > ',F6.1)
       ENDIF
      ENDIF
!JQI      IF(CRBN22 > 0) THEN
      IF(CONST(60) > 0) THEN
!JQI       IF(CRBN22 > CRBN21) THEN
       IF(CONST(60) > CONST(59)) THEN
!JQI        CRBN22 = CRBN22-CRBN21
        CONST(60) = CONST(60)-CONST(59)
       ELSE
!JQI        IF(MSR) WRITE(OUT,1005)  CRBN21,CRBN22
        IF(MSR) WRITE(OUT,1005)  CONST(59),CONST(60)
 1005   FORMAT(///10X,'ERROR...CRBN21 > CRBN22',F6.2,' > ',F6.2)
       ENDIF
      ENDIF
!JQI      IF(CRBS22 > 0) THEN
      IF(CONST(63) > 0) THEN
!JQI       IF(CRBS22 > CRBS21) THEN
       IF(CONST(63) > CONST(62)) THEN
!JQI        CRBS22 = CRBS22-CRBS21
        CONST(63) = CONST(63)-CONST(62)
       ELSE
!JQI        IF(MSR) WRITE(OUT,1006)  CRBS21,CRBS22
        IF(MSR) WRITE(OUT,1006)  CONST(62),CONST(63)
 1006   FORMAT(///10X,'ERROR...CRBS21 > CRBS22',F6.2,' > ',F6.2)
       ENDIF
      ENDIF
!JQI      IF(CRBP32 > 0) THEN
      IF(CONST(89) > 0) THEN
!JQI       IF(CRBP32 > CRBP31) THEN
       IF(CONST(89) > CONST(88)) THEN
!JQI        CRBP32 = CRBP32-CRBP31
        CONST(89) = CONST(89)-CONST(88)
       ELSE
!JQI        IF(MSR) WRITE(OUT,1007)  CRBP31,CRBP32
        IF(MSR) WRITE(OUT,1007)  CONST(88),CONST(89)
 1007   FORMAT(///10X,'ERROR...CRBP31 > CRBP32',F6.1,' > ',F6.1)
       ENDIF
      ENDIF
!JQI      IF(CRBN32 > 0) THEN
      IF(CONST(92) > 0) THEN
!JQI       IF(CRBN32 > CRBN31) THEN
       IF(CONST(92) > CONST(91)) THEN
!JQI        CRBN32 = CRBN32-CRBN31
        CONST(92) = CONST(92)-CONST(91)
       ELSE
!JQI        IF(MSR) WRITE(OUT,1008)  CRBN31,CRBN32
        IF(MSR) WRITE(OUT,1008)  CONST(91),CONST(92)
 1008   FORMAT(///10X,'ERROR...CRBN31 > CRBN32',F6.2,' > ',F6.2)
       ENDIF
      ENDIF
!JQI      IF(CRBS32 > 0) THEN
      IF(CONST(95) > 0) THEN
!JQI       IF(CRBS32 > CRBS31) THEN
       IF(CONST(95) > CONST(94)) THEN
!JQI        CRBS32 = CRBS32-CRBS31
        CONST(95) = CONST(95)-CONST(94)
       ELSE
!JQI        IF(MSR) WRITE(OUT,1009)  CRBS31,CRBS32
        IF(MSR) WRITE(OUT,1009)  CONST(94),CONST(95)
 1009   FORMAT(///10X,'ERROR...CRBS31 > CRBS32',F6.2,' > ',F6.2)
       ENDIF
      ENDIF

!        COMPUTE ALGAL NUTRIENT TO CARBON RATIOS
!JQI      PCRB1 = 1./CRBP11
      PCRB1 = 1./CONST(24)
!JQI      NCRB1 = 1./CRBN11
      NCRB1 = 1./CONST(27)
!JQI      SCRB1 = 1./CRBS11
      SCRB1 = 1./CONST(30)
!JQI      PCRB2 = 1./CRBP21
      PCRB2 = 1./CONST(56)
!JQI      NCRB2 = 1./CRBN21
      NCRB2 = 1./CONST(59)
!JQI      SCRB2 = 1./CRBS21
      SCRB2 = 1./CONST(62)
!JQI      PCRB3 = 1./CRBP31
      PCRB3 = 1./CONST(88)
!JQI      NCRB3 = 1./CRBN31
      NCRB3 = 1./CONST(91)
!JQI      SCRB3 = 1./CRBS31
      SCRB3 = 1./CONST(94)

!        COMPUTE KLWIND FROM WIND SPEED

      WIND = BFUNC(3)
      KLWIND = 0.728*SQRT(WIND) - 0.317*WIND + 0.0372*WIND*WIND

!        SETUP TEMPERATURE-CORRECTED REACTION RATES IN TABLE-LOOKUP FORM
      DO ITEMP=1,450
       TEMP = (FLOAT(ITEMP-1)/10.+0.05) - 20.
!JQI       K1RBT(ITEMP)   = K1RB*K1RT**TEMP
       K1RBT(ITEMP)   = CONST(18)*CONST(19)**TEMP
!JQI       K1GRZCT(ITEMP) = K1GRZC*K1GRZT**TEMP
       K1GRZCT(ITEMP) = CONST(21)*CONST(22)**TEMP
!JQI       K2RBT(ITEMP)   = K2RB*K2RT**TEMP
       K2RBT(ITEMP)   = CONST(50)*CONST(51)**TEMP
!JQI       K2GRZCT(ITEMP) = K2GRZC*K2GRZT**TEMP
       K2GRZCT(ITEMP) = CONST(53)*CONST(54)**TEMP
!JQI       K3RBT(ITEMP)   = K3RB*K3RT**TEMP
       K3RBT(ITEMP)   = CONST(82)*CONST(83)**TEMP
!JQI       K3GRZCT(ITEMP) = K3GRZC*K3GRZT**TEMP
       K3GRZCT(ITEMP) = CONST(85)*CONST(86)**TEMP
      END DO

! INITIALIZE ARRAY FOR DETAILED DUMP AVERAGING, IF REQUIRED
      IF(IDDOPT == 1) THEN
       RNUTR1_DDA = 0.
       RNUTR2_DDA = 0.
       RNUTR3_DDA = 0.
       GPDP1_DDA  = 0.
       GPDP2_DDA  = 0.
       GPDP3_DDA  = 0.
      ENDIF

      RETURN

      CASE(2)
!JQI      ENTRY STD_EUTRO_MAIN

!        LIGHT SATURATION VALUES
!JQI      ISAT1 = IS1
      ISAT1 = CONST(14)
!JQI      ISAT2 = IS2
      ISAT2 = CONST(46)
!JQI      ISAT3 = IS3
      ISAT3 = CONST(78)

      IF(NXCALL13T <= TIME) THEN
       CALL RCA13(NXCALL13T)
      ENDIF
      ITOTSF = (TIME-NXFUNT(1))*MFUNC(1) + BFUNC(1)
      F = (TIME-NXFUNT(2))*MFUNC(2) + BFUNC(2)
      WIND = (TIME-NXFUNT(3))*MFUNC(3) + BFUNC(3)
      KETVF = (TIME-NXFUNT(4))*MFUNC(4) + BFUNC(4)

!JQI      IF(IS1 == 0.)  ISAT1=ITOTSF
      IF(CONST(14) == 0.)  ISAT1=ITOTSF
!JQI      IF(IS2 == 0.)  ISAT2=ITOTSF
      IF(CONST(46) == 0.)  ISAT2=ITOTSF
!JQI      IF(IS3 == 0.)  ISAT3=ITOTSF
      IF(CONST(78) == 0.)  ISAT3=ITOTSF
      TSUNRISE = 0.5-F/2.
      TSUNSET = 0.5+F/2.
      TDAY = MOD(TIME,1.0)
      IF(TDAY < TSUNRISE .OR. TDAY > TSUNSET) THEN
       ISURF = 0.0
      ELSE
       ISURF = ITOTSF/F/0.635 * SIN(3.14159*(TDAY-TSUNRISE)/F)
      ENDIF

!        COMPUTE KLWIND FROM WIND SPEED

      KLWIND = 0.728*SQRT(WIND) - 0.317*WIND + 0.0372*WIND*WIND

!        UPDATE KEBASE AS APPROPRIATE
!JQI      IF(KEOPT == 2.) THEN
      IF(CONST(4) == 2.) THEN
       DO IXY=1,M
        IF(FSM(IXY) == 1.) KEBASE(IXY) = KETVF
       ENDDO
!JQI      ELSEIF(KEOPT == 3.) THEN
      ELSEIF(CONST(4) == 3.) THEN
       DO IXY=1,M
!JQI        IF(FSM(IXY).EQ.1.)  KEBASE(IXY) = KETVF*KEBS(IXY)
        IF(FSM(IXY).EQ.1.)  KEBASE(IXY) = KETVF*PARAM2D(IXY,6)
       ENDDO
      ENDIF

!        COMPUTE ALGAL NUTRIENT TO CARBON RATIOS AND AVAILABLE NUTRIENTS
      print*,'NPHYT= ',NPHYT
!! c$doacross local(iz,iy,ix,algalp,dfpo4,algaln,algals,dfsi)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) == 1.) THEN

!        PHOSPHORUS

!JQI         IF(CRBP12 /= 0. .OR. CRBP22 /= 0.) THEN
         IF(CONST(25) /= 0. .OR. CONST(57) /= 0.) THEN
          CRBP1(1)=CONST(24);CRBP1(2)=CONST(25);CRBP1(3)=CONST(26)
	  CRBP2(1)=CONST(56);CRBP2(2)=CONST(57);CRBP2(3)=CONST(58)
          CRBP3(1)=CONST(88);CRBP3(2)=CONST(89);CRBP3(3)=CONST(90)
!JQI          CALL STOICH(NPHYT,PO4T(IXY,IZ),KADPO4,SSLDS(IXY,IZ)
!JQI     .        ,PHYT1(IXY,IZ),PHYT2(IXY,IZ),PHYT3(IXY,IZ)
!JQI     .        ,CRBP1,CRBP2,CRBP3,PCRB1(IXY,IZ)
!JQI     .        ,PCRB2(IXY,IZ),PCRB3(IXY,IZ))
          CALL STOICH(NPHYT,CARAY(IXY,IZ,9),CONST(177),PARAM3D(IXY,IZ,1)   &
              ,CARAY(IXY,IZ,2),CARAY(IXY,IZ,3),CARAY(IXY,IZ,4)             &
              ,CRBP1,CRBP2,CRBP3,PCRB1(IXY,IZ)                             &
              ,PCRB2(IXY,IZ),PCRB3(IXY,IZ))
         ENDIF

!        FRACTION OF PO4T BOUND IN ALGAL BIOMASS
!JQI         ALGALP = PCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .          + PCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .          + PCRB3(IXY,IZ)*PHYT3(IXY,IZ)
         ALGALP = PCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + PCRB2(IXY,IZ)*CARAY(IXY,IZ,3) &
                + PCRB3(IXY,IZ)*CARAY(IXY,IZ,4)

!        FRACTION OF DISSOLVED INORGANIC PHOSPHORUS
!JQI         DFPO4 = 1./(1.+KADPO4*SSLDS(IXY,IZ))
         DFPO4 = 1./(1.+CONST(177)*PARAM3D(IXY,IZ,1))

!        AVAILABLE INORGANIC PHOSPHORUS
!JQI         DPO4(IXY,IZ) = MAX(0.0,DFPO4*(PO4T(IXY,IZ)-ALGALP))
         CKINARRAY(IXY,IZ,1) = MAX(0.0,DFPO4*(CARAY(IXY,IZ,9)-ALGALP))

!        SORBED PHOSPHORUS
!JQI         PO4SS(IXY,IZ) = PO4T(IXY,IZ) - ALGALP - DPO4(IXY,IZ)
         PO4SS(IXY,IZ) = CARAY(IXY,IZ,9) - ALGALP - CKINARRAY(IXY,IZ,1)

!        NITROGEN

!JQI         IF(CRBN12 /= 0. .OR. CRBN22 /= 0.) THEN
         IF(CONST(28) /= 0. .OR. CONST(60) /= 0.) THEN
          CRBN1(1)=CONST(27);CRBN1(2)=CONST(28);CRBN1(3)=CONST(29)
          CRBN2(1)=CONST(59);CRBN2(2)=CONST(60);CRBN2(3)=CONST(61)
          CRBN3(1)=CONST(91);CRBN3(2)=CONST(92);CRBN3(3)=CONST(93)
!JQI          CALL STOICH(NPHYT,NH4T(IXY,IZ)+NO23(IXY,IZ),0.0
!JQI     .        ,SSLDS(IXY,IZ)
!JQI     .        ,PHYT1(IXY,IZ),PHYT2(IXY,IZ),PHYT3(IXY,IZ)
!JQI     .        ,CRBN1,CRBN2,CRBN3,NCRB1(IXY,IZ)
!JQI     .        ,NCRB2(IXY,IZ),NCRB3(IXY,IZ))
          CALL STOICH(NPHYT,CARAY(IXY,IZ,14)+CARAY(IXY,IZ,15),0.0    &
              ,PARAM3D(IXY,IZ,1),CARAY(IXY,IZ,2),CARAY(IXY,IZ,3),CARAY(IXY,IZ,4) &
              ,CRBN1,CRBN2,CRBN3,NCRB1(IXY,IZ),NCRB2(IXY,IZ),NCRB3(IXY,IZ))
         ENDIF

!        FRACTION OF NH4T BOUND IN ALGAL BIOMASS
!JQI         ALGALN = NCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .          + NCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .          + NCRB3(IXY,IZ)*PHYT3(IXY,IZ)
         ALGALN = NCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + NCRB2(IXY,IZ)*CARAY(IXY,IZ,3) &
                + NCRB3(IXY,IZ)*CARAY(IXY,IZ,4)

!        AVAILABLE AMMONIA
!JQI         DNH4(IXY,IZ) = MAX(0.0,(NH4T(IXY,IZ) - ALGALN))
         CKINARRAY(IXY,IZ,2) = MAX(0.0,(CARAY(IXY,IZ,14) - ALGALN))

!        SILICA

!JQI         IF(CRBS12 /= 0. .OR. CRBS22 /= 0.) THEN
         IF(CONST(31) /= 0. .OR. CONST(63) /= 0.) THEN
          CRBS1(1)=CONST(30);CRBS1(2)=CONST(31);CRBS1(3)=CONST(32)
          CRBS2(1)=CONST(62);CRBS2(2)=CONST(63);CRBS2(3)=CONST(64)
          CRBS3(1)=CONST(94);CRBS3(2)=CONST(95);CRBS3(3)=CONST(96)
!JQI          CALL STOICH(NPHYT,SIT(IXY,IZ),KADSI,SSLDS(IXY,IZ)
!JQI     .        ,PHYT1(IXY,IZ),PHYT2(IXY,IZ),PHYT3(IXY,IZ)
!JQI     .        ,CRBS1,CRBS2,CRBS3,SCRB1(IXY,IZ)
!JQI     .        ,SCRB2(IXY,IZ),SCRB3(IXY,IZ))
          CALL STOICH(NPHYT,CARAY(IXY,IZ,17),CONST(178)           &
              ,PARAM3D(IXY,IZ,1),CARAY(IXY,IZ,2),CARAY(IXY,IZ,3)  &
              ,CARAY(IXY,IZ,4),CRBS1,CRBS2,CRBS3,SCRB1(IXY,IZ)    &
              ,SCRB2(IXY,IZ),SCRB3(IXY,IZ))
         ENDIF

!        FRACTION OF SIT BOUND IN ALGAL BIOMASS
!JQI         ALGALS = SCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .          + SCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .          + SCRB3(IXY,IZ)*PHYT3(IXY,IZ)
         ALGALS = SCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + SCRB2(IXY,IZ)*CARAY(IXY,IZ,3) &
                + SCRB3(IXY,IZ)*CARAY(IXY,IZ,4)

!        COMPUTE FRACTION OF DISSOLVED AVAILABLE SILICA
!JQI         DFSI = 1./(1.+KADSI*SSLDS(IXY,IZ))
         DFSI = 1./(1.+CONST(178)*PARAM3D(IXY,IZ,1))

!        AVAILABLE SILICA
!JQI         DSI(IXY,IZ) = MAX(0.0,DFSI*(SIT(IXY,IZ)-ALGALS))
         CKINARRAY(IXY,IZ,3) = MAX(0.0,DFSI*(CARAY(IXY,IZ,17)-ALGALS))

!        SORBED SILICA
!JQI         SISS(IXY,IZ) = SIT(IXY,IZ) - ALGALS - DSI(IXY,IZ)
         SISS(IXY,IZ) = CARAY(IXY,IZ,17) - ALGALS - CKINARRAY(IXY,IZ,3)
        END IF
       END DO
      END DO
      
!        GET LIGHT ATTENUATION COEFFICIENTS


!Added for Zhao
      ALLOCATE(ITOT_L(0:MT,NZ))
!End added for Zhao
!$doacross local(iy,ix,iz,chla,chla1,chla2,chla3,itot)
!$& , share(chlaveg,chlming,chlmaxg)
      DO IXY=1,MT
       DO IZ=1,NZ
!       COMPUTE TOTAL CHLOROPHYLL BASED ON
!       FIXED CARBON TO CHLOROPHYLL RATIO 
!JQI        CHLA1 = PHYT1(IXY,IZ)/CCHL1
        CHLA1 = CARAY(IXY,IZ,2)/CONST(23)
!JQI        CHLA2 = PHYT2(IXY,IZ)/CCHL2
        CHLA2 = CARAY(IXY,IZ,3)/CONST(55)
!JQI        CHLA3 = PHYT3(IXY,IZ)/CCHL3
        CHLA3 = CARAY(IXY,IZ,4)/CONST(87)
        CHLA = CHLA1+CHLA2+CHLA3
        CHLAVEG(IXY,IZ) = CHLAVEG(IXY,IZ) + CHLA*1000.
        CHLMING(IXY,IZ) = AMIN1(CHLMING(IXY,IZ),CHLA*1000.)
        CHLMAXG(IXY,IZ) = AMAX1(CHLMAXG(IXY,IZ),CHLA*1000.)
        IF(FSM(IXY) > 0.) THEN

!        INCLUDE SELF-SHADING EFFECT ON EXTINCTION COEFF
!JQI         SKE(IXY,IZ) = KEBASE(IXY)
!JQI     .        + 1000.*(XKC1*CHLA1+XKC2*CHLA2+XKC3*CHLA3)
         SKE(IXY,IZ) = KEBASE(IXY) + 1000.*(CONST(33)*CHLA1+CONST(65)*CHLA2+CONST(97)*CHLA3)
 
!        LIGHT ATTENUATION
         IF(IZ == 1) THEN
          ITOT=ISURF
         ELSE
          ITOT=ATTENL(IXY,IZ-1)
         ENDIF

!Added for Zhao
         ITOT_L(IXY,IZ) = ITOT
!End add for Zhao

         ATTENL(IXY,IZ) = ITOT*EXP(-SKE(IXY,IZ)*HBAR(IXY)*DZ(IXY,IZ))
        END IF
       END DO
      END DO

!Added for Zhao
    IF(SERIAL)THEN
      do ixy = 1,nxy
        write(110,'(2f10.2, <NZ>f12.7)') (ATTENL(ixy,iz),iz = 1,nz)
      end do
      write(110,*) 
    END IF
#  if defined (MULTIPROCESSOR)
    IF(PAR)THEN
     ALLOCATE(ATTENL_TMP(NXY,NZ))     ;ATTENL_TMP = 0.0
     ALLOCATE(ITOT_TMP(NXY,NZ))       ;ITOT_TMP   = 0.0
     ALLOCATE(SKE_TMP(NXY,NZ))        ;SKE_TMP    = 0.0
     ALLOCATE(HBAR_TMP(NXY))          ;HBAR_TMP   = 0.0
     ALLOCATE(DZ_TMP(NXY,NZ))         ;DZ_TMP     = 0.0
     CALL GATHER(LBOUND(ATTENL,1),  UBOUND(ATTENL,1),  M,NXY,NZ,MYID,NPROCS,NMAP,ATTENL,ATTENL_TMP)
     CALL GATHER(LBOUND(ITOT_L,1),  UBOUND(ITOT_L,1),  M,NXY,NZ,MYID,NPROCS,NMAP,ITOT_L,ITOT_TMP)
     CALL GATHER(LBOUND(SKE,1),     UBOUND(SKE,1),     M,NXY,NZ,MYID,NPROCS,NMAP,SKE,   SKE_TMP)
     CALL GATHER(LBOUND(HBAR,1),    UBOUND(HBAR,1),    M,NXY,1, MYID,NPROCS,NMAP,HBAR,  HBAR_TMP)
     CALL GATHER(LBOUND(DZ,1),      UBOUND(DZ,1),      M,NXY,NZ,MYID,NPROCS,NMAP,DZ,    DZ_TMP)
 
    IF(IDISK == 1 .OR. IDISK == 3) THEN
      if(msr) then
        do ixy = 1,nxy
         write(110,'(2f10.2, <NZ>f12.7)') (ATTENL_TMP(ixy,iz),iz = 1,nz)
         write(111,'(2f10.2, <NZ>f12.7)') (ITOT_TMP(ixy,iz),iz = 1,nz)
         write(112,'(2f10.2, <NZ>f12.7)') (SKE_TMP(ixy,iz),iz = 1,nz)
         write(113,'(2f10.2, f12.7)')      HBAR_TMP(ixy)
         write(114,'(2f10.2, <NZ>f12.7)') (DZ_TMP(ixy,iz),iz = 1,nz)
	end do
        write(110,*) 
        write(111,*) 
        write(112,*) 
        write(113,*) 
        write(114,*) 
      end if
    ENDIF
      DEALLOCATE(ATTENL_TMP,ITOT_TMP,SKE_TMP,HBAR_TMP,DZ_TMP)

   END IF
#  endif
   
   DEALLOCATE(ITOT_L)
!End add for Zhao

!
!             SYSTEM 2 - PHYTOPLANKTON - WINTER DIATOMS
!

!        GROWTH...TEMPERATURE AND LIGHT

!$doacross local(iy,ix,iz,gitmax,itot,xemp1,xemp2,xemp3,temp1,temp2)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) > 0.) THEN

!        TEMPERATURE CORRECT GROWTH RATE
!JQI         IF(HYDTEMP(IXY,IZ) <= TOPT1) 
         IF(HYDTEMP(IXY,IZ) <= CONST(9))                                 &
!JQI     .      GITMAX = K1C*EXP(-K1BETA1*(HYDTEMP(IXY,IZ)-TOPT1)**2.)
            GITMAX = CONST(12)*EXP(-CONST(10)*(HYDTEMP(IXY,IZ)-CONST(9))**2.)
!JQI         IF(HYDTEMP(IXY,IZ) > TOPT1) 
         IF(HYDTEMP(IXY,IZ) > CONST(9))                                  &
!JQI     .      GITMAX = K1C*EXP(-K1BETA2*(TOPT1-HYDTEMP(IXY,IZ))**2.) 
            GITMAX = CONST(12)*EXP(-CONST(11)*(CONST(9)-HYDTEMP(IXY,IZ))**2.) 
 
!        LIGHT ATTENUATION
         IF(IZ == 1) THEN
          ITOT=ISURF
         ELSE
          ITOT=ATTENL(IXY,IZ-1)
         ENDIF

!        COMPUTE GROWTH RATE REDUCTION DUE TO LIGHT CONDITIONS
         TEMP1(IXY) = SKE(IXY,IZ)*HBAR(IXY)*DZ(IXY,IZ)
         TEMP2(IXY) = ITOT/ISAT1

         RLGHT1(IXY,IZ) = 2.718*(EXP(-TEMP2(IXY)*EXP(-TEMP1(IXY)))     &
                        - EXP(-TEMP2(IXY)))/TEMP1(IXY)

!        GROWTH...NUTRIENT EFFECTS

!        COMPUTE MICHAELIS TERMS
!JQI         XEMP1 = (DNH4(IXY,IZ)+NO23(IXY,IZ))
!JQI     .          /(KMN1+DNH4(IXY,IZ)+NO23(IXY,IZ))
         XEMP1 = (CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))               &
                /(CONST(15)+CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))
!JQI         XEMP2 = DPO4(IXY,IZ)/(KMP1+DPO4(IXY,IZ))
         XEMP2 = CKINARRAY(IXY,IZ,1)/(CONST(16)+CKINARRAY(IXY,IZ,1))
!JQI         XEMP3 = DSI(IXY,IZ)/(KMS1+DSI(IXY,IZ))
         XEMP3 = CKINARRAY(IXY,IZ,3)/(CONST(17)+CKINARRAY(IXY,IZ,3))

!        COMPUTE GROWTH RATE REDUCTION DUE TO NUTRIENT LIMITATION 
!        USE 'MINIMUM' FORM RATHER THAN 'MULTIPLICATIVE' FORM 
         RNUTR1(IXY,IZ) = AMIN1(XEMP1,XEMP2,XEMP3)

!        EFFECT OF NUTRIENT LIMITATION ON SETTLING
!JQI         ALG1VS(IXY,IZ) = (VSBAS1 + VSNTR1*(1.-RNUTR1(IXY,IZ)))
!JQI     .                    *VSBAST**STP20(IXY,IZ)
         ALG1VS(IXY,IZ) = (CONST(34) + CONST(35)*(1.-RNUTR1(IXY,IZ)))  &
                          *CONST(169)**STP20(IXY,IZ)

!        GROSS GROWTH RATE ... COMBINE FACTORS
!JQI         GPP1(IXY,IZ) = RNUTR1(IXY,IZ)*RLGHT1(IXY,IZ)
!JQI     .                             *GITMAX*PHYT1(IXY,IZ)
         GPP1(IXY,IZ) = RNUTR1(IXY,IZ)*RLGHT1(IXY,IZ)           &
                        *GITMAX*CARAY(IXY,IZ,2)

 
!        DEATH...RESPIRATION AND GRAZING

!        RESPIRATION
!JQI         RESP(IXY,IZ) = K1RG*GPP1(IXY,IZ) +
!JQI     .                  K1RBT(ISTP20(IXY,IZ))*PHYT1(IXY,IZ)
         RESP(IXY,IZ) = CONST(20)*GPP1(IXY,IZ) +                  &
                        K1RBT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,2)

!        GRAZING
!JQI         GRAZ(IXY,IZ) = K1GRZCT(ISTP20(IXY,IZ))*PHYT1(IXY,IZ)
         GRAZ(IXY,IZ) = K1GRZCT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,2)

!        NET LOSS
         DPP1(IXY,IZ) = (RESP(IXY,IZ)+GRAZ(IXY,IZ))

!        FORMULATE DERIVATIVE ... NET GROWTH (GP-DP)
!JQI         CDPHYT1(IXY,IZ) = ((1.-FLOCEX)*GPP1(IXY,IZ)-DPP1(IXY,IZ))
         CDARAY(IXY,IZ,2) = ((1.-CONST(156))*GPP1(IXY,IZ)-DPP1(IXY,IZ))
!JQI         GPDP1_DDA(IXY,IZ) = GPDP1_DDA(IXY,IZ) +
!JQI     .                          +  CDPHYT1(IXY,IZ)/PHYT1(IXY,IZ)
         GPDP1_DDA(IXY,IZ) = GPDP1_DDA(IXY,IZ) + CDARAY(IXY,IZ,2)/CARAY(IXY,IZ,2)
        ENDIF
       END DO
      END DO

!
!             SYSTEM 3 - PHYTOPLANKTON - SUMMER FLAGELLATES
!
 
!$doacross local(iz,iy,ix,gitmax,itot,xemp1,xemp2,xemp3,resp2,graz2
!$&             ,temp1,temp2,K2CX)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) > 0.) THEN

!        GROWTH...TEMPERATURE AND LIGHT

!        TEMPERATURE CORRECT GROWTH RATE
!JQI         IF(HYDTEMP(IXY,IZ) <= TOPT2)
         IF(HYDTEMP(IXY,IZ) <= CONST(41))                             &
!JQI     .      GITMAX = K2C*EXP(-K2BETA1*(HYDTEMP(IXY,IZ)-TOPT2)**2.)
            GITMAX = CONST(44)*EXP(-CONST(42)*(HYDTEMP(IXY,IZ)-CONST(41))**2.)
!JQI         IF(HYDTEMP(IXY,IZ) > TOPT2)
         IF(HYDTEMP(IXY,IZ) > CONST(41))                              &
!JQI     .      GITMAX = K2C*EXP(-K2BETA2*(TOPT2-HYDTEMP(IXY,IZ))**2.) 
            GITMAX = CONST(44)*EXP(-CONST(43)*(CONST(41)-HYDTEMP(IXY,IZ))**2.) 

!        LIGHT ATTENUATION
         IF(IZ == 1) THEN
          ITOT=ISURF
         ELSE
          ITOT=ATTENL(IXY,IZ-1)
         ENDIF

!        COMPUTE GROWTH RATE REDUCTION DUE TO LIGHT CONDITIONS
         TEMP1(IXY) = SKE(IXY,IZ)*HBAR(IXY)*DZ(IXY,IZ)
         TEMP2(IXY) = ITOT/ISAT2
         RLGHT2(IXY,IZ) = 2.718*(EXP(-TEMP2(IXY)*EXP(-TEMP1(IXY)))   &
                        - EXP(-TEMP2(IXY)))/TEMP1(IXY)

!        GROWTH...NUTRIENT EFFECTS

!        COMPUTE MICHAELIS TERMS
!JQI         XEMP1 = (DNH4(IXY,IZ)+NO23(IXY,IZ))
!JQI     .              /(KMN2+DNH4(IXY,IZ)+NO23(IXY,IZ))
         XEMP1 = (CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))               &
                 /(CONST(47)+CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))
!JQI         XEMP2 = DPO4(IXY,IZ)/(KMP2+DPO4(IXY,IZ)) 
         XEMP2 = CKINARRAY(IXY,IZ,1)/(CONST(48)+CKINARRAY(IXY,IZ,1)) 
!JQI         XEMP3 = DSI(IXY,IZ)/(KMS2+DSI(IXY,IZ))
         XEMP3 = CKINARRAY(IXY,IZ,3)/(CONST(49)+CKINARRAY(IXY,IZ,3))

!        COMPUTE GROWTH RATE REDUCTION DUE TO NUTRIENT LIMITATION 
!        USE 'MINIMUM' FORM RATHER THAN 'MULTIPLICATIVE' FORM 
         RNUTR2(IXY,IZ) = AMIN1(XEMP1,XEMP2,XEMP3)

!        EFFECT OF NUTRIENT LIMITATION ON SETTLING
!JQI         ALG2VS(IXY,IZ) = (VSBAS2 + VSNTR2*(1.-RNUTR2(IXY,IZ)))
!JQI     .                    *VSBAST**STP20(IXY,IZ)
         ALG2VS(IXY,IZ) = (CONST(66) + CONST(67)*(1.-RNUTR2(IXY,IZ)))  &
                          *CONST(169)**STP20(IXY,IZ)

!        GROSS GROWTH RATE ... COMBINE FACTORS
!JQI         GPP2(IXY,IZ) = RNUTR2(IXY,IZ)*RLGHT2(IXY,IZ)
!JQI     .                             *GITMAX*PHYT2(IXY,IZ)
         GPP2(IXY,IZ) = RNUTR2(IXY,IZ)*RLGHT2(IXY,IZ)*GITMAX*CARAY(IXY,IZ,3)


!        DEATH...RESPIRATION AND GRAZING

!        RESPIRATION
!JQI         RESP2 = K2RG*GPP2(IXY,IZ) +
!JQI     .           K2RBT(ISTP20(IXY,IZ))*PHYT2(IXY,IZ)
         RESP2 = CONST(52)*GPP2(IXY,IZ) + K2RBT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,3)
         RESP(IXY,IZ) = RESP(IXY,IZ) + RESP2

!        GRAZING
!JQI         GRAZ2 = K2GRZCT(ISTP20(IXY,IZ))*PHYT2(IXY,IZ) 
         GRAZ2 = K2GRZCT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,3) 
         GRAZ(IXY,IZ) = GRAZ(IXY,IZ) + GRAZ2

!        NET LOSS
         DPP2(IXY,IZ) = RESP2+GRAZ2

!        FORMULATE DERIVATIVE ... NET GROWTH (GP-DP)
!JQI         CDPHYT2(IXY,IZ) = ((1.-FLOCEX)*GPP2(IXY,IZ)-DPP2(IXY,IZ))
         CDARAY(IXY,IZ,3) = ((1.-CONST(156))*GPP2(IXY,IZ)-DPP2(IXY,IZ))
!JQI         GPDP2_DDA(IXY,IZ) = GPDP2_DDA(IXY,IZ) +
!JQI     .                          +  CDPHYT2(IXY,IZ)/PHYT2(IXY,IZ)
         GPDP2_DDA(IXY,IZ) = GPDP2_DDA(IXY,IZ) + CDARAY(IXY,IZ,3)/CARAY(IXY,IZ,3)
        ENDIF
       END DO
      END DO

!
!             SYSTEM 4 - PHYTOPLANKTON - FALL ASSEMBLAGE
!
 
!$doacross local(iz,iy,ix,gitmax,itot,xemp1,xemp2,xemp3,resp2,graz2
!$&             ,temp1,temp2,K2CX)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) > 0.) THEN

!        GROWTH...TEMPERATURE AND LIGHT

!        TEMPERATURE CORRECT GROWTH RATE
!JQI         IF(HYDTEMP(IXY,IZ) <= TOPT3)
         IF(HYDTEMP(IXY,IZ) <= CONST(73))                                &
!JQI     .      GITMAX = K3C*EXP(-K3BETA1*(HYDTEMP(IXY,IZ)-TOPT3)**2.)
            GITMAX = CONST(76)*EXP(-CONST(74)*(HYDTEMP(IXY,IZ)-CONST(73))**2.)
!JQI         IF(HYDTEMP(IXY,IZ) > TOPT3)
         IF(HYDTEMP(IXY,IZ) > CONST(73))                                 &
!JQI     .      GITMAX = K3C*EXP(-K3BETA2*(TOPT3-HYDTEMP(IXY,IZ))**2.) 
            GITMAX = CONST(76)*EXP(-CONST(75)*(CONST(73)-HYDTEMP(IXY,IZ))**2.) 

!        LIGHT ATTENUATION
         IF(IZ == 1) THEN
          ITOT=ISURF
         ELSE
          ITOT=ATTENL(IXY,IZ-1)
         ENDIF

!        COMPUTE GROWTH RATE REDUCTION DUE TO LIGHT CONDITIONS
         TEMP1(IXY) = SKE(IXY,IZ)*HBAR(IXY)*DZ(IXY,IZ)
         TEMP2(IXY) = ITOT/ISAT3
         RLGHT3(IXY,IZ) = 2.718*(EXP(-TEMP2(IXY)*EXP(-TEMP1(IXY)))   &
                        - EXP(-TEMP2(IXY)))/TEMP1(IXY)

!        GROWTH...NUTRIENT EFFECTS

!        COMPUTE MICHAELIS TERMS
!JQI         XEMP1 = (DNH4(IXY,IZ)+NO23(IXY,IZ))
!JQI     .              /(KMN3+DNH4(IXY,IZ)+NO23(IXY,IZ))
         XEMP1 = (CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))                &
                 /(CONST(79)+CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))
!JQI         XEMP2 = DPO4(IXY,IZ)/(KMP3+DPO4(IXY,IZ)) 
         XEMP2 = CKINARRAY(IXY,IZ,1)/(CONST(80)+CKINARRAY(IXY,IZ,1)) 
!JQI         XEMP3 = DSI(IXY,IZ)/(KMS3+DSI(IXY,IZ))
         XEMP3 = CKINARRAY(IXY,IZ,3)/(CONST(81)+CKINARRAY(IXY,IZ,3))

!        COMPUTE GROWTH RATE REDUCTION DUE TO NUTRIENT LIMITATION 
!        USE 'MINIMUM' FORM RATHER THAN 'MULTIPLICATIVE' FORM 
         RNUTR3(IXY,IZ) = AMIN1(XEMP1,XEMP2,XEMP3)

!        EFFECT OF NUTRIENT LIMITATION ON SETTLING
!JQI         ALG3VS(IXY,IZ) = (VSBAS3 + VSNTR3*(1.-RNUTR3(IXY,IZ)))
!JQI     .                    *VSBAST**STP20(IXY,IZ)
         ALG3VS(IXY,IZ) = (CONST(98) + CONST(99)*(1.-RNUTR3(IXY,IZ)))  &
                          *CONST(169)**STP20(IXY,IZ)

!        GROSS GROWTH RATE ... COMBINE FACTORS
!JQI         GPP3(IXY,IZ) = RNUTR3(IXY,IZ)*RLGHT3(IXY,IZ)
!JQI     .                             *GITMAX*PHYT3(IXY,IZ)
         GPP3(IXY,IZ) = RNUTR3(IXY,IZ)*RLGHT3(IXY,IZ)*GITMAX*CARAY(IXY,IZ,4)


!        DEATH...RESPIRATION AND GRAZING

!        RESPIRATION
!JQI         RESP3 = K3RG*GPP3(IXY,IZ) +
!JQI     .           K3RBT(ISTP20(IXY,IZ))*PHYT3(IXY,IZ)
         RESP3 = CONST(84)*GPP3(IXY,IZ) + K3RBT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,4)
         RESP(IXY,IZ) = RESP(IXY,IZ) + RESP3

!        GRAZING
!JQI         GRAZ3 = K3GRZCT(ISTP20(IXY,IZ))*PHYT3(IXY,IZ) 
         GRAZ3 = K3GRZCT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,4) 
         GRAZ(IXY,IZ) = GRAZ(IXY,IZ) + GRAZ3

!        NET LOSS
         DPP3(IXY,IZ) = RESP3+GRAZ3

!        FORMULATE DERIVATIVE ... NET GROWTH (GP-DP)
!JQI         CDPHYT3(IXY,IZ) = ((1.-FLOCEX)*GPP3(IXY,IZ)-DPP3(IXY,IZ))
         CDARAY(IXY,IZ,4) = ((1.-CONST(156))*GPP3(IXY,IZ)-DPP3(IXY,IZ))
!JQI         GPDP3_DDA(IXY,IZ) = GPDP3_DDA(IXY,IZ) +
!JQI     .                          +  CDPHYT3(IXY,IZ)/PHYT3(IXY,IZ)
         GPDP3_DDA(IXY,IZ) = GPDP3_DDA(IXY,IZ) + CDARAY(IXY,IZ,4)/CARAY(IXY,IZ,4)
        ENDIF
       END DO
      END DO

      IF(IDDOPT == 1) THEN
!$doacross local(iz,ixy) , share(rnutr1_dda,rnutr2_dda,rnutr3_dda)
       RNUTR1_DDA = RNUTR1_DDA + RNUTR1
       RNUTR2_DDA = RNUTR2_DDA + RNUTR2
       RNUTR3_DDA = RNUTR3_DDA + RNUTR3
      ENDIF

      IF(IDISK == 2 .OR. IDISK == 3) THEN
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        APPNET = ((GPP1(IXY,IZ)-DPP1(IXY,IZ)) +  (GPP2(IXY,IZ)-DPP2(IXY,IZ))  &
               + (GPP3(IXY,IZ)-DPP3(IXY,IZ)))/(HBAR(IXY)*DZ(IXY,IZ))
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(1,SAL(IXY,IZ),SKE(IXY,IZ),
!JQI     .        ALG1VS(IXY,IZ),ALG2VS(IXY,IZ),APPNET)
       !  CALL RCAWBUF(1,CARAY(IXY,IZ,1),SKE(IXY,IZ),ALG1VS(IXY,IZ),ALG2VS(IXY,IZ),APPNET)
        ELSE
!JQI   !      CALL RCAWBUF(1,SAL_DDA(IXY,IZ)/IAVGDDCNTR,SKE(IXY,IZ),
!JQI   !  .        ALG1VS(IXY,IZ),ALG2VS(IXY,IZ),APPNET)
       !  CALL RCAWBUF(1,VARRAY(IXY,IZ,2)/IAVGDDCNTR,SKE(IXY,IZ),ALG1VS(IXY,IZ),ALG2VS(IXY,IZ),APPNET)
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
!JQI        GPDP=(GPP1(IXY,IZ)-DPP1(IXY,IZ))/MAX(PHYT1(IXY,IZ),1.E-9)
        GPDP=(GPP1(IXY,IZ)-DPP1(IXY,IZ))/MAX(CARAY(IXY,IZ,2),1.E-9)
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(2,PHYT1(IXY,IZ),1000.*PHYT1(IXY,IZ)/CCHL1,
!JQI     .        RLGHT1(IXY,IZ),RNUTR1(IXY,IZ),GPDP)
      !   CALL RCAWBUF(2,CARAY(IXY,IZ,2),1000.*CARAY(IXY,IZ,2)/CONST(23),  &
      !        RLGHT1(IXY,IZ),RNUTR1(IXY,IZ),GPDP)
        ELSE
!JQI         CALL RCAWBUF(2,PHYT1_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        1000.*(PHYT1_DDA(IXY,IZ)/IAVGDDCNTR)/CCHL1,
!JQI     .        RLGHT1(IXY,IZ),RNUTR1_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        GPDP1_DDA(IXY,IZ)/IAVGDDCNTR)
      !   CALL RCAWBUF(2,VARRAY(IXY,IZ,3)/IAVGDDCNTR,            &
      !        1000.*(VARRAY(IXY,IZ,3)/IAVGDDCNTR)/CONST(23),    &
      !        RLGHT1(IXY,IZ),RNUTR1_DDA(IXY,IZ)/IAVGDDCNTR,     &
      !        GPDP1_DDA(IXY,IZ)/IAVGDDCNTR)
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
!JQI        GPDP=(GPP2(IXY,IZ)-DPP2(IXY,IZ))/MAX(PHYT2(IXY,IZ),1.E-9)
        GPDP=(GPP2(IXY,IZ)-DPP2(IXY,IZ))/MAX(CARAY(IXY,IZ,3),1.E-9)
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(3,PHYT2(IXY,IZ),1000.*PHYT2(IXY,IZ)/CCHL2,
!JQI     .        RLGHT2(IXY,IZ),RNUTR2(IXY,IZ),GPDP)
      !   CALL RCAWBUF(3,CARAY(IXY,IZ,3),1000.*CARAY(IXY,IZ,3)/CONST(55),  &
      !        RLGHT2(IXY,IZ),RNUTR2(IXY,IZ),GPDP)
        ELSE
!JQI         CALL RCAWBUF(3,PHYT2_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        1000.*(PHYT2_DDA(IXY,IZ)/IAVGDDCNTR)/CCHL2,
!JQI     .        RLGHT2(IXY,IZ),RNUTR2_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        GPDP2_DDA(IXY,IZ)/IAVGDDCNTR)
       !  CALL RCAWBUF(3,VARRAY(IXY,IZ,4)/IAVGDDCNTR,            &
       !       1000.*(VARRAY(IXY,IZ,4)/IAVGDDCNTR)/CONST(55),    &
       !       RLGHT2(IXY,IZ),RNUTR2_DDA(IXY,IZ)/IAVGDDCNTR,     &
        !      GPDP2_DDA(IXY,IZ)/IAVGDDCNTR)
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
!JQI        GPDP=(GPP3(IXY,IZ)-DPP3(IXY,IZ))/MAX(PHYT3(IXY,IZ),1.E-9)
        GPDP=(GPP3(IXY,IZ)-DPP3(IXY,IZ))/MAX(CARAY(IXY,IZ,4),1.E-9)
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(4,PHYT3(IXY,IZ),1000.*PHYT3(IXY,IZ)/CCHL3,
!JQI     .        RLGHT3(IXY,IZ),RNUTR3(IXY,IZ),GPDP)
      !   CALL RCAWBUF(4,CARAY(IXY,IZ,4),1000.*CARAY(IXY,IZ,4)/CONST(87),  &
      !        RLGHT3(IXY,IZ),RNUTR3(IXY,IZ),GPDP)
        ELSE
!JQI         CALL RCAWBUF(4,PHYT3_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        1000.*(PHYT3_DDA(IXY,IZ)/IAVGDDCNTR)/CCHL3,
!JQI     .        RLGHT3(IXY,IZ),RNUTR3_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        GPDP3_DDA(IXY,IZ)/IAVGDDCNTR)
        ! CALL RCAWBUF(4,VARRAY(IXY,IZ,5)/IAVGDDCNTR,           &
        !      1000.*(VARRAY(IXY,IZ,5)/IAVGDDCNTR)/CONST(87),   &
        !      RLGHT3(IXY,IZ),RNUTR3_DDA(IXY,IZ)/IAVGDDCNTR,    &
        !      GPDP3_DDA(IXY,IZ)/IAVGDDCNTR)
        ENDIF
       END DO
      ENDIF

      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) == 1.) THEN
!        COMPUTE AMMONIA PREFERENCE 
!JQI         PNH41(IXY,IZ) =
!JQI     .        DNH4(IXY,IZ)*NO23(IXY,IZ)
!JQI     .               /((KMN1+DNH4(IXY,IZ))*(KMN1+NO23(IXY,IZ)))
!JQI     .      + DNH4(IXY,IZ)*KMN1
!JQI     .        /((DNH4(IXY,IZ)+NO23(IXY,IZ))*(KMN1+NO23(IXY,IZ))) 
         PNH41(IXY,IZ) =                                      &
              CKINARRAY(IXY,IZ,2)*CARAY(IXY,IZ,15)            &
              /((CONST(15)+CKINARRAY(IXY,IZ,2))               &
              *(CONST(15)+CARAY(IXY,IZ,15)))                  &
              + CKINARRAY(IXY,IZ,2)*CONST(15)                 &
              /((CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))        &
              *(CONST(15)+CARAY(IXY,IZ,15))) 
!JQI         PNH42(IXY,IZ) =
!JQI     .        DNH4(IXY,IZ)*NO23(IXY,IZ)
!JQI     .               /((KMN2+DNH4(IXY,IZ))*(KMN2+NO23(IXY,IZ)))
!JQI     .      + DNH4(IXY,IZ)*KMN2
!JQI     .        /((DNH4(IXY,IZ)+NO23(IXY,IZ))*(KMN2+NO23(IXY,IZ))) 
         PNH42(IXY,IZ) =                                      &
              CKINARRAY(IXY,IZ,2)*CARAY(IXY,IZ,15)            &
              /((CONST(47)+CKINARRAY(IXY,IZ,2))               &
              *(CONST(47)+CARAY(IXY,IZ,15)))                  &
              + CKINARRAY(IXY,IZ,2)*CONST(47)                 &
              /((CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))        &
              *(CONST(47)+CARAY(IXY,IZ,15))) 
!JQI         PNH43(IXY,IZ) =
!JQI     .        DNH4(IXY,IZ)*NO23(IXY,IZ)
!JQI     .               /((KMN3+DNH4(IXY,IZ))*(KMN3+NO23(IXY,IZ)))
!JQI     .      + DNH4(IXY,IZ)*KMN3
!JQI     .        /((DNH4(IXY,IZ)+NO23(IXY,IZ))*(KMN3+NO23(IXY,IZ))) 
         PNH43(IXY,IZ) =                                      &
              CKINARRAY(IXY,IZ,2)*CARAY(IXY,IZ,15)            &
              /((CONST(79)+CKINARRAY(IXY,IZ,2))               &
              *(CONST(79)+CARAY(IXY,IZ,15)))                  &
              + CKINARRAY(IXY,IZ,2)*CONST(79)                 &
              /((CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))        &
              *(CONST(79)+CARAY(IXY,IZ,15))) 
        ENDIF
       END DO	
      END DO
! INITIALIZE ARRAY FOR DETAILED DUMP AVERAGING, IF REQUIRED
      IF(IDISK == 2 .OR. IDISK == 3) THEN
       IF(IDDOPT == 1) THEN
        RNUTR1_DDA = 0.
        RNUTR2_DDA = 0.
        RNUTR3_DDA = 0.
        GPDP1_DDA  = 0.
        GPDP2_DDA  = 0.
        GPDP3_DDA  = 0.
       ENDIF
      ENDIF

      END SELECT
      print*,'stop site 7'
      
      RETURN
      END SUBROUTINE INIT_STD_EUTRO
 

      SUBROUTINE INIT_LC_EUTRO
      
      USE ALL_VARS,ONLY : DZ,MT,CARAY,CDARAY,M
      USE MOD_RCA
      USE ALLOCEUTRO
#  if defined (MULTIPROCESSOR)
      USE MOD_PAR,ONLY : NGID
#  endif       
      IMPLICIT NONE
      SAVE

!      INCLUDE 'RCACM'
!        STATE-VARIABLES
!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) ::
!JQI     .   SAL     ,PHYT1   ,PHYT2   ,PHYT3   ,PO4T    
!JQI     .  ,NH4T    ,NO23    ,SIT
!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) ::
!JQI     .   CDSAL   ,CDPHYT1 ,CDPHYT2 ,CDPHYT3 ,CDPO4T
!JQI     .  ,CDNH4T  ,CDNO23  ,CDSIT

!        LINKAGE FOR EUTROPHICATION ALGAL GROWTH ROUTINES
!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) :: DPO4,DNH4,DSI

      REAL ::                                                       &
           K1CNSAT,K1C,ISAT1,K1TEQ,NCRB1EQ,K2CNSAT,K2C,ISAT2        &
          ,K2TEQ,NCRB2EQ,K3CNSAT,K3C,ISAT3,K3TEQ,NCRB3EQ            &
          ,LYMOLQ,ISAT,ITOTSF,ITOTSF1,KETVF,ITOT,ITOTN1,ITOTN2      &
          ,ITOTN3,WIND
          
!JQI     ,K1BETA1,K1BETA2,IS1,KMN1,KMP1,KMS1
!JQI     .    ,K1RB,K1RG,K1RT,K1GRZC,K1GRZT
!JQI     .    ,K2BETA1,K2BETA2,IS2,KMN2,KMP2,KMS2
!JQI     .    ,K2RB,K2RG,K2RT,K2GRZC,K2GRZT
!JQI     .    ,K3BETA1,K3BETA2,IS3,ISAT3,KMN3,KMP3,KMS3
!JQI     .    ,K3RB,K3RG,K3RT,K3GRZC,K3GRZT,K3TEQ,NCRB3EQ
!JQI     .    ,KAOPT,KEOPT
!JQI     .    ,KADPO4,KADSI,WIND

!JQI      REAL 
!JQI     .     AGMOPT,ACTALG,OPTION5,OPTION6,TOPT1,GPRE1,GPR01,FSC1
!JQI     .    ,WCCHL1,WCP1,WCN1,WCS1,QF1,XKC1,VSBAS1,VSNTR1,TOPT2
!JQI     .    ,GPRE2,GPR02,FSC2,WCCHL2,WCP2,WCN2,WCS2,QF2,XKC2,VSBAS2
!JQI     .    ,VSNTR2,TOPT3,GPRE3,GPR03,FSC3,WCCHL3,WCP3,WCN3,WCS3
!JQI     .    ,QF3,XKC3,VSBAS3,VSNTR3,FLOCEX,VSBAST

!JQI      REAL, ALLOCATABLE :: KEBS(:)
!JQI      REAL, ALLOCATABLE :: SSLDS(:,:)

      REAL, DIMENSION(MT,NZ) ::                         &
          GPDP1_DDA  ,GPDP2_DDA  ,GPDP3_DDA             &
         ,RNUTR1_DDA ,RNUTR2_DDA ,RNUTR3_DDA

!JQI      REAL, ALLOCATABLE, DIMENSION(:,:) ::
!JQI     .   XEMPRC    ,SAL_DDA   ,PHYT1_DDA ,PHYT2_DDA ,PHYT3_DDA
!JQI     .  ,SAL_DMIN  ,SAL_DMAX  ,CHLA1_DDA ,CHLA2_DDA ,CHLA3_DDA
!JQI     .  ,CCHL1_DDA ,CCHL2_DDA ,CCHL3_DDA
      REAL, ALLOCATABLE :: VARRAY(:,:,:)

      INTEGER :: NPHYT,ITEMP,IDMP
      REAL ::OCRB,DAYTIME,F,TEMP,TSUNRISE,TSUNSET,TDAY,ALGALP,ALGALN      &
            ,ALGALS,DFPO4,DFSI,CHLA1,CHLA2,CHLA3,CHLA,XEMP1,XEMP2,XEMP3   &
            ,TEMP1,DAVEI,CCHL1EQ,CCHL2EQ,CCHL3EQ,PCRB1EQ,PCRB2EQ,PCRB3EQ  &
            ,SCRB1EQ,SCRB2EQ,SCRB3EQ,RESPR,GRAZ2,GRAZ3,APPNET,GPDP

!JQI      ALLOCATE(SAL(MT,NZ))      ;ALLOCATE(CDSAL(MT,NZ))
!JQI      ALLOCATE(PHYT1(MT,NZ))    ;ALLOCATE(CDPHYT1(MT,NZ))
!JQI      ALLOCATE(PHYT2(MT,NZ))    ;ALLOCATE(CDPHYT2(MT,NZ))
!JQI      ALLOCATE(PHYT3(MT,NZ))    ;ALLOCATE(CDPHYT3(MT,NZ))
!JQI      ALLOCATE(PO4T(MT,NZ))     ;ALLOCATE(CDPO4T(MT,NZ))
!JQI      ALLOCATE(NH4T(MT,NZ))     ;ALLOCATE(CDNH4T(MT,NZ))
!JQI      ALLOCATE(NO23(MT,NZ))     ;ALLOCATE(CDNO23(MT,NZ))
!JQI      ALLOCATE(SIT(MT,NZ))      ;ALLOCATE(CDSIT(MT,NZ))

!JQI      SAL(:,:)   = CARAY(:,:,1)    ;CDSAL(:,:)   = CDARAY(:,:,1)
!JQI      PHYT1(:,:) = CARAY(:,:,2)    ;CDPHYT1(:,:) = CDARAY(:,:,2)
!JQI      PHYT2(:,:) = CARAY(:,:,3)    ;CDPHYT2(:,:) = CDARAY(:,:,3)
!JQI      PHYT3(:,:) = CARAY(:,:,4)    ;CDPHYT3(:,:) = CDARAY(:,:,4)
!JQI      PO4T(:,:)  = CARAY(:,:,9)    ;CDPO4T(:,:)  = CDARAY(:,:,9)
!JQI      NH4T(:,:)  = CARAY(:,:,14)   ;CDNH4T(:,:)  = CDARAY(:,:,14)
!JQI      NO23(:,:)  = CARAY(:,:,15)   ;CDNO23(:,:)  = CDARAY(:,:,15)
!JQI      SIT(:,:)   = CARAY(:,:,17)   ;CDSIT(:,:)   = CDARAY(:,:,17)
 
!JQI      ALLOCATE(DPO4(MT,NZ))
!JQI      ALLOCATE(DNH4(MT,NZ))
!JQI      ALLOCATE(DSI(MT,NZ))

!JQI      DPO4(:,:) = CKINARRAY(:,:,1)
!JQI      DNH4(:,:) = CKINARRAY(:,:,2)
!JQI      DSI(:,:)  = CKINARRAY(:,:,3)

!JQI      AGMOPT = CONST(1)  ;ACTALG  = CONST(2)  ;KAOPT   = CONST(3) 
!JQI      KEOPT  = CONST(4)  ;OPTION5 = CONST(5)  ;OPTION6 = CONST(6)

!JQI      TOPT1  = CONST(9)  ;K1BETA1 = CONST(10) ;K1BETA2 = CONST(11)
!JQI      GPRE1  = CONST(12) ;GPR01   = CONST(13) ;IS1     = CONST(14)
!JQI      KMN1   = CONST(15) ;KMP1    = CONST(16) ;KMS1    = CONST(17)
!JQI      K1RB   = CONST(18) ;K1RT    = CONST(19) ;K1RG    = CONST(20)
!JQI      K1GRZC = CONST(21) ;K1GRZT  = CONST(22) ;FSC1    = CONST(23)
!JQI      WCCHL1 = CONST(24) ;WCP1    = CONST(25) ;WCN1    = CONST(26)
!JQI      WCS1   = CONST(27) ;QF1     = CONST(28) ;XKC1    = CONST(29)
!JQI      VSBAS1 = CONST(30) ;VSNTR1  = CONST(31)

!JQI      TOPT2  = CONST(41) ;K2BETA1 = CONST(42) ;K2BETA2 = CONST(43)
!JQI      GPRE2  = CONST(44) ;GPR02   = CONST(45) ;IS2     = CONST(46)
!JQI      KMN2   = CONST(47) ;KMP2    = CONST(48) ;KMS2    = CONST(49)
!JQI      K2RB   = CONST(50) ;K2RT    = CONST(51) ;K2RG    = CONST(52)
!JQI      K2GRZC = CONST(53) ;K2GRZT  = CONST(54) ;FSC2    = CONST(55)
 !JQI     WCCHL2 = CONST(56) ;WCP2    = CONST(57) ;WCN2    = CONST(58)
!JQI      WCS2   = CONST(59) ;QF2     = CONST(60) ;XKC2    = CONST(61)
!JQI      VSBAS2 = CONST(62) ;VSNTR2  = CONST(63)

 !JQI     TOPT3  = CONST(73) ;K3BETA1 = CONST(74) ;K3BETA2 = CONST(75)
!JQI      GPRE3  = CONST(76) ;GPR03   = CONST(77) ;IS3     = CONST(78)
!JQI      KMN3   = CONST(79) ;KMP3    = CONST(80) ;KMS3    = CONST(81)
!JQI      K3RB   = CONST(82) ;K3RT    = CONST(83) ;K3RG    = CONST(84)
!JQI      K3GRZC = CONST(85) ;K3GRZT  = CONST(86) ;FSC3    = CONST(87)
!JQI      WCCHL3 = CONST(88) ;WCP3    = CONST(89) ;WCN3    = CONST(90)
!JQI      WCS3   = CONST(91) ;QF3     = CONST(92) ;XKC3    = CONST(93)
!JQI      VSBAS3 = CONST(94) ;VSNTR3  = CONST(95)

!JQI      FLOCEX = CONST(156)
!JQI      VSBAST = CONST(169);KADPO4  = CONST(177);KADSI   = CONST(178)
  
!JQI      ALLOCATE(KEBS(MT))
!JQI      KEBS(:) = PARAM2D(:,6)

!JQI      ALLOCATE(SSLDS(MT,NZ))
!JQI      SSLDS(:,:) = PARAM3D(:,:,1)

      ALLOCATE(VARRAY(MT,NZ,25))
      VARRAY = SCRATCH_KIN

!JQI      ALLOCATE(XEMPRC(MT,NZ))
!JQI      ALLOCATE(SAL_DDA(MT,NZ))
!JQI      ALLOCATE(PHYT1_DDA(MT,NZ))
!JQI      ALLOCATE(PHYT2_DDA(MT,NZ))
!JQI      ALLOCATE(PHYT3_DDA(MT,NZ))
!JQI      ALLOCATE(CHLA1_DDA(MT,NZ))
!JQI      ALLOCATE(CHLA2_DDA(MT,NZ))
!JQI      ALLOCATE(CHLA3_DDA(MT,NZ))
!JQI      ALLOCATE(CCHL1_DDA(MT,NZ))
!JQI      ALLOCATE(CCHL2_DDA(MT,NZ))
!JQI      ALLOCATE(CCHL3_DDA(MT,NZ))
!JQI      ALLOCATE(SAL_DMIN(MT,NZ))
!JQI      ALLOCATE(SAL_DMAX(MT,NZ))
!JQI      XEMPRC(:,:)    = VARRAY(:,:,1)
!JQI      SAL_DDA(:,:)   = VARRAY(:,:,2)
!JQI      PHYT1_DDA(:,:) = VARRAY(:,:,3)
!JQI      PHYT2_DDA(:,:) = VARRAY(:,:,4)
!JQI      PHYT3_DDA(:,:) = VARRAY(:,:,5)
!JQI      CHLA1_DDA(:,:) = VARRAY(:,:,6)
!JQI      CHLA2_DDA(:,:) = VARRAY(:,:,7)
!JQI      CHLA3_DDA(:,:) = VARRAY(:,:,8)
!JQI      CCHL1_DDA(:,:) = VARRAY(:,:,9)
!JQI      CCHL2_DDA(:,:) = VARRAY(:,:,10)
!JQI      CCHL3_DDA(:,:) = VARRAY(:,:,11)
!JQI      SAL_DMIN(:,:)  = VARRAY(:,:,12)
!JQI      SAL_DMAX(:,:)  = VARRAY(:,:,13)
!========================================================
!JQI      NPHYT = ACTALG+0.5
      NPHYT = CONST(2)+0.5

!        SET INITIAL ALGAL NUTRIENT TO CARBON RATIOS
!JQI      CCHL1S = WCCHL1
      CCHL1S = CONST(24)
!JQI      PCRB1  = 1./WCP1
      PCRB1  = 1./CONST(25)
!JQI      NCRB1  = 1./WCN1
      NCRB1  = 1./CONST(26)
!JQI      SCRB1  = 1./WCS1
      SCRB1  = 1./CONST(27)
!JQI      CCHL2S = WCCHL2
      CCHL2S = CONST(56)
!JQI      PCRB2  = 1./WCP2
      PCRB2  = 1./CONST(57)
!JQI      NCRB2  = 1./WCN2
      NCRB2  = 1./CONST(58)
!JQI      SCRB2  = 1./WCS2
      SCRB2  = 1./CONST(59)
!JQI      CCHL3S = WCCHL3
      CCHL3S = CONST(88)
!JQI      PCRB3  = 1./WCP3
      PCRB3  = 1./CONST(89)
!JQI      NCRB3  = 1./WCN3
      NCRB3  = 1./CONST(90)
!JQI      SCRB3  = 1./WCS3
      SCRB3  = 1./CONST(91)

!        OXYGEN TO CARBON RATIO (2*16/12)
      OCRB = 2.6667

!        CONVERT LIGHT SATURATION VALUES TO MOL QUANTA/M2 UNITS
!5.2=217400/414860
      LYMOLQ = 1./5.2
!JQI      ISAT1 = IS1*LYMOLQ
      ISAT1 = CONST(14)*LYMOLQ
!JQI      ISAT2 = IS2*LYMOLQ
      ISAT2 = CONST(46)*LYMOLQ
!JQI      ISAT3 = IS3*LYMOLQ
      ISAT3 = CONST(78)*LYMOLQ

      ITOTN3 = BFUNC(1)*LYMOLQ
      ITOTN2 = BFUNC(1)*LYMOLQ
      ITOTN1 = BFUNC(1)*LYMOLQ
      DAYTIME = 0.0

      K1TEQ =  1.0
      K2TEQ =  1.0
      K3TEQ =  1.0

      ITOTSF = BFUNC(1)*LYMOLQ*CONST(5)  !PAR FRACTION CONST(5)
      F = BFUNC(2)
      WIND = BFUNC(3)

!        COMPUTE KLWIND FROM WIND SPEED

      KLWIND = 0.728*SQRT(WIND) - 0.317*WIND + 0.0372*WIND*WIND

!        SETUP TEMPERATURE-CORRECTED REACTION RATES IN TABLE-LOOKUP FORM
      DO ITEMP=1,450
       TEMP = (FLOAT(ITEMP-1)/10.+0.05) - 20.
!JQI       K1GRZCT(ITEMP) = K1GRZC*K1GRZT**TEMP
       K1GRZCT(ITEMP) = CONST(21)*CONST(22)**TEMP
!JQI       K2GRZCT(ITEMP) = K2GRZC*K2GRZT**TEMP
       K2GRZCT(ITEMP) = CONST(53)*CONST(54)**TEMP
!JQI       K3GRZCT(ITEMP) = K3GRZC*K3GRZT**TEMP
       K3GRZCT(ITEMP) = CONST(85)*CONST(86)**TEMP
      END DO 

! INITIALIZE ARRAY FOR DETAILED DUMP AVERAGING, IF REQUIRED
      IF(IDDOPT == 1) THEN
       RNUTR1_DDA = 0.
       RNUTR2_DDA = 0.
       RNUTR3_DDA = 0.
       GPDP1_DDA  = 0.
       GPDP2_DDA  = 0.
       GPDP3_DDA  = 0.
      ENDIF


      RETURN

      ENTRY  LC_EUTRO_MAIN

!        IF NECESSARY UPDATE EXOGENOUS VARIABLES (SUNLIGHT,
!           FRACTION DAYLIGHT, ETC.)
      IF(NXCALL13T <= TIME) THEN
       CALL RCA13(NXCALL13T)
      ENDIF
      ITOTSF = ((TIME-NXFUNT(1))*MFUNC(1) + BFUNC(1))*LYMOLQ*CONST(5)
    
      F = (TIME-NXFUNT(2))*MFUNC(2) + BFUNC(2)
      WIND = (TIME-NXFUNT(3))*MFUNC(3) + BFUNC(3)
      KETVF = (TIME-NXFUNT(4))*MFUNC(4) + BFUNC(4)

!        COMPUTE KLWIND FROM WIND SPEED

      KLWIND = 0.728*SQRT(WIND) - 0.317*WIND + 0.0372*WIND*WIND

!        UPDATE KEBASE AS APPROPRIATE
!JQI      IF(KEOPT == 2.) THEN
      IF(CONST(4) == 2.) THEN
       DO IXY=1,M
        IF(FSM(IXY) == 1.) KEBASE(IXY) = KETVF
       ENDDO
!JQI      ELSEIF(KEOPT == 3.) THEN
      ELSEIF(CONST(4) == 3.) THEN
       DO IXY=1,M
!JQI        IF(FSM(IXY).EQ.1.)  KEBASE(IXY) = KETVF*KEBS(IXY)
        IF(FSM(IXY).EQ.1.)  KEBASE(IXY) = KETVF*PARAM2D(IXY,6)
       ENDDO
      ENDIF

!        ADJUSTABLE LIGHT SATURATION = AVERAGE OF THREE PREVIOUS DAYS
!        TOTAL SOLAR RADIATION (CONVERT TO MOL QUANTA/M2 UNITS)
      ISAT = (0.1*ITOTN3 + 0.2*ITOTN2 + 0.7*ITOTN1)/3.
!JQI      IF(IS1 == 0.) ISAT1=ISAT
      IF(CONST(14) == 0.) ISAT1=ISAT
!JQI      IF(IS2 == 0.) ISAT2=ISAT
      IF(CONST(46) == 0.) ISAT2=ISAT
!JQI      IF(IS3 == 0.) ISAT3=ISAT
      IF(CONST(78) == 0.) ISAT3=ISAT
      TSUNRISE = 0.5-F/2.
      TSUNSET = 0.5+F/2.
      TDAY = MOD(TIME,1.0)
      IF(TDAY < TSUNRISE .OR. TDAY > TSUNSET) THEN
       ISURF = 0.0
      ELSE
       ISURF = (ITOTSF/F/0.635 * SIN(3.14159*(TDAY-TSUNRISE)/F))
      ENDIF
! 0.35=2/pi=integration(sin(0,pi))/pi=average      
!ISURF = 500.

      IF(DTWQ == 0.0) THEN
       DAYTIME = DAYTIME + DT
      ELSE
       DAYTIME = DAYTIME + DTWQ
      ENDIF
      IF(DAYTIME >= 1.0) THEN
       ITOTN3 = ITOTN2
       ITOTN2 = ITOTN1
       ITOTN1 = ITOTSF1
       DAYTIME = DAYTIME -1.0
      ENDIF
      ITOTSF1 = ITOTSF

!        COMPUTE ALGAL NUTRIENT TO CARBON RATIOS AND AVAILABLE NUTRIENTS
!! c$doacross local(iz,iy,ix,algalp,dfpo4,algaln,algals,dfsi)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) == 1.) THEN

!        PHOSPHORUS

!        FRACTION OF PO4T BOUND IN ALGAL BIOMASS
!JQI         ALGALP = PCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .          + PCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .          + PCRB3(IXY,IZ)*PHYT3(IXY,IZ)
         ALGALP = PCRB1(IXY,IZ)*CARAY(IXY,IZ,2)               &
                + PCRB2(IXY,IZ)*CARAY(IXY,IZ,3)               &
                + PCRB3(IXY,IZ)*CARAY(IXY,IZ,4)

!        FRACTION OF DISSOLVED INORGANIC PHOSPHORUS
!JQI         DFPO4 = 1./(1.+KADPO4*SSLDS(IXY,IZ))
         DFPO4 = 1./(1.+CONST(177)*PARAM3D(IXY,IZ,1))

!        AVAILABLE INORGANIC PHOSPHORUS
!JQI         DPO4(IXY,IZ) = MAX(0.0,DFPO4*(PO4T(IXY,IZ)-ALGALP))
         CKINARRAY(IXY,IZ,1) = MAX(0.0,DFPO4*(CARAY(IXY,IZ,9)-ALGALP))

!        SORBED PHOSPHORUS
!JQI         PO4SS(IXY,IZ) = PO4T(IXY,IZ) - ALGALP - DPO4(IXY,IZ)
         PO4SS(IXY,IZ) = CARAY(IXY,IZ,9) - ALGALP - CKINARRAY(IXY,IZ,1)

!        NITROGEN

!        FRACTION OF NH4T BOUND IN ALGAL BIOMASS
!JQI         ALGALN = NCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .          + NCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .          + NCRB3(IXY,IZ)*PHYT3(IXY,IZ)
         ALGALN = NCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + NCRB2(IXY,IZ)*CARAY(IXY,IZ,3) &
                + NCRB3(IXY,IZ)*CARAY(IXY,IZ,4)
 
!        AVAILABLE AMMONIA
!JQI         DNH4(IXY,IZ) = MAX(0.0,(NH4T(IXY,IZ) - ALGALN))
         CKINARRAY(IXY,IZ,2) = MAX(0.0,(CARAY(IXY,IZ,14) - ALGALN))

!        SILICA

!        FRACTION OF SIT BOUND IN ALGAL BIOMASS
!JQI         ALGALS = SCRB1(IXY,IZ)*PHYT1(IXY,IZ)
!JQI     .          + SCRB2(IXY,IZ)*PHYT2(IXY,IZ)
!JQI     .          + SCRB3(IXY,IZ)*PHYT3(IXY,IZ)
         ALGALS = SCRB1(IXY,IZ)*CARAY(IXY,IZ,2) + SCRB2(IXY,IZ)*CARAY(IXY,IZ,3) &
                + SCRB3(IXY,IZ)*CARAY(IXY,IZ,4)

!        COMPUTE FRACTION OF DISSOLVED AVAILABLE SILICA
!JQI         DFSI = 1./(1.+KADSI*SSLDS(IXY,IZ))
         DFSI = 1./(1.+CONST(178)*PARAM3D(IXY,IZ,1))

!        AVAILABLE SILICA
!JQI         DSI(IXY,IZ) = MAX(0.0,DFSI*(SIT(IXY,IZ)-ALGALS))
         CKINARRAY(IXY,IZ,3) = MAX(0.0,DFSI*(CARAY(IXY,IZ,17)-ALGALS))

!        SORBED SILICA
!JQI         SISS(IXY,IZ) = SIT(IXY,IZ) - ALGALS - DSI(IXY,IZ)
         SISS(IXY,IZ) = CARAY(IXY,IZ,17) - ALGALS - CKINARRAY(IXY,IZ,3)
        END IF
       END DO
      END DO

!        GET LIGHT ATTENUATION COEFFICIENTS

!$doacross local(iy,ix,iz,chla,chla1,chla2,chla3,itot)
!$& , share(chlaveg,chlming,chlmaxg)
      DO IXY=1,MT
       !IF(FSM(IXY) > 0.) THEN
        DO IZ=1,NZ

!        COMPUTE TOTAL CHLOROPHYLL BASED ON
!        FIXED CARBON TO CHLOROPHYLL RATIO 
!JQI         CHLA1 = PHYT1(IXY,IZ)/CCHL1S(IXY,IZ)
!JQI         CHLA2 = PHYT2(IXY,IZ)/CCHL2S(IXY,IZ)
!JQI         CHLA3 = PHYT3(IXY,IZ)/CCHL3S(IXY,IZ)
         CHLA1 = CARAY(IXY,IZ,2)/CCHL1S(IXY,IZ)
         CHLA2 = CARAY(IXY,IZ,3)/CCHL2S(IXY,IZ)
         CHLA3 = CARAY(IXY,IZ,4)/CCHL3S(IXY,IZ)
         CHLA=1000.*(CHLA1+CHLA2+CHLA3)
         CHLAVEG(IXY,IZ) = CHLAVEG(IXY,IZ) + CHLA
         CHLMING(IXY,IZ) = AMIN1(CHLMING(IXY,IZ),CHLA)
         CHLMAXG(IXY,IZ) = AMAX1(CHLMAXG(IXY,IZ),CHLA)
   
!        INCLUDE SELF-SHADING EFFECT ON EXTINCTION COEFF
!JQI         SKE(IXY,IZ) = KEBASE(IXY) + 1000.*
!JQI     .         (XKC1*CHLA1+XKC2*CHLA2+XKC3*CHLA3)
         SKE(IXY,IZ) = KEBASE(IXY) + 1000.*                      &
               (CONST(29)*CHLA1+CONST(61)*CHLA2+CONST(93)*CHLA3)

!==============        LIGHT ATTENUATION
         IF(IZ == 1) THEN
          ITOT=ISURF
         ELSE
          ITOT=ATTENL(IXY,IZ-1)
         ENDIF

         ATTENL(IXY,IZ) = ITOT*EXP(-SKE(IXY,IZ)*HBAR(IXY)*DZ(IXY,IZ))

        END DO
       !ENDIF
      END DO

!
!             SYSTEM 2 - PHYTOPLANKTON - WINTER DIATOMS
!

!        GROWTH...NUTRIENTS AND LIGHT

!$doacross local(iy,ix,iz,gitmax,itot,temp1,davei,xemp1,xemp2,xemp3)
!$& ,local(k1cnsat,k1c,algvsn)
!$& ,local(cchl1eq,pcrb1eq,ncrb1eq,scrb1eq,respr) , share(gpdp1_dda)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) > 0.) THEN

!        COMPUTE MICHAELIS TERMS
!JQI         XEMP1 = (DNH4(IXY,IZ)+NO23(IXY,IZ))
!JQI     .          /(KMN1+DNH4(IXY,IZ)+NO23(IXY,IZ))
         XEMP1 = (CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))              &
                /(CONST(15)+CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))

!JQI         XEMP2 = DPO4(IXY,IZ)/(KMP1+DPO4(IXY,IZ))
         XEMP2 = CKINARRAY(IXY,IZ,1)/(CONST(16)+CKINARRAY(IXY,IZ,1))

!JQI         XEMP3 = DSI(IXY,IZ)/(KMS1+DSI(IXY,IZ))
         XEMP3 = CKINARRAY(IXY,IZ,3)/(CONST(17)+CKINARRAY(IXY,IZ,3))

!        COMPUTE GROWTH RATE REDUCTION DUE TO NUTRIENT LIMITATION 
!        USE 'MINIMUM' FORM RATHER THAN 'MULTIPLICATIVE' FORM 
         RNUTR1(IXY,IZ) = AMIN1(XEMP1,XEMP2,XEMP3)

!        EFFECT OF NUTRIENT LIMITATION ON SETTLING
!JQI         ALG1VS(IXY,IZ) = (VSBAS1 + VSNTR1*(1.-RNUTR1(IXY,IZ)))
!JQI     .                    *VSBAST**STP20(IXY,IZ)
         ALG1VS(IXY,IZ) = (CONST(30) + CONST(31)*(1.-RNUTR1(IXY,IZ)))   &
                          *CONST(169)**STP20(IXY,IZ)

!        DEPTH AVERAGED LIGHT
         IF(IZ == 1) THEN
          ITOT=ISURF
         ELSE
          ITOT=ATTENL(IXY,IZ-1)
         ENDIF
         TEMP1 = SKE(IXY,IZ)*HBAR(IXY)*DZ(IXY,IZ)
         DAVEI = ITOT*(1.-EXP(-TEMP1))/TEMP1

!        COMPUTE NET NUTRIENT SATUATED GROWTH RATE AT AMBIENT LIGHT CONDITIONS
!JQI         K1CNSAT = ((GPRE1*(1.-K1RG)*(1.-FSC1)*DAVEI) / (GPRE1/GPR01 +
!JQI     .               DAVEI*(1.+GPRE1/ISAT1/GPR01)))
         K1CNSAT = ((CONST(12)*(1.-CONST(20))*(1.-CONST(23))*DAVEI)    &
                 / (CONST(12)/CONST(13) + DAVEI*(1.+CONST(12)/ISAT1/CONST(13))))
		 

!        TEMPERATURE CORRECT GROWTH RATE
!JQI         IF(HYDTEMP(IXY,IZ) <= TOPT1) 
         IF(HYDTEMP(IXY,IZ) <= CONST(9))                                     &
!JQI     .     K1CNSAT = K1CNSAT*EXP(-K1BETA1*(HYDTEMP(IXY,IZ)-TOPT1)**2.)
           K1CNSAT = K1CNSAT*EXP(-CONST(10)*(HYDTEMP(IXY,IZ)-CONST(9))**2.)
!JQI         IF(HYDTEMP(IXY,IZ) > TOPT1) 
         IF(HYDTEMP(IXY,IZ) > CONST(9))                                      &
!JQI     .     K1CNSAT = K1CNSAT*EXP(-K1BETA2*(TOPT1-HYDTEMP(IXY,IZ))**2.)
           K1CNSAT = K1CNSAT*EXP(-CONST(11)*(CONST(9)-HYDTEMP(IXY,IZ))**2.)
 
!        CORRECT GROWTH RATE FOR BASAL RESPIRATION
!JQI         K1CNSAT = K1CNSAT - K1RB
         K1CNSAT = K1CNSAT - CONST(18)

!        COMPUTE NUTRIENT LIMITED RATE
         K1C = RNUTR1(IXY,IZ) * K1CNSAT

!        COMPUTE EQUILIBRIUM ALGAL STOICHIOMETRY
!JQI         CCHL1EQ = WCCHL1 / (1.-(1.-QF1)*(1.-RNUTR1(IXY,IZ))
!JQI     .           - FSC1 - (K1C+K1RB)/((1.-K1RG)*GPRE1))
         CCHL1EQ = CONST(24) / (1.-(1.-CONST(28))*(1.-RNUTR1(IXY,IZ))     &
                 - CONST(23) - (K1C+CONST(18))/((1.-CONST(20))*CONST(12)))
!JQI         PCRB1EQ = (QF1 + (1.-QF1)*XEMP2) / WCP1
         PCRB1EQ = (CONST(28) + (1.-CONST(28))*XEMP2) / CONST(25)
!JQI         NCRB1EQ = (QF1 + (1.-QF1)*XEMP1) / WCN1
         NCRB1EQ = (CONST(28) + (1.-CONST(28))*XEMP1) / CONST(26)
!JQI         SCRB1EQ = (QF1 + (1.-QF1)*XEMP3) / WCS1
         SCRB1EQ = (CONST(28) + (1.-CONST(28))*XEMP3) / CONST(27)

!        COMPUTE CURRENT STATE OF ALGAL STOICHIOMETRY
         IF(DTWQ == 0.0) THEN
          CCHL1S(IXY,IZ) = (CCHL1S(IXY,IZ) + DT*K1TEQ*CCHL1EQ)/(1.+DT*K1TEQ)
          PCRB1(IXY,IZ) = (PCRB1(IXY,IZ) + DT*K1TEQ*PCRB1EQ)/(1.+DT*K1TEQ)
          NCRB1(IXY,IZ) = (NCRB1(IXY,IZ) + DT*K1TEQ*NCRB1EQ)/(1.+DT*K1TEQ)
          SCRB1(IXY,IZ) = (SCRB1(IXY,IZ) + DT*K1TEQ*SCRB1EQ)/(1.+DT*K1TEQ)
         ELSE
          CCHL1S(IXY,IZ) = (CCHL1S(IXY,IZ) + DTWQ*K1TEQ*CCHL1EQ)/(1.+DTWQ*K1TEQ)
          PCRB1(IXY,IZ) = (PCRB1(IXY,IZ) + DTWQ*K1TEQ*PCRB1EQ)/(1.+DTWQ*K1TEQ)
          NCRB1(IXY,IZ) = (NCRB1(IXY,IZ) + DTWQ*K1TEQ*NCRB1EQ)/(1.+DTWQ*K1TEQ)
          SCRB1(IXY,IZ) = (SCRB1(IXY,IZ) + DTWQ*K1TEQ*SCRB1EQ)/(1.+DTWQ*K1TEQ)
         ENDIF

!        RESPIRATION
!JQI         RESPR = (K1RB + K1RG*K1C)/(1.-K1RG)
         RESPR = (CONST(18) + CONST(20)*K1C)/(1.-CONST(20))
!JQI         RESP(IXY,IZ) = RESPR*PHYT1(IXY,IZ)
         RESP(IXY,IZ) = RESPR*CARAY(IXY,IZ,2)

!        GROSS GROWTH RATE
!JQI         GPP1(IXY,IZ) = (K1C + RESPR)*PHYT1(IXY,IZ)
         GPP1(IXY,IZ) = (K1C + RESPR)*CARAY(IXY,IZ,2)

!        GRAZING
!JQI         GRAZ(IXY,IZ) = K1GRZCT(ISTP20(IXY,IZ))*PHYT1(IXY,IZ)
         GRAZ(IXY,IZ) = K1GRZCT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,2)

!        TOTAL LOSS
         DPP1(IXY,IZ) = (RESP(IXY,IZ)+GRAZ(IXY,IZ))

!        FORMULATE DERIVATIVE ... NET GROWTH (GP-DP)
!JQI         CDPHYT1(IXY,IZ) = ((1.-FLOCEX)*GPP1(IXY,IZ)-DPP1(IXY,IZ))
         CDARAY(IXY,IZ,2) = ((1.-CONST(156))*GPP1(IXY,IZ)-DPP1(IXY,IZ))
!JQI         GPDP1_DDA(IXY,IZ) = GPDP1_DDA(IXY,IZ)
!JQI     .                          +  CDPHYT1(IXY,IZ)/PHYT1(IXY,IZ)
         GPDP1_DDA(IXY,IZ) = GPDP1_DDA(IXY,IZ) +  CDARAY(IXY,IZ,2)/CARAY(IXY,IZ,2)

! if(ngid(ixy).eq.3920.and.iz.eq.10) write(71,'(A,20E10.2)')'eutro 5397', &
!          time,GPP1(ixy,iz),resp(ixy,iz), &
!          DPP1(IXY,IZ), CDARAY(IXY,IZ,2)/CARAY(IXY,IZ,2), &
!          CARAY(IXY,IZ,2),K1C,RESPR, GRAZ(IXY,IZ),K1GRZCT(ISTP20(IXY,IZ)), &
!          XEMP1,XEMP2,XEMP3,DAVEI,HYDTEMP(IXY,IZ),NCRB1(IXY,IZ),SCRB1(IXY,IZ)

        ENDIF

       END DO
      END DO

!
!             SYSTEM 3 - PHYTOPLANKTON - SUMMER ASSEMBLAGE
!
 
!        GROWTH...NUTRIENTS AND LIGHT

!$doacross local(ixy,iz,gitmax,itot,temp1,davei,xemp1,xemp2,xemp3)
!$& ,local(graz2,k2cnsat,k2c)
!$& ,local(cchl2eq,pcrb2eq,ncrb2eq,scrb2eq,respr) , share(gpdp2_dda)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) > 0.) THEN

!        COMPUTE MICHAELIS TERMS
!JQI         XEMP1 = (DNH4(IXY,IZ)+NO23(IXY,IZ))
!JQI     .          /(KMN2+DNH4(IXY,IZ)+NO23(IXY,IZ))
         XEMP1 = (CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))                  &
                /(CONST(47)+CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))

!JQI         XEMP2 = DPO4(IXY,IZ)/(KMP2+DPO4(IXY,IZ))
         XEMP2 = CKINARRAY(IXY,IZ,1)/(CONST(48)+CKINARRAY(IXY,IZ,1))

!JQI         XEMP3 = DSI(IXY,IZ)/(KMS2+DSI(IXY,IZ))
         XEMP3 = CKINARRAY(IXY,IZ,3)/(CONST(49)+CKINARRAY(IXY,IZ,3))

!        COMPUTE GROWTH RATE REDUCTION DUE TO NUTRIENT LIMITATION 
!        USE 'MINIMUM' FORM RATHER THAN 'MULTIPLICATIVE' FORM 
         RNUTR2(IXY,IZ) = AMIN1(XEMP1,XEMP2,XEMP3)

!        EFFECT OF NUTRIENT LIMITATION ON SETTLING
!JQI         ALG2VS(IXY,IZ) = (VSBAS2 + VSNTR2*(1.-RNUTR2(IXY,IZ)))
!JQI     .                    *VSBAST**STP20(IXY,IZ)
         ALG2VS(IXY,IZ) = (CONST(62) + CONST(63)*(1.-RNUTR2(IXY,IZ)))   &
                          *CONST(169)**STP20(IXY,IZ)

!        DEPTH AVERAGED LIGHT
         IF(IZ == 1) THEN
          ITOT=ISURF
         ELSE
          ITOT=ATTENL(IXY,IZ-1)
         ENDIF
         TEMP1 = SKE(IXY,IZ)*HBAR(IXY)*DZ(IXY,IZ)
         DAVEI = ITOT*(1.-EXP(-TEMP1))/TEMP1

!        COMPUTE NET NUTRIENT SATUATED GROWTH RATE AT AMBIENT LIGHT CONDITIONS
!JQI         K2CNSAT = ((GPRE2*(1.-K2RG)*(1.-FSC2)*DAVEI) / (GPRE2/GPR02 +
!JQI     .               DAVEI*(1.+GPRE2/ISAT2/GPR02)))
         K2CNSAT = ((CONST(44)*(1.-CONST(52))*(1.-CONST(55))*DAVEI)    &
                 / (CONST(44)/CONST(45) + DAVEI*(1.+CONST(44)/ISAT2/CONST(45))))

!        TEMPERATURE CORRECT GROWTH RATE
!         IF(HYDTEMP(IXY,IZ) <= TOPT2) 
         IF(HYDTEMP(IXY,IZ) <= CONST(41))                                  &
!JQI     .     K2CNSAT = K2CNSAT*EXP(-K2BETA1*(HYDTEMP(IXY,IZ)-TOPT2)**2.)
           K2CNSAT = K2CNSAT*EXP(-CONST(42)*(HYDTEMP(IXY,IZ)-CONST(41))**2.)
!JQI         IF(HYDTEMP(IXY,IZ) > TOPT2) 
         IF(HYDTEMP(IXY,IZ) > CONST(41))                                   &
!JQI     .     K2CNSAT = K2CNSAT*EXP(-K2BETA2*(TOPT2-HYDTEMP(IXY,IZ))**2.)
           K2CNSAT = K2CNSAT*EXP(-CONST(43)*(CONST(41)-HYDTEMP(IXY,IZ))**2.)
 
!        CORRECT GROWTH RATE FOR BASAL RESPIRATION
!JQI         K2CNSAT = K2CNSAT - K2RB
         K2CNSAT = K2CNSAT - CONST(50)

!        COMPUTE NUTRIENT LIMITED RATE
         K2C = RNUTR2(IXY,IZ) * K2CNSAT

!        COMPUTE EQUILIBRIUM ALGAL STOICHIOMETRY
!JQI         CCHL2EQ = WCCHL2 / (1.-(1.-QF2)*(1.-RNUTR2(IXY,IZ))
!JQI     .           - FSC2 - (K2C+K2RB)/((1.-K2RG)*GPRE2))
         CCHL2EQ = CONST(56) / (1.-(1.-CONST(60))*(1.-RNUTR2(IXY,IZ))    &
                 - CONST(55) - (K2C+CONST(50))/((1.-CONST(52))*CONST(44)))
!JQI         PCRB2EQ = (QF2 + (1.-QF2)*XEMP2) / WCP2
         PCRB2EQ = (CONST(60) + (1.-CONST(60))*XEMP2) / CONST(57)
!JQI         NCRB2EQ = (QF2 + (1.-QF2)*XEMP1) / WCN2
         NCRB2EQ = (CONST(60) + (1.-CONST(60))*XEMP1) / CONST(58)
!JQI         SCRB2EQ = (QF2 + (1.-QF2)*XEMP3) / WCS2
         SCRB2EQ = (CONST(60) + (1.-CONST(60))*XEMP3) / CONST(59)

!        COMPUTE CURRENT STATE OF ALGAL STOICHIOMETRY
         IF(DTWQ == 0.0) THEN
          CCHL2S(IXY,IZ) = (CCHL2S(IXY,IZ) + DT*K2TEQ*CCHL2EQ)/(1.+DT*K2TEQ)
          PCRB2(IXY,IZ) = (PCRB2(IXY,IZ) + DT*K2TEQ*PCRB2EQ)/(1.+DT*K2TEQ)
          NCRB2(IXY,IZ) = (NCRB2(IXY,IZ) + DT*K2TEQ*NCRB2EQ)/(1.+DT*K2TEQ)
          SCRB2(IXY,IZ) = (SCRB2(IXY,IZ) + DT*K2TEQ*SCRB2EQ)/(1.+DT*K2TEQ)
         ELSE
          CCHL2S(IXY,IZ) = (CCHL2S(IXY,IZ) + DTWQ*K2TEQ*CCHL2EQ)/(1.+DTWQ*K2TEQ)
          PCRB2(IXY,IZ) = (PCRB2(IXY,IZ) + DTWQ*K2TEQ*PCRB2EQ)/(1.+DTWQ*K2TEQ)
          NCRB2(IXY,IZ) = (NCRB2(IXY,IZ) + DTWQ*K2TEQ*NCRB2EQ)/(1.+DTWQ*K2TEQ)
          SCRB2(IXY,IZ) = (SCRB2(IXY,IZ) + DTWQ*K2TEQ*SCRB2EQ)/(1.+DTWQ*K2TEQ)
         ENDIF

!JQI         RESPR = (K2RB + K2RG*K2C)/(1.-K2RG)
         RESPR = (CONST(50) + CONST(52)*K2C)/(1.-CONST(52))
!JQI         RESP(IXY,IZ) =  RESP(IXY,IZ) + RESPR*PHYT2(IXY,IZ)
         RESP(IXY,IZ) =  RESP(IXY,IZ) + RESPR*CARAY(IXY,IZ,3)

!        GROSS GROWTH RATE
!JQI         GPP2(IXY,IZ) = (K2C + RESPR)*PHYT2(IXY,IZ)
         GPP2(IXY,IZ) = (K2C + RESPR)*CARAY(IXY,IZ,3)

!        GRAZING
!JQI         GRAZ2 = K2GRZCT(ISTP20(IXY,IZ))*PHYT2(IXY,IZ)
         GRAZ2 = K2GRZCT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,3)
         GRAZ(IXY,IZ) = GRAZ(IXY,IZ) + GRAZ2

!        TOTAL LOSS
!JQI         DPP2(IXY,IZ) = RESPR*PHYT2(IXY,IZ) + GRAZ2
         DPP2(IXY,IZ) = RESPR*CARAY(IXY,IZ,3) + GRAZ2

!        FORMULATE DERIVATIVE ... NET GROWTH (GP-DP)
!JQI         CDPHYT2(IXY,IZ) = (1.-FLOCEX)*GPP2(IXY,IZ)-DPP2(IXY,IZ)
         CDARAY(IXY,IZ,3) = (1.-CONST(156))*GPP2(IXY,IZ)-DPP2(IXY,IZ)
!JQI         GPDP2_DDA(IXY,IZ) = GPDP2_DDA(IXY,IZ) +
!JQI     .                          +  CDPHYT2(IXY,IZ)/PHYT2(IXY,IZ)
         GPDP2_DDA(IXY,IZ) = GPDP2_DDA(IXY,IZ) + CDARAY(IXY,IZ,3)/CARAY(IXY,IZ,3)

!if(ngid(ixy).eq.3920.and.iz.eq.10) write(72,'(A,20E10.2)')'eutro 5524', &
!          time,GPP2(ixy,iz),resp(ixy,iz), &
!          DPP2(IXY,IZ), CDARAY(IXY,IZ,3)/CARAY(IXY,IZ,3), &
!          CARAY(IXY,IZ,3),K2C,RESPR,GRAZ2,K2GRZCT(ISTP20(IXY,IZ)), &
!          XEMP1,XEMP2,XEMP3,DAVEI,HYDTEMP(IXY,IZ),NCRB2(IXY,IZ),SCRB2(IXY,IZ)

        ENDIF
       END DO	
      END DO

!
!             SYSTEM 4 - PHYTOPLANKTON - FALL ASSEMBLAGE
!
 
!        GROWTH...NUTRIENTS AND LIGHT

!$doacross local(iy,ix,iz,gitmax,itot,temp1,davei,xemp1,xemp2,xemp3)
!$& ,local(graz3,k3cnsat,k3c)
!$& ,local(cchl3eq,pcrb3eq,ncrb3eq,scrb3eq,respr) , share(gpdp3_dda)
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) > 0.) THEN

!        COMPUTE MICHAELIS TERMS
!JQI         XEMP1 = (DNH4(IXY,IZ)+NO23(IXY,IZ))
!JQI     .          /(KMN3+DNH4(IXY,IZ)+NO23(IXY,IZ))
         XEMP1 = (CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))             &
                /(CONST(79)+CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))

!JQI         XEMP2 = DPO4(IXY,IZ)/(KMP3+DPO4(IXY,IZ))
         XEMP2 = CKINARRAY(IXY,IZ,1)/(CONST(80)+CKINARRAY(IXY,IZ,1))

!JQI         XEMP3 = DSI(IXY,IZ)/(KMS3+DSI(IXY,IZ))
         XEMP3 = CKINARRAY(IXY,IZ,3)/(CONST(81)+CKINARRAY(IXY,IZ,3))

!        COMPUTE GROWTH RATE REDUCTION DUE TO NUTRIENT LIMITATION 
!        USE 'MINIMUM' FORM RATHER THAN 'MULTIPLICATIVE' FORM 
         RNUTR3(IXY,IZ) = AMIN1(XEMP1,XEMP2,XEMP3)

!        EFFECT OF NUTRIENT LIMITATION ON SETTLING
!JQI         ALG3VS(IXY,IZ) = (VSBAS3 + VSNTR3*(1.-RNUTR3(IXY,IZ)))
!JQI     .      *VSBAST**STP20(IXY,IZ)
         ALG3VS(IXY,IZ) = (CONST(94) + CONST(95)*(1.-RNUTR3(IXY,IZ)))  &
                          *CONST(169)**STP20(IXY,IZ)

!        DEPTH AVERAGED LIGHT
         IF(IZ.EQ.1) THEN
          ITOT=ISURF
         ELSE
          ITOT=ATTENL(IXY,IZ-1)
         ENDIF
         TEMP1 = SKE(IXY,IZ)*HBAR(IXY)*DZ(IXY,IZ)
         DAVEI = ITOT*(1.-EXP(-TEMP1))/TEMP1

!        COMPUTE NET NUTRIENT SATUATED GROWTH RATE AT AMBIENT LIGHT CONDITIONS
!JQI         K3CNSAT = ((GPRE3*(1.-K3RG)*(1.-FSC3)*DAVEI) / (GPRE3/GPR03 +
!JQI     .               DAVEI*(1.+GPRE3/ISAT3/GPR03)))
         K3CNSAT = ((CONST(76)*(1.-CONST(84))*(1.-CONST(87))*DAVEI)    &
                  / (CONST(76)/CONST(77) + DAVEI*(1.+CONST(76)/ISAT3/CONST(77))))

!        TEMPERATURE CORRECT GROWTH RATE
!JQI         IF(HYDTEMP(IXY,IZ) <= TOPT3) 
         IF(HYDTEMP(IXY,IZ) <= CONST(73))                                  &
!JQI     .     K3CNSAT = K3CNSAT*EXP(-K3BETA1*(HYDTEMP(IXY,IZ)-TOPT3)**2.)
           K3CNSAT = K3CNSAT*EXP(-CONST(74)*(HYDTEMP(IXY,IZ)-CONST(73))**2.)
!JQI         IF(HYDTEMP(IXY,IZ) > TOPT3) 
         IF(HYDTEMP(IXY,IZ) > CONST(73))                                   &
!JQI     .     K3CNSAT = K3CNSAT*EXP(-K3BETA2*(TOPT3-HYDTEMP(IXY,IZ))**2.)
           K3CNSAT = K3CNSAT*EXP(-CONST(75)*(CONST(73)-HYDTEMP(IXY,IZ))**2.)
 
!        CORRECT GROWTH RATE FOR BASAL RESPIRATION
!JQI         K3CNSAT = K3CNSAT - K3RB
         K3CNSAT = K3CNSAT - CONST(82)

!        COMPUTE NUTRIENT LIMITED RATE
         K3C = RNUTR3(IXY,IZ) * K3CNSAT

!        COMPUTE EQUILIBRIUM ALGAL STOICHIOMETRY
!JQI         CCHL3EQ = WCCHL3 / (1.-(1.-QF3)*(1.-RNUTR3(IXY,IZ))
!JQI     .           - FSC3 - (K3C+K3RB)/((1.-K3RG)*GPRE3))
         CCHL3EQ = CONST(88) / (1.-(1.-CONST(92))*(1.-RNUTR3(IXY,IZ))   &
                 - CONST(87) - (K3C+CONST(82))/((1.-CONST(84))*CONST(76)))
!JQI         PCRB3EQ = (QF3 + (1.-QF3)*XEMP2) / WCP3
         PCRB3EQ = (CONST(92) + (1.-CONST(92))*XEMP2) / CONST(89)
!JQI         NCRB3EQ = (QF3 + (1.-QF3)*XEMP1) / WCN3
         NCRB3EQ = (CONST(92) + (1.-CONST(92))*XEMP1) / CONST(90)
!JQI         SCRB3EQ = (QF3 + (1.-QF3)*XEMP3) / WCS3
         SCRB3EQ = (CONST(92) + (1.-CONST(92))*XEMP3) / CONST(91)

!        COMPUTE CURRENT STATE OF ALGAL STOICHIOMETRY
         IF(DTWQ == 0.0) THEN
          CCHL3S(IXY,IZ) = (CCHL3S(IXY,IZ) + DT*K3TEQ*CCHL3EQ)/(1.+DT*K3TEQ)
          PCRB3(IXY,IZ) = (PCRB3(IXY,IZ) + DT*K3TEQ*PCRB3EQ)/(1.+DT*K3TEQ)
          NCRB3(IXY,IZ) = (NCRB3(IXY,IZ) + DT*K3TEQ*NCRB3EQ)/(1.+DT*K3TEQ)
          SCRB3(IXY,IZ) = (SCRB3(IXY,IZ) + DT*K3TEQ*SCRB3EQ)/(1.+DT*K3TEQ)
         ELSE
          CCHL3S(IXY,IZ) = (CCHL3S(IXY,IZ) + DTWQ*K3TEQ*CCHL3EQ)/(1.+DTWQ*K3TEQ)
          PCRB3(IXY,IZ) = (PCRB3(IXY,IZ) + DTWQ*K3TEQ*PCRB3EQ)/(1.+DTWQ*K3TEQ)
          NCRB3(IXY,IZ) = (NCRB3(IXY,IZ) + DTWQ*K3TEQ*NCRB3EQ)/(1.+DTWQ*K3TEQ)
          SCRB3(IXY,IZ) = (SCRB3(IXY,IZ) + DTWQ*K3TEQ*SCRB3EQ)/(1.+DTWQ*K3TEQ)
         ENDIF

!JQI         RESPR = (K3RB + K3RG*K3C)/(1.-K3RG)
         RESPR = (CONST(82) + CONST(84)*K3C)/(1.-CONST(84))
!JQI         RESP(IXY,IZ) =  RESP(IXY,IZ) + RESPR*PHYT3(IXY,IZ)
         RESP(IXY,IZ) =  RESP(IXY,IZ) + RESPR*CARAY(IXY,IZ,4)

!        GROSS GROWTH RATE
!JQI         GPP3(IXY,IZ) = (K3C + RESPR)*PHYT3(IXY,IZ)
         GPP3(IXY,IZ) = (K3C + RESPR)*CARAY(IXY,IZ,4)

!        GRAZING
!JQI         GRAZ3 = K3GRZCT(ISTP20(IXY,IZ))*PHYT3(IXY,IZ)
         GRAZ3 = K3GRZCT(ISTP20(IXY,IZ))*CARAY(IXY,IZ,4)
         GRAZ(IXY,IZ) = GRAZ(IXY,IZ) + GRAZ3

!        TOTAL LOSS
!JQI         DPP3(IXY,IZ) = RESPR*PHYT3(IXY,IZ) + GRAZ3
         DPP3(IXY,IZ) = RESPR*CARAY(IXY,IZ,4) + GRAZ3

!        FORMULATE DERIVATIVE ... NET GROWTH (GP-DP)
!JQI         CDPHYT3(IXY,IZ) = (1.-FLOCEX)*GPP3(IXY,IZ)-DPP3(IXY,IZ)
         CDARAY(IXY,IZ,4) = (1.-CONST(156))*GPP3(IXY,IZ)-DPP3(IXY,IZ)
!JQI         GPDP3_DDA(IXY,IZ) = GPDP3_DDA(IXY,IZ) +
!JQI     .                          +  CDPHYT3(IXY,IZ)/PHYT3(IXY,IZ)
         GPDP3_DDA(IXY,IZ) = GPDP3_DDA(IXY,IZ) + CDARAY(IXY,IZ,4)/CARAY(IXY,IZ,4)

!if(ngid(ixy).eq.3920.and.iz.eq.10) write(73,'(A,20E10.2)')'eutro 5650', &
!          time,GPP3(ixy,iz),resp(ixy,iz), &
!          DPP3(IXY,IZ), CDARAY(IXY,IZ,4)/CARAY(IXY,IZ,4), &
!          CARAY(IXY,IZ,4),K3C,RESPR,GRAZ3,K3GRZCT(ISTP20(IXY,IZ)), &
!          XEMP1,XEMP2,XEMP3,DAVEI,HYDTEMP(IXY,IZ),NCRB3(IXY,IZ),SCRB3(IXY,IZ)

        END IF
       END DO
      END DO

      IF(IDDOPT == 1) THEN
!$doacross local(iz,ixy) , share(rnutr1_dda,rnutr2_dda,rnutr3_dda)
       RNUTR1_DDA = RNUTR1_DDA + RNUTR1
       RNUTR2_DDA = RNUTR2_DDA + RNUTR2
       RNUTR3_DDA = RNUTR3_DDA + RNUTR3
      ENDIF
 
      IF(IDISK == 2 .OR. IDISK == 3) THEN
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        APPNET = (GPP1(IXY,IZ) + GPP2(IXY,IZ) + GPP3(IXY,IZ)     &
               - RESP(IXY,IZ))/(HBAR(IXY)*DZ(IXY,IZ))
        IF(IDDOPT == 0) THEN
!JQI         CALL RCAWBUF(1,SAL(IXY,IZ),SKE(IXY,IZ),
!JQI     .        ALG1VS(IXY,IZ),ALG2VS(IXY,IZ),APPNET)
      !   CALL RCAWBUF(1,CARAY(IXY,IZ,1),SKE(IXY,IZ),ALG1VS(IXY,IZ),ALG2VS(IXY,IZ),APPNET)
        ELSE
!JQI         CALL RCAWBUF(1,SAL_DDA(IXY,IZ)/IAVGDDCNTR,SKE(IXY,IZ),
!JQI     .        SAL_DMIN(IXY,IZ),SAL_DMAX(IXY,IZ),APPNET)
      !   CALL RCAWBUF(1,VARRAY(IXY,IZ,2)/IAVGDDCNTR,SKE(IXY,IZ),   &
      !                VARRAY(IXY,IZ,12),VARRAY(IXY,IZ,13),APPNET)
        ENDIF
       END DO	

       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
!JQI         GPDP=(GPP1(IXY,IZ)-DPP1(IXY,IZ))/
!JQI     .                        MAX(PHYT1(IXY,IZ),1.E-9)
         GPDP=(GPP1(IXY,IZ)-DPP1(IXY,IZ))/MAX(CARAY(IXY,IZ,2),1.E-9)
!JQI         CALL RCAWBUF(2,PHYT1(IXY,IZ),
!JQI     .      1000.*PHYT1(IXY,IZ)/CCHL1S(IXY,IZ),
!JQI     .      CCHL1S(IXY,IZ),RNUTR1(IXY,IZ),GPDP)
        ! CALL RCAWBUF(2,CARAY(IXY,IZ,2),                    &
        !              1000.*CARAY(IXY,IZ,2)/CCHL1S(IXY,IZ), &
        !              CCHL1S(IXY,IZ),RNUTR1(IXY,IZ),GPDP)
        ELSE
!JQI         CALL RCAWBUF(2,PHYT1_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        CHLA1_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        CCHL1_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        RNUTR1_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        GPDP1_DDA(IXY,IZ)/IAVGDDCNTR)
        ! CALL RCAWBUF(2,VARRAY(IXY,IZ,3)/IAVGDDCNTR,       &
        !              VARRAY(IXY,IZ,6)/IAVGDDCNTR,         &
        !              VARRAY(IXY,IZ,9)/IAVGDDCNTR,         &
        !              RNUTR1_DDA(IXY,IZ)/IAVGDDCNTR,       &
        !              GPDP1_DDA(IXY,IZ)/IAVGDDCNTR)
        ENDIF
       END DO
       
       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
!JQI         GPDP=(GPP2(IXY,IZ)-DPP2(IXY,IZ))/
!JQI     .                      MAX(PHYT2(IXY,IZ),1.E-9)
         GPDP=(GPP2(IXY,IZ)-DPP2(IXY,IZ))/MAX(CARAY(IXY,IZ,3),1.E-9)
!JQI         CALL RCAWBUF(3,PHYT2(IXY,IZ),
!JQI     .      1000.*PHYT2(IXY,IZ)/CCHL2S(IXY,IZ),
!JQI     .      CCHL2S(IXY,IZ),RNUTR2(IXY,IZ),GPDP)
        ! CALL RCAWBUF(3,CARAY(IXY,IZ,3),                    &
        !              1000.*CARAY(IXY,IZ,3)/CCHL2S(IXY,IZ), &
        !              CCHL2S(IXY,IZ),RNUTR2(IXY,IZ),GPDP)
        ELSE
!JQI         CALL RCAWBUF(3,PHYT2_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        CHLA2_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        CCHL2_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        RNUTR2_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        GPDP2_DDA(IXY,IZ)/IAVGDDCNTR)
       !  CALL RCAWBUF(3,VARRAY(IXY,IZ,4)/IAVGDDCNTR,        &
       !       VARRAY(IXY,IZ,7)/IAVGDDCNTR,                  &
       !       VARRAY(IXY,IZ,10)/IAVGDDCNTR,                 &
       !       RNUTR2_DDA(IXY,IZ)/IAVGDDCNTR,                &
       !       GPDP2_DDA(IXY,IZ)/IAVGDDCNTR)
        ENDIF
       END DO

       DO IDMP=1,NDMPS
        IXY = IFDMPS(IDMP,1)
        IZ  = IFDMPS(IDMP,2)
        IF(IDDOPT == 0) THEN
!JQI         GPDP=(GPP3(IXY,IZ)-DPP3(IXY,IZ))/
!JQI     .                      MAX(PHYT3(IXY,IZ),1.E-9)
         GPDP=(GPP3(IXY,IZ)-DPP3(IXY,IZ))/MAX(CARAY(IXY,IZ,4),1.E-9)
!JQI         CALL RCAWBUF(4,PHYT3(IXY,IZ),
!JQI     .      1000.*PHYT3(IXY,IZ)/CCHL3S(IXY,IZ),
!JQI     .      CCHL3S(IXY,IZ),RNUTR3(IXY,IZ),GPDP)
        ! CALL RCAWBUF(4,CARAY(IXY,IZ,4),                     &
        !              1000.*CARAY(IXY,IZ,4)/CCHL3S(IXY,IZ),  &
        !              CCHL3S(IXY,IZ),RNUTR3(IXY,IZ),GPDP)
        ELSE
!JQI         CALL RCAWBUF(4,PHYT3_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        CHLA3_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        CCHL3_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        RNUTR3_DDA(IXY,IZ)/IAVGDDCNTR,
!JQI     .        GPDP3_DDA(IXY,IZ)/IAVGDDCNTR)
        ! CALL RCAWBUF(4,VARRAY(IXY,IZ,5)/IAVGDDCNTR,        &
        !      VARRAY(IXY,IZ,8)/IAVGDDCNTR,                  &
        !      VARRAY(IXY,IZ,11)/IAVGDDCNTR,                 &
        !      RNUTR3_DDA(IXY,IZ)/IAVGDDCNTR,                &
        !      GPDP3_DDA(IXY,IZ)/IAVGDDCNTR)                 
        ENDIF
       END DO
      ENDIF

!        COMPUTE AMMONIA PREFERENCE 
      DO IZ=1,NZ
       DO IXY=1,M
        IF(FSM(IXY) == 1.) THEN
!JQI         PNH41(IXY,IZ) =
!JQI     .        DNH4(IXY,IZ)*NO23(IXY,IZ)
!JQI     .               /((KMN1+DNH4(IXY,IZ))*(KMN1+NO23(IXY,IZ)))
!JQI     .      + DNH4(IXY,IZ)*KMN1
!JQI     .        /((DNH4(IXY,IZ)+NO23(IXY,IZ))*(KMN1+NO23(IXY,IZ))) 
!JQI         PNH42(IXY,IZ) =
!JQI     .        DNH4(IXY,IZ)*NO23(IXY,IZ)
!JQI     .               /((KMN2+DNH4(IXY,IZ))*(KMN2+NO23(IXY,IZ)))
!JQI     .      + DNH4(IXY,IZ)*KMN2
!JQI     .        /((DNH4(IXY,IZ)+NO23(IXY,IZ))*(KMN2+NO23(IXY,IZ))) 
!JQI         PNH43(IXY,IZ) =
!JQI     .        DNH4(IXY,IZ)*NO23(IXY,IZ)
!JQI     .               /((KMN3+DNH4(IXY,IZ))*(KMN3+NO23(IXY,IZ)))
!JQI     .      + DNH4(IXY,IZ)*KMN3
!JQI     .        /((DNH4(IXY,IZ)+NO23(IXY,IZ))*(KMN3+NO23(IXY,IZ))) 

         PNH41(IXY,IZ) =                                    &
           CKINARRAY(IXY,IZ,2)*CARAY(IXY,IZ,15)             &
           /((CONST(15)+CKINARRAY(IXY,IZ,2))                &
           *(CONST(15)+CARAY(IXY,IZ,15)))                   &
           + CKINARRAY(IXY,IZ,2)*CONST(15)                  &
           /((CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))         &
           *(CONST(15)+CARAY(IXY,IZ,15))) 
         PNH42(IXY,IZ) =                                    &
           CKINARRAY(IXY,IZ,2)*CARAY(IXY,IZ,15)             &
           /((CONST(47)+CKINARRAY(IXY,IZ,2))                &
           *(CONST(47)+CARAY(IXY,IZ,15)))                   &
           + CKINARRAY(IXY,IZ,2)*CONST(47)                  &
           /((CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))         &
           *(CONST(47)+CARAY(IXY,IZ,15))) 
         PNH43(IXY,IZ) =                                    &
           CKINARRAY(IXY,IZ,2)*CARAY(IXY,IZ,15)             &
           /((CONST(79)+CKINARRAY(IXY,IZ,2))                &
           *(CONST(79)+CARAY(IXY,IZ,15)))                   &
           + CKINARRAY(IXY,IZ,2)*CONST(79)                  &
           /((CKINARRAY(IXY,IZ,2)+CARAY(IXY,IZ,15))         &
           *(CONST(79)+CARAY(IXY,IZ,15))) 
        ENDIF
       END DO
      END DO 	

! INITIALIZE ARRAY FOR DETAILED DUMP AVERAGING, IF REQUIRED
      IF(IDISK == 2 .OR. IDISK == 3) THEN
       IF(IDDOPT == 1) THEN
        RNUTR1_DDA = 0.
        RNUTR2_DDA = 0.
        RNUTR3_DDA = 0.
        GPDP1_DDA  = 0.
        GPDP2_DDA  = 0.
        GPDP3_DDA  = 0.
       ENDIF
      ENDIF

      RETURN
      END SUBROUTINE INIT_LC_EUTRO
 
