      SUBROUTINE RCA02
! 
!     RCA02 READS PRINT CONTROL PARAMETERS AND INTEGR HISTORY
! 
      USE ALL_VARS, ONLY : MSR,MYID,PAR
      USE MOD_RCA
      IMPLICIT NONE
      SAVE
!      INCLUDE  'RCACM'
      INTEGER(KIND=2) :: DDGDPBY(40)
      CHARACTER(LEN=4) :: TWARPSLC
      CHARACTER(LEN=80) :: COMMENT
      INTEGER :: IDTWQ,I,J,IPRNTG,IPRNTD,ISCALP,IPRNTMB
      INTEGER :: ISTARTMB,IENDMB,ISCALPMB,IUNITCHECK
      REAL :: PRNTG,PRNTD,PRNTMB
      DATA  DDGDPBY/40*1/

      CHARACTER(LEN=2) :: NAME
      CHARACTER(LEN=80) :: FILENAME12,FILENAME13
      INTEGER :: OUT12,OUT13,OUT14,OUT16

!     Integration Option and Integration Timestep Information

!     INTGRTYP -  INTEGRATION METHOD
!                  = 1  -  EXPLICIT - UPWIND
!                  = 3  -  SPLIT TIME STEP - UPWIND
!                  = 4  -  EXPLICIT - UPWIND/SMOLARKIEWICZ
!                  = 5  -  LEAPFROG - UPWIND/SMOLARKIEWICZ
!                  = 6  -  SPLIT TIME STEP - UPWIND/SMOLARKIEWICZ
!        NEGSLN =  0  POSITIVE SOLUTIONS ONLY
!                  1  NEGATIVE SOLUTIONS PERMITTED
!        SLCOPT =  0  DO NOT PERFORM SIGMA-LEVEL CORRECTION FOR
!                     HORIZONTAL DIFFUSION
!                  1  PERFORM SIGMA-LEVEL CORRECTION FOR
!                     HORIZONTAL DIFFUSION
!       ISMOLAR =  0  "ECOM3D" SMOLAR_2 - SECOND ORDER ACCURATE
!                  1  "ECOM3D" SMOLAR_R - RECURSIVE VERSION
!    ISMOLBCOPT =  0  DO NOT APPLY SMOLARKIEWICZ CORRECTIONS AT BOUNDARIES
!                  1  APPLY SMOLARKIEWICZ CORRECTIONS AT BOUNDARIES

      READ(IN,'(A)') COMMENT
      READ(IN,'(2I10)',ERR=950) NEGSLN,SLCOPT
      IF(MSR)THEN
       IF(NEGSLN == 1) WRITE(OUT,2070) 
 2070  FORMAT(/10X,'USER HAS CHOSEN TO PERMIT NEGATIVE SOLUTIONS'/)
       IF(SLCOPT == 0) WRITE(OUT,2080) 
 2080  FORMAT(/10X,'NO SIGMA-LEVEL CORRECTION FOR HORIZONTAL DIFFUSION')
      END IF
      IF(SLCOPT == 1) THEN
        IF(MSR) WRITE(OUT,2090) 
 2090   FORMAT(///10X,'SIGMA-LEVEL CORRECTION FOR HORIZONTAL DIFFUSION ENABLED')
        READ(IN,'(A)') COMMENT
        READ(IN,'(I10,6X,A4,I10/(8F10.0))')                              &
             IDTSLCSECS,TWARPSLC,NOSLC,(SLCDPTH(I),I=1,NOSLC)
        ISCALT=IUNITCHECK(TWARPSLC,'TWARPSLC')
        IDTSLCSECS=IDTSLCSECS*ISCALT
        DTSLC=IDTSLCSECS/86400.
        IF(MSR) WRITE(OUT,2110)  IDTSLCSECS,DTSLC,(SLCDPTH(I),I=1,NOSLC)
 2110   FORMAT(10X,'TIME INTERVAL BETWEEN CALCULATING SIGMA-LEVEL',       &
          ' DOMAIN AVERAGES = ',I5,' SECONDS (= ',F7.5,' DAYS)'/10X,      &
          'STANDARD LEVEL DEPTHS TO BE USED FOR DOMAIN AVERAGING'/        &
          (10X,10F7.2))
        DO I=1,NOSLC
          SLCDPTH(I) = -SLCDPTH(I)
        END DO
      ENDIF

!     Time Wrap Scale Fact, Simulation Start Time, Integration Interval for WQ
!       Note: Units for -TZERO- are DAYS ... Irrespective of -TWARP-
      READ(IN,'(A)') COMMENT
      READ(IN,'(6X,A4,E10.4,I10)',ERR=950)  TWARP,TZERO,IDTWQ
      ISCALT=IUNITCHECK(TWARP,'TWARP   ')
      SCALT = ISCALT
      IF(MSR)THEN
       WRITE(OUT,'(10X,"TIME WARP FACTOR ",A4)') TWARP 
       IF(TZERO /= 0.) WRITE(OUT,2175) TZERO 
 2175  FORMAT(10X,'TIME =',F7.2,' DAYS IS THE START OF THE SIMULATION'/)
       IF(IDTWQ /= 0.) WRITE(OUT,2180) IDTWQ,TWARP
 2180  FORMAT(                                                               &
        10X,'INTEGRATION STEP-SIZE TO BE USED FOR THE KINETIC SUBROUTINE    &
       -TUNER- IS',I7,1X,A4)
      END IF 
      IDTWQSECS=ISCALT*IDTWQ
      DTWQ=FLOAT(IDTWQSECS)/86400.
 
!        Note: Units for -TEND- and -TBRK- are DAYS ... Irrespective of -TWARP-
      READ(IN,'(A)') COMMENT
      READ(IN,'(I10)',ERR=950)  NSTEP
      READ(IN,'(A)') COMMENT
      READ(IN,'(4(I10,F10.0))',ERR=950) (ISTEP(I),TBRK(I),I=1,NSTEP)
      IF(MSR) WRITE(OUT,2350)  TWARP,TWARP,TWARP,TWARP
 2350 FORMAT(/5X,4('   DT(',A4,')    T(DAYS)')/)
      IF(MSR) WRITE(OUT,2500) (ISTEP(I),TBRK(I),I=1,NSTEP)
 2500 FORMAT(5X,4(I11,F11.2))
      DO I=1,NSTEP
       ISTEP(I)=ISCALT*ISTEP(I)
      ENDDO
      TEND = TBRK(1)
      IDTSECS = ISTEP(1)
      DT = FLOAT(ISTEP(1))/86400.
      DO I=1,NSTEP
       IF(MOD(IDTWQ,ISTEP(I)) /= 0) THEN
         IF(MSR) WRITE(OUT,2512)  IDTWQ,I,ISTEP(I)
 2512    FORMAT(///10X,'ERROR...IDTWQ =',I5,                              &
             ' IS NOT AN EXACT MULTIPLE OF ISTEP(',I3,') =',I5            &
             /10X,'RCA TERMINATED')
!         CALL EXIT
         CALL PSTOP('rca02_108 ')
       ENDIF
      ENDDO
      IF(DT == 0.0) THEN
        IF(MSR) WRITE(OUT,2310)
 2310   FORMAT(///10X,'ERROR...INTEGRATION STEP SIZE = 0.0')
!        CALL EXIT
        CALL PSTOP('rca02-115 ')
      ENDIF

!     Global and Detailed Dump Intervals

      print*,'before global and detailed dump'
      READ(IN,'(A)') COMMENT
      print*,'1',COMMENT
      READ(IN,'(2I10,I10,6X,A4,2I10)',ERR=950)                           &
           IPRNTG,IPRNTD,NDMPS,TWARPP,IGDOPT,IDDOPT
      print*,IPRNTG,IPRNTD,NDMPS,TWARPP,IGDOPT,IDDOPT
      ISCALP=IUNITCHECK(TWARPP,'TWARPP  ')
      IF(NDMPS > 0) THEN

# if defined (MULTIPROCESSOR)
       IF(PAR)THEN
        WRITE(NAME,'(I2.2)') MYID
	FILENAME12='RCAF12_'//TRIM(NAME)
	FILENAME13='RCAF13_'//TRIM(NAME)
	OUT12 = MYID*100+12
	OUT13 = MYID*100+13
       ! OPEN(OUT12,FILE=FILENAME12,FORM='UNFORMATTED')
       ! OPEN(OUT13,FILE=FILENAME13,FORM='UNFORMATTED')
	! FILENAME12='RCAF14_'//TRIM(NAME)
	! OUT14 = MYID*100+14
	! OPEN(OUT14,FILE=FILENAME12,FORM='UNFORMATTED')	       
       END IF	
# else
       ! IF(MSR) OPEN(UNIT=12,FILE='RCAF12',FORM='UNFORMATTED')
       ! IF(MSR) OPEN(UNIT=13,FILE='RCAF13',FORM='UNFORMATTED')
# endif	
!       Segments for Detailed Dumps
        READ(IN,'(A)') COMMENT
!        READ(IN,'(12I4)') ((IFDMPS(I,J),J=1,2),I=1,NDMPS) 
        READ(IN,'(12I8)') ((IFDMPS(I,J),J=1,2),I=1,NDMPS)   !tIAN	
!       Bypass options for Detailed Dumps
        READ(IN,'(A)') COMMENT
        READ(IN,'(40I2)') (DDMPSBY(ISYS),ISYS=1,NOSYS)
        DO ISYS=1,NOSYS
          DDGDPBY(ISYS) = DDMPSBY(ISYS)
        END DO
# if !defined (MULTIPROCESSOR)
        IF(MSR)THEN
	! WRITE(12)  NDMPS
        ! WRITE(12)  ((IFDMPS(I,J),J=1,2),I=1,NDMPS)
        ! WRITE(12)  DDGDPBY
	END IF 
# endif	
      ENDIF
 
      IPRNTGSECS=ISCALP*IPRNTG
      IPRNTDSECS=ISCALP*IPRNTD
      PRNTG=FLOAT(IPRNTGSECS)/86400.
      PRNTD=FLOAT(IPRNTDSECS)/86400.
      IF(MSR)THEN
       WRITE(OUT,1200)   IPRNTGSECS,PRNTG
 1200  FORMAT(//10X,'GLOBAL PRINT INTERVAL',I7,' SECONDS (',             &
          E12.3,' DAYS)')
       IF(IGDOPT == 0) WRITE(OUT,1205)
 1205  FORMAT(10X,'USER SELECTED NO GLOBAL DUMP AVERAGING OPTION')
       IF(IGDOPT == 1) WRITE(OUT,1210)
 1210  FORMAT(10X,'USER SELECTED GLOBAL DUMP AVERAGING OPTION')
       IF(NDMPS > 0) THEN
        WRITE(OUT,1220)   IPRNTDSECS,PRNTD
        WRITE(OUT,1235)   ((IFDMPS(I,J),J=1,2),I=1,NDMPS)
       ENDIF
 1220  FORMAT(/10X,'THE FOLLOWING SEGMENTS WILL BE SAVED USING A PRINT',   &
        ' INTERVAL OF',I7,' SECONDS (',E12.3,' DAYS)')
 1235  FORMAT(10X,'(',2I5,')',2X,'(',2I5,')',2X,'(',2I5,')',2X             &
                 ,'(',2I5,')',2X,'(',2I5,')',2X,'(',2I5,')',2X             &
                 ,'(',2I5,')',2X)     !Tian
       IF(IDDOPT == 0) WRITE(OUT,1240)
 1240  FORMAT(10X,'USER SELECTED NO DETAILED DUMP AVERAGING OPTION')
       IF(IDDOPT == 1) WRITE(OUT,1245)
 1245  FORMAT(10X,'USER SELECTED DETAILED DUMP AVERAGING OPTION')
      END IF

!     Segments to be displayed for intermediate dumps
      READ(IN,'(A)') COMMENT
!      READ(IN,'(12I4)',ERR=950) ((IDUMP(I,J),J=1,2),I=1,6)       
      READ(IN,'(12I8)',ERR=950) ((IDUMP(I,J),J=1,2),I=1,6)  !Tian

!     Mass Balance Checks
      READ(IN,'(A)') COMMENT
      READ(IN,'(2I10,6X,A4,3I10)',ERR=950)                                &
                MASSBAL,IPRNTMB,TWARPMB,IMBDOPT,ISTARTMB,IENDMB
      IF(MASSBAL == 0) THEN
       IF(MSR) WRITE(OUT,3000)
 3000  FORMAT(//10X,'MASS BALANCE CHECKS WILL NOT BE PERFORMED')
      ELSE
       ISCALPMB=IUNITCHECK(TWARPMB,'TWARPMB ')
       IPRNTMBSECS=ISCALPMB*IPRNTMB
       ISMBSECS=ISCALPMB*ISTARTMB
       IEMBSECS=ISCALPMB*IENDMB
       IF(IEMBSECS == 0) THEN
         IF(MSR) WRITE(OUT,3050) 
 3050    FORMAT(10X,'INPUT ERROR ... ZERO VALUE SPECIFIED FOR IENDMB'/    &
                10X,'RCA TERMINATED')
!         CALL EXIT
         CALL PSTOP('rca02_211 ')
       ENDIF
       IF(IPRNTMBSECS == 0) THEN
         IF(MSR) WRITE(OUT,3060) 
 3060    FORMAT(10X,'INPUT ERROR ... ZERO VALUE SPECIFIED FOR IPRNTMB'/   &
                10X,'RCA TERMINATED')
!         CALL EXIT
         CALL PSTOP('rca02_218 ')
       ENDIF
       PRNTMB=FLOAT(IPRNTMBSECS)/86400.
       IF(MSR)THEN
        OPEN(UNIT=17,FILE='RCAFMB',FORM='UNFORMATTED')
        WRITE(OUT,3100)  IPRNTMBSECS,PRNTMB
 3100   FORMAT(//                                                           &
         10X,'USER HAS REQUESTED MASS BALANCE/FLUX BALANCE COMPUTATIONS'/   &
         10X,'BALANCES PRINT INTERVAL',I7,' SECONDS (',                     &
             E12.3,' DAYS)')
        IF(IMBDOPT == 0) WRITE(OUT,3200)
 3200   FORMAT(10X,'BALANCES WILL BE INSTANTANEOUS VALUES')
        IF(IMBDOPT == 1) WRITE(OUT,3210)
 3210   FORMAT(10X,'BALANCES WILL BE AVERAGED VALUES')
       END IF
      ENDIF

      RETURN

  950 CALL FMTER
!      CALL EXIT 
      CALL PSTOP('rca02_239 ')
      END SUBROUTINE RCA02
      
# if defined (MULTIPROCESSOR)
      SUBROUTINE GLOB2LOC02
      USE ALL_VARS,ONLY : PAR,MYID
      USE MOD_RCA,ONLY : NDMPS,IFDMPS
      USE MOD_PAR

      IMPLICIT NONE
      INTEGER :: I,I1,NCNT,J
      INTEGER,ALLOCATABLE,DIMENSION(:) :: TEMP1,TEMP2
      CHARACTER(LEN=2) :: NAME
      CHARACTER(LEN=80) :: FILENAME
      INTEGER :: OUTID
      
       IF(PAR)THEN
        ALLOCATE(TEMP1(NDMPS))  ; TEMP1 = 0
        ALLOCATE(TEMP2(NDMPS))  ; TEMP2 = 0
	NCNT = 0
	!!SET UP LOCAL NDMPS NODES
	DO I=1,NDMPS
	 I1 = NLID(IFDMPS(I,1))
	 IF(I1 /= 0)THEN
	  NCNT = NCNT +1
	  TEMP1(NCNT) = I1
	  TEMP2(NCNT) = IFDMPS(I,2)
	 END IF
        END DO
        NDMPS = NCNT
	IF(NCNT > 0)THEN
	 IFDMPS(1:NCNT,1) = TEMP1(1:NCNT)
	 IFDMPS(1:NCNT,2) = TEMP2(1:NCNT)
	END IF  
	DEALLOCATE(TEMP1,TEMP2) 
      
        OUTID = MYID*100+12
        IF(NDMPS > 0)THEN
       !  WRITE(OUTID) (NGID(IFDMPS(I,1)),IFDMPS(I,2),I=1,NDMPS) !Tian Temporal
        ELSE
        ! WRITE(OUTID) "THERE IS NO TIME SERIES OUTPUT NODE IN THIS PROCESSOR"  !Tian Temporal
        END IF 
       END IF 
            
      RETURN
      END SUBROUTINE GLOB2LOC02
# endif
      
